[
    {
        "id": "cora_test_10",
        "graph": {
            "node_idx": 10,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    5,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    3,
                    17,
                    4,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                10,
                9552,
                4724,
                16479,
                17132,
                9593,
                791,
                3661,
                13783,
                5386,
                16519,
                9594,
                10901,
                10651,
                18173,
                15192,
                410,
                333,
                14640,
                12219,
                16809,
                1295,
                13703,
                13701,
                21814,
                1116,
                17960,
                3528,
                13337,
                22238
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: first-class user-level threadsit is often desirable, for reasons of clarity, portability, and efficiency, to write parallel programs in which the number of processes is independent of the number of available processors. several modern operating systems support more than one process in an address space, but the overhead of creating and synchronizing kernel processes can be high. many runtime environments implement lightweight processes (threads) in user space, but this approach usually results in second-class status for threads, making it difficult or impossible to perform scheduling operations at appropriate times (e.g. when the current thread blocks in the kernel). in addition, a lack of common assumptions may also make it difficult for parallel programs or library routines that use dissimilar thread packages to communicate with each other, or to synchronize access to shared data. we describe a set of kernel mechanisms and conventions designed to accord first-class status to user-level threads, allowing them to be used in any reasonable way that traditional kernel-provided processes can be used, while leaving the details of their implementation to user-level code. the key features of our approach are (1) shared memory for asynchronous communication between the kernel and the user, (2) software interrupts for events that might require action on the part of a user-level scheduler, and (3) a scheduler interface convention that facilitates interactions in user space between dissimilar kinds of threads. we have incorporated these mechanisms in the psyche parallel operating system, and have used them to implement several different kinds of user-level threads. we argue for our approach in terms of both flexibility and performance. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_11",
        "graph": {
            "node_idx": 11,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    1,
                    18,
                    19,
                    2,
                    20,
                    3,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    20,
                    47,
                    51,
                    52,
                    53,
                    7,
                    54,
                    55,
                    56,
                    9,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                11,
                4731,
                8476,
                3733,
                5493,
                2750,
                854,
                8894,
                21660,
                7036,
                457,
                17714,
                2254,
                2126,
                5962,
                8475,
                10966,
                533,
                18387,
                14378,
                623,
                10824,
                1134,
                7318,
                15354,
                15883,
                9239,
                8490,
                670,
                4925,
                9024,
                9355,
                22198,
                12643,
                4411,
                4410,
                2751,
                7247,
                24170,
                19122,
                8291,
                8608,
                4409,
                7340,
                9319,
                851,
                1918,
                6195,
                3461,
                18903,
                19431,
                24347,
                6088,
                9356,
                239,
                6087,
                6161,
                24627,
                5792,
                463,
                458,
                14581,
                5960
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: algorithms for scalable synchronization on shared-memory multiprocessorsbusy-wait techniques are heavily used for mutual exclusion and barrier synchronization in shared-memory parallel programs. unfortunately, typical implementations of busy-waiting tend to produce large amounts of memory and interconnect contention, introducing performance bottlenecks that become markedly more pronounced as applications scale. we argue that this problem is not fundamental, and that one can in fact construct busy-wait synchronization algorithms that induce no memory or interconnect contention. the key to these algorithms is for every processor to spin on separate locally-accessible flag variables, and for some other processor to terminate the spin with a single remote write operation at an appropriate time. flag variables may be locally-accessible as a result of coherent caching, or by virtue of allocation in the local portion of physically distributed shared memory. we present a new scalable algorithm for spin locks that generates o(1) remote references per lock acquisition, independent of the number of processors attempting to acquire the lock. our algorithm provides reasonable latency in the absence of contention, requires only a constant amount of space per lock, and requires no hardware support other than a swap-with-memory instruction. we also present a new scalable barrier algorithm that generates o(1) remote references per processor reaching the barrier, and observe that two previously-known barriers can likewise be cast in a form that spins only on locally-accessible flag variables. none of these barrier algorithms requires hardware support beyond the usual atomicity of memory reads and writes. we compare the performance of our scalable algorithms with other software approaches to busy-wait synchronization on both a sequent symmetry and a bbn butterfly. our principal conclusion is that contention due to synchronization need not be a problem in large-scale shared-memory multiprocessors. the existence of scalable algorithms greatly weakens the case for costly special-purpose hardware support for synchronization, and provides a case against so-called \"dance hall\" architectures, in which shared memory locations are equally far from all processors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_13",
        "graph": {
            "node_idx": 13,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    17,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10
                ]
            ],
            "node_list": [
                13,
                1918,
                6181,
                3548,
                1201,
                19967,
                4965,
                18555,
                16977,
                4731,
                14633,
                4461,
                978,
                17559,
                17776,
                22198,
                7237,
                272,
                455,
                6519,
                17979,
                18013,
                6090,
                1199,
                6086,
                22507,
                5299,
                9206,
                12213,
                4400,
                3411,
                14642,
                14641,
                14883,
                22950,
                22951,
                2126,
                18387,
                533,
                531,
                8475,
                10966,
                20032,
                4793,
                19393,
                14378,
                5071,
                9404
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the mit alewife machine: a large-scale distributed-memory multiprocessorthe alewife multiprocessor project focuses on the architecture and design of a large-scale parallel machine. the machine uses a low dimension direct interconnection network to provide scalable communication bandwidth, while allowing the exploitation of locality. despite its distributed memory architecture, alewife allows efficient shared memory programming through a multilayered approach to locality management. a new scalable cache coherence scheme called limitless directories allows the use of caches for reducing communication latency and network bandwidth requirements. alewife also employs run-time and compile-time methods for partitioning and placement of data and processes to enhance communication locality. while the above methods attempt to minimize communication latency, remote communication with distant processors cannot be completely avoided. alewife's processor, sparcle, is designed to tolerate these latencies by rapidly switching between threads of computation. this paper describes the alewife architecture and concentrates on the novel hardware features of the machine including limitless directories and the rapid context switching processor. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_44",
        "graph": {
            "node_idx": 44,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    9,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    10
                ]
            ],
            "node_list": [
                44,
                3010,
                10427,
                19337,
                7437,
                10627,
                24256,
                5794,
                6969,
                19781,
                16208,
                13922,
                19327,
                8616,
                2830,
                8690,
                19577,
                10281,
                41,
                5848,
                10628,
                16087,
                23705,
                12053,
                11008,
                21260,
                7933,
                17608,
                19554
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: minimizing conflicts: a heuristic repair method for constraint-satisfaction and scheduling problemsthis paper describes a simple heuristic approach to solving large-scale constraint satisfaction and scheduling problems. in this approach one starts with an inconsistent assignment for a set of variables and searches through the space of possible repairs. the search can be guided by a value-ordering heuristic, the min-conflicts heuristic, that attempts to minimize the number of constraint violations after each step. the heuristic can be used with a variety of different search strategies. we demonstrate empirically that on the n-queens problem, a technique based on this approach performs orders of magnitude better than traditional backtracking techniques. we also describe a scheduling application where the approach has been used successfully. a theoretical analysis is presented both to explain why this method works well on certain types of problems and to predict when it is likely to be most effective. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_63",
        "graph": {
            "node_idx": 63,
            "edge_index": [
                [
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                63,
                62,
                10044,
                11480,
                8214,
                18702,
                19204,
                19605,
                20166,
                7714,
                22019
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning to recognize objects in images: acquiring and using probabilistic models of appearancewe accept this thesis as conforming to the required standard \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_70",
        "graph": {
            "node_idx": 70,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    4,
                    5,
                    9,
                    6,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                70,
                4609,
                1137,
                11552,
                5757,
                4608,
                7349,
                9884,
                16667,
                18520,
                733,
                1136
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: abstraction and decomposition in hillclimbing design optimizationthe performance of hillclimbing design optimization can be improved by abstraction and decomposition of the design space. methods for automatically finding and exploiting such abstractions and decompositions are presented in this paper. a technique called \"operator importance analysis\" finds useful abstractions. it does so by determining which of a given set of operators are the most important for a given class of design problems. hillclimbing search runs faster when performed using this this smaller set of operators. a technique called \"operator interaction analysis\" finds useful decompositions. it does so by measuring the pairwise interaction between operators. it uses such measurements to form an ordered partition of the operator set. this partition can then be used in a \"hierarchic\" hillclimbing algorithm which runs faster than ordinary hillclimbing with an unstructured operator set. we have implemented both techniques and tested them in the domain of racing yacht hull design. our experimental results show that these two methods can produce substantial speedups with little or no loss in quality of the resulting designs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_73",
        "graph": {
            "node_idx": 73,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                73,
                16442,
                17621,
                24384,
                75,
                24618,
                18900,
                20489,
                17269,
                5544,
                19125,
                24729,
                19458,
                76,
                20283,
                9695
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiple perspectives, reasoned assumptions, and virtual copiesreset reproduction of cmu computer science report cmu-cs-83-127. published in ijcai'83, pp. 309-314. reprinted july 1994. reprinting c fl copyright 1983, 1994 by jon doyle. current address: mit laboratory for computer science, cambridge, massachusetts. abstract: little is clearly understood about the similarities, differences, and comparative computational and representational advantages of the many proposals extant for organizing minds into collections of \"mental subagents.\" using a new mathematical framework for exactly specifying the structure of mental organizations, we formulate separately the ideas of multiple perspectives, reasoned assumptions, and virtual copies. when combined, these notions form a common backbone for systems as diverse as conlan, netl, and fol, and show many particular characteristics of those systems results of the \"language of thought\" adopted for representing the contents of mental subagents. the framework also suggests connections between the \"strengths\" of mental attitudes, the ambiguity of \"self,\" and the possibilities for self-omniscience. this paper will be presented at ijcai-83. i thank joseph schatz for advice, and ben cohen for reading a distant ancestor of this paper. this research was supported by the defense advanced research projects agency (dod), arpa order no. 3597, monitored by the air force avionics laboratory under contract f33615-81-k-1539. the views and conclusions contained in this document are those of the author, and should not be interpreted as representing the official policies, either expressed or implied, of the defense advanced research projects agency or the government of the united states of america. c fl copyright 1983 by jon doyle. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_75",
        "graph": {
            "node_idx": 75,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    1,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    9,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9
                ]
            ],
            "node_list": [
                75,
                16442,
                17269,
                5544,
                19125,
                24729,
                19458,
                76,
                20283,
                9695,
                9689,
                24801,
                5812,
                5811,
                17621,
                18271,
                9690,
                77,
                1236,
                6009,
                20472
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: assumptions and pareto optimalityreset reproduction of cmu computer science report cmu-cs-85-121. published in ijcai-85, pp. 87-90 (1985). reprinted july 1994. reprinting c fl copyright 1984, 1985, 1994 by jon doyle. current address: mit laboratory for computer science, cambridge, massachusetts. abstract: default and non-monotonic inference rules are not really epistemological statements, but are instead desires or preferences of the agent about the makeup of its own mental state (epistemic or otherwise). the fundamental relation in non-monotonic logic is not so much self-knowledge as self-choice or self-determination, and the fundamental justification of the interpretations and structures involved come from decision theory and economics rather than from logic and epistemology. this paper is based on a talk presented at the csli workshop on planning and practical reasoning, stanford university, june 1984. i thank joseph schatz for his advice and comments, and monnett hanvey and one of the ijcai referees for discovering an error in an earlier draft. this research was supported by the defense advanced research projects agency (dod), arpa order no. 3597, monitored by the air force avionics laboratory under contract f33615-81-k-1539. the views and conclusions contained in this document are those of the author, and should not be interpreted as representing the official policies, either expressed or implied, of the defense advanced research projects agency or the government of the united states of america. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_77",
        "graph": {
            "node_idx": 77,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    1,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    7,
                    6,
                    21,
                    22,
                    23,
                    0,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    2,
                    40,
                    41
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                77,
                1007,
                18852,
                4306,
                19401,
                16442,
                17274,
                8403,
                5813,
                10331,
                3145,
                1952,
                5752,
                6755,
                8622,
                1008,
                24878,
                6541,
                20982,
                1078,
                16930,
                2655,
                8253,
                3089,
                2107,
                24637,
                4838,
                3994,
                8159,
                9133,
                12833,
                12823,
                21199,
                8160,
                17269,
                3146,
                24452,
                1521,
                2689,
                1520,
                7688,
                7617
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: rationality and its roles in reasoningthe economic theory of rationality promises to equal mathematical logic in its importance for the mechanization of reasoning. we survey the growing literature on how the basic notions of probability, utility, and rational choice, coupled with practical limitations on information and resources, influence the design and analysis of reasoning and representation systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_98",
        "graph": {
            "node_idx": 98,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    4,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    6,
                    33,
                    34,
                    35,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                98,
                17705,
                3785,
                3037,
                8321,
                11432,
                16846,
                2499,
                17659,
                24736,
                15798,
                3929,
                17618,
                180,
                3782,
                4796,
                3360,
                6130,
                97,
                24907,
                8589,
                3760,
                13446,
                8638,
                13501,
                14982,
                16639,
                20643,
                20881,
                12551,
                5934,
                16643,
                6307,
                7718,
                24734,
                9895
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hierarchical correctness proofs for distributed algorithmswe introduce the input-output automaton, a simple but powerful model of computation in asynchronous distributed networks. with this model we are able to construct modular, hierarchical correctness proofs for distributed algorithms. we define this model, and give an interesting example of how it can be used to construct such proofs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_101",
        "graph": {
            "node_idx": 101,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    1,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    1,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    2,
                    26,
                    27,
                    4,
                    28,
                    29,
                    30,
                    31,
                    2,
                    32,
                    21,
                    33,
                    34,
                    35,
                    4,
                    28,
                    36,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                101,
                180,
                100,
                18072,
                99,
                19090,
                5258,
                24700,
                19118,
                18955,
                96,
                16448,
                3929,
                781,
                9627,
                15797,
                23644,
                93,
                24736,
                8321,
                18237,
                6728,
                3992,
                22441,
                2499,
                8308,
                2376,
                8373,
                92,
                19778,
                3255,
                6222,
                1628,
                3993,
                3866,
                6657,
                15468
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: time-constrained automata (extended abstract)in this paper, we augment the input-output automaton model in order to reason about time in concurrent systems, and we prove simple properties of this augmentation. the input-output automata model is a useful model for reasoning about computation in concurrent and distributed systems because it allows fundamental properties such as fairness and compositionality to be expressed easily and naturally. a unique property of the model is that systems are modeled as the composition of autonomous components. this paper describes a way to add a notion of time to the model in a way that preserves these properties. the result is a simple, compositional model for real-time computation that provides a convenient notation for expressing timing properties such as bounded fairness. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_114",
        "graph": {
            "node_idx": 114,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    8,
                    30,
                    31,
                    32,
                    33,
                    27,
                    34,
                    35,
                    36,
                    37,
                    38,
                    21,
                    39,
                    40,
                    41,
                    27,
                    42,
                    43,
                    44,
                    33,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    10,
                    4,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                114,
                3287,
                4470,
                12277,
                3058,
                19074,
                11937,
                116,
                11519,
                5416,
                2919,
                16749,
                25036,
                20362,
                20361,
                25046,
                17804,
                16086,
                11864,
                11865,
                2952,
                8703,
                3523,
                5429,
                4473,
                6860,
                9956,
                2825,
                7100,
                13982,
                12273,
                16713,
                2827,
                4841,
                8615,
                17766,
                11863,
                11908,
                2606,
                7070,
                14160,
                18881,
                20161,
                486,
                11111,
                4840,
                313,
                6000,
                3305,
                4861,
                2341
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: partial-order planning: evaluating possible efficiency gainstechnical report 92-05-01 expanded version february 19, 1993 abstract although most people believe that planners that delay step-ordering decisions as long as possible are more efficient than those that manipulate totally ordered sequences of actions, this intuition has received little formal justification or empirical validation. in this paper we do both, characterizing the types of domains that offer performance differentiation and the features that distinguish the relative overhead of three planning algorithms. as expected, the partial-order (nonlinear) planner often has an advantage when confronted with problems in which the specific order of the plan steps is critical. we argue that the observed performance differences are best understood with an extension of korf's taxonomy of subgoal collections. each planner quickly solved problems whose subgoals were independent or trivially serializable, but problems with laboriously serializable or nonserializable subgoals were intractable for all planners. since different plan representations induce distinct search spaces, the subgoals for a given problem may be trivially serializable for one planner, laboriously serializable for another, and nonserializable for a third. we contend that the partial-order representation yields superior performance because it more frequently results in trivial serializability. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_131",
        "graph": {
            "node_idx": 131,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                131,
                16444
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a person: a comparison of human and computer game playingthis paper appeared in 1995 in the proceedings of the seventeenth annual conference of the cognitive science society, 709-714. pittsburgh: lawrence erlbaum associates. abstract the subject of this paper is the role of transferable commonsense principles in the acquisition of game-playing expertise. we argue that individuals skilled in a domain develop expertise because they know and apply these principles, and that most game-playing programs do not play like people. the paper describes hoyle, a model of an expert game player that relies on the use of commonsense principles, limited memory, and useful knowledge to learn to play two-person, perfect information finite-board games expertly. we then describe an experiment in which human subjects played three such games against a computer expert. after playing these games, the subjects evaluated hoyle's game-playing principles in the context of their own behavior. verbal protocols and subjects' evaluations revealed considerable overlap between the principles preferred by our subjects and those preferred by hoyle. using learning time as a measure of difficulty, the subjects' performance and hoyle's performance ordered the three games identically. this experiment also revealed differences in the use of game-playing principles between skilled and unskilled players: skilled players judged the game-playing principles to be more effective than did unskilled players, skilled players used several different principles while unskilled players relied on one principle, and skilled players anticipated their opponent's moves while unskilled players merely reacted. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_140",
        "graph": {
            "node_idx": 140,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    7,
                    28,
                    29,
                    30,
                    10,
                    31,
                    7,
                    3,
                    32,
                    33,
                    9,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    5,
                    44,
                    45,
                    46,
                    47,
                    38,
                    48,
                    6,
                    38,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    8,
                    8,
                    8,
                    10
                ]
            ],
            "node_list": [
                140,
                2282,
                6392,
                136,
                321,
                2531,
                10092,
                18154,
                5880,
                24640,
                2977,
                4845,
                6706,
                17872,
                914,
                20075,
                17231,
                860,
                9192,
                18272,
                4720,
                8008,
                5722,
                6391,
                6989,
                8071,
                17370,
                18161,
                4706,
                319,
                757,
                20350,
                5585,
                5586,
                16598,
                8565,
                17149,
                24977,
                6967,
                16648,
                17433,
                887,
                18082,
                3165,
                19438,
                19907,
                2997,
                6447,
                2319
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: indexing, elaboration and refinement: incremental learning of explanatory casesthis article describes how a reasoner can improve its understanding of an incompletely understood domain through the application of what it already knows to novel problems in that domain. case-based reasoning is the process of using past experiences stored in the reasoner's memory to understand novel situations or solve novel problems. however, this process assumes that past experiences are well understood and provide good \"lessons\" to be used for future situations. this assumption is usually false when one is learning about a novel domain, since situations encountered previously in this domain might not have been understood completely. furthermore, the reasoner may not even have a case that adequately deals with the new situation, or may not be able to access the case using existing indices. we present a theory of incremental learning based on the revision of previously existing case knowledge in response to experiences in such situations. the theory has been implemented in a case-based story understanding program that can (a) learn a new case in situations where no case already exists, (b) learn how to index the case in memory, and (c) incrementally refine its understanding of the case by using it to reason about new situations, thus evolving a better understanding of its domain through experience. this research complements work in case-based reasoning by providing mechanisms by which a case library can be automatically built for use by a case-based reasoning program. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_147",
        "graph": {
            "node_idx": 147,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                147,
                148,
                17378,
                19669,
                23185
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the evolutionary cost of learningtraits that are acquired by members of an evolving population during their lifetime, through adaptive processes such as learning, can become genetically specified in later generations. thus there is a change in the level of learning in the population over evolutionary time. this paper explores the idea that as well as the benefits to be gained from learning, there may also be costs to be paid for the ability to learn. it is these costs that supply the selection pressure for the genetic assimilation of acquired traits. two models are presented that attempt to illustrate this assertion. the first uses kauffman's nk fitness landscapes to show the effect that both explicit and implicit costs have on the assimilation of learnt traits. a characteristic `hump' is observed in the graph of the level of plasticity in the population showing that learning is first selected for and then against as evolution progresses. the second model is a practical example in which neural network controllers are evolved for a small mobile robot. results from this experiment also show the hump. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_154",
        "graph": {
            "node_idx": 154,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    2,
                    15,
                    16,
                    17,
                    18,
                    9,
                    19,
                    20,
                    21,
                    2,
                    17,
                    6,
                    22,
                    23,
                    5,
                    9,
                    24,
                    25,
                    6,
                    7,
                    26,
                    8,
                    27,
                    22,
                    28,
                    29,
                    30,
                    31
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                154,
                153,
                4491,
                7412,
                9771,
                11565,
                11582,
                20177,
                11560,
                11485,
                8983,
                11265,
                14878,
                14892,
                22662,
                11574,
                20175,
                20176,
                7055,
                20900,
                1797,
                17734,
                11573,
                24967,
                2896,
                10873,
                11568,
                11569,
                11564,
                20183,
                11570,
                20189
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: importance and discrete three point transportwe have recently developed a hierarchical algorithm for global illumination based on a radiance formulation for three point transport, and have implemented this algorithm over environments containing surfaces exhibiting glossy reflection. in this paper we derive the adjoint to our original transport formulation, and describe the preliminary results of application of this adjoint in the form of an importance driven version of our glossy implementation. these results show a significant reduction in transport computation, and indicate that an importance and radiance driven hierarchical technique possesses great promise for the development of efficient global illumination algorithms for general reflection. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_212",
        "graph": {
            "node_idx": 212,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    3,
                    14,
                    15,
                    16,
                    17,
                    1,
                    8,
                    18,
                    19,
                    20,
                    21,
                    22,
                    1,
                    23,
                    24,
                    25,
                    26,
                    1,
                    27,
                    3,
                    14,
                    28,
                    1,
                    0,
                    8,
                    26,
                    7,
                    3,
                    1,
                    8,
                    29,
                    9,
                    30,
                    31,
                    32,
                    33
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                212,
                8088,
                204,
                14144,
                24196,
                9919,
                24856,
                2439,
                12644,
                206,
                23835,
                8433,
                9982,
                24766,
                22081,
                8087,
                5301,
                2646,
                4645,
                1905,
                24139,
                21422,
                1458,
                14145,
                202,
                8979,
                23874,
                18933,
                10945,
                23070,
                24225,
                21519,
                21718,
                21722
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: type directed cloning for object-oriented programsobject-oriented programming encourages the use of small functions, dynamic dispatch (virtual functions), and inheritance for code reuse. as a result, such programs typically suffer from inferior performance. the problem is that polymorphic functions do not know the exact types of the data they operate on, and hence must use indirection to operate on them. however, most polymorphism is parametric (e.g. templates in c++) which is amenable to elimination through code replication. we present a cloning algorithm which eliminates parametric polymorphism while minimizing code duplication. the effectiveness of this algorithm is demonstrated on a number of concurrent object-oriented programs. finally, since functions and data structures can be parameterized over properties other than type, this algorithm is applicable to general for ward data flow problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_225",
        "graph": {
            "node_idx": 225,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    2,
                    10,
                    3,
                    4,
                    11,
                    12,
                    6,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    3,
                    23,
                    3,
                    24,
                    5,
                    25,
                    6,
                    26,
                    27,
                    28,
                    29,
                    30
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                225,
                16453,
                373,
                16594,
                2043,
                18293,
                3176,
                2046,
                345,
                16458,
                1562,
                4149,
                4525,
                6460,
                217,
                294,
                4378,
                20197,
                9520,
                5461,
                2683,
                2044,
                637,
                10888,
                18033,
                15621,
                20925,
                353,
                12808,
                12665,
                7865
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on completeness and soundness in interactive proof systemsan interactive proof system with perfect completeness (resp. perfect soundness) for a language l is an interactive proof (for l) in which for every x 2 l (resp. x 62 l) the verifier always accepts (resp. always rejects). we show that any language having an interactive proof system has one (of the arthur-merlin type) with perfect completeness. on the other hand, only languages in n p have interactive work done while third author was working at the ibm-scientific center, technion city, haifa, israel. second author was partially supported by the fund for basic research administered by the israeli academy of sciences and humanities. fifth author was partially supported by psc-cuny grant. warning: reproduced almost automatically from an old troff file. the resulting text was not proofread. proofs with perfect soundness. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_236",
        "graph": {
            "node_idx": 236,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    1,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    18,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                236,
                24296,
                603,
                24719,
                774,
                4126,
                17834,
                461,
                22434,
                12612,
                17236,
                7984,
                709,
                9409,
                2845,
                6908,
                17503,
                599,
                14580,
                6169,
                5841,
                240,
                17006,
                17063,
                24569,
                548,
                16890,
                1305,
                7985,
                24433,
                711,
                11421,
                4247,
                463,
                12161,
                17705,
                21760,
                22556,
                1639
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: techniques for reducing consistency-related communication in distributed shared memory systemsdistributed shared memory (dsm) is a software abstraction of shared memory on a distributed memory machine. one of the key problems in building an efficient dsm system is to reduce the amount of communication needed to keep the distributed memories consistent. in this paper we present four techniques for doing so: (1) software release consistency; (2) multiple consistency protocols; (3) write-shared protocols; and (4) an update-with-timeout mechanism. these techniques have been implemented in the munin dsm system. we compare the performance of seven application programs on munin, first to their performance when implemented using message passing and then to their performance when running on a conventional dsm system that does not embody the above techniques. on a 16-processor cluster of workstations, munin's performance is within 5% of message passing for four out of the seven applications. for the other three, performance is within 29% to 33%. detailed analysis of two of these three applications indicates that the addition of a function shipping capability would bring their performance within 7% of the message passing performance. compared to a conventional dsm system, munin achieves performance improvements ranging from a few to several hundred percent, depending on the application. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_242",
        "graph": {
            "node_idx": 242,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    5,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    18,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    36,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    10,
                    60,
                    7,
                    61,
                    46,
                    62,
                    63,
                    64,
                    65,
                    66,
                    8,
                    34,
                    67,
                    68,
                    69,
                    70,
                    71,
                    9,
                    72,
                    58,
                    59
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    10,
                    10
                ]
            ],
            "node_list": [
                242,
                14549,
                603,
                2220,
                397,
                3662,
                461,
                13711,
                812,
                5490,
                13712,
                7984,
                709,
                2845,
                599,
                6908,
                17503,
                5300,
                9409,
                6169,
                5841,
                3388,
                941,
                10478,
                10583,
                14572,
                12170,
                877,
                22647,
                9324,
                12379,
                16806,
                567,
                17138,
                5297,
                17834,
                711,
                8463,
                11015,
                855,
                15214,
                21421,
                16905,
                13678,
                5685,
                6785,
                14145,
                2784,
                9919,
                17705,
                1305,
                4247,
                14580,
                463,
                11543,
                7985,
                12161,
                12162,
                13864,
                21701,
                13713,
                22081,
                23883,
                17063,
                8199,
                24189,
                1297,
                19757,
                553,
                10945,
                6983,
                9024,
                939
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: implications of hierarchical n-body methods for multiprocessor architectureto design effective large-scale multiprocessors, designers need to understand the characteristics of the applications that will use the machines. application characteristics of particular interest include the amount of communication relative to computation, the structure of the communication, and the local cache and memory requirements, as well as how these characteristics scale with larger problems and machines. one important class of applications is based on hierarchical n-body methods, which are used to efficiently solve a wide range of scientific and engineering problems. important characteristics of these methods include the fact that the physical domains they are applied to are often nonuniform and dynamically changing, and their use of long-range, irregular communication. applications that use these methods may therefore present challenges for parallel performance. this paper examines the key architectural implications of applications that represent the use of the two dominant hierarchical n-body methods: the barnes-hut method and the fast multipole method. we first show that exploiting temporal locality on accesses to communicated data is critical to obtaining good performance on these applications, and argue that coherent caches on shared address space machines exploit this locality both automatically and very effectively. next, we examine the implications of scaling the applications to run on larger machines. we use scaling methods that reflect the concerns of the application scientist, and find that this leads to different conclusions about how communication traffic and local memory usage scale than do naive methods of scaling. in particular, we show that under the most realistic form of scaling, both the communication to computation ratio as well as the working set size (and hence the ideal cache size per processor) grow slowly as larger problems are run on larger machines. lastly, we examine the effects of using two different abstractions for interprocessor communication: a shared address space and explicit message passing between private address spaces. we show that the lack of an efficiently supported shared address space substantially increases the programming complexity and performance overhead of message-passing implementations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_244",
        "graph": {
            "node_idx": 244,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    4,
                    6,
                    1,
                    3,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                244,
                24129,
                9659,
                18517,
                245,
                24851,
                19918
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic cursive script recognition. a hybrid approach. to appear in advances in handwriting and drawing:dynamic (on-line) cursive script recognition works with data obtained from a digitising device which contains temporal information regarding the order of writing. in such a system the data is processed as entered, or immediately afterwards. direct feedback can be provided to the user. users of interactive dynamic recognition systems can adjust their writing style so as to obtain the best recognition results. they can write more legibly. however when a word is long the writing tends to deteriorate, making the recognition task more difficult. this paper describes two approaches to recognition: a strict method, requiring recognition of all the letters in a word, and a more tolerant method which recognizes only a part of the word and postulates the ending using a lexicon. the strict recognition employs a pattern recognizer operating at the input data level and uses a lexicon to remove character strings not allowable for the language concerned. thus ambiguity is removed by the higher level lexical processor. the more tolerant recognizer uses the lexicon to provide possible character strings where use of the strict processing would fail to produce allowable words. the two methods are evaluated and the results reported for lexicons of various sizes. a combination of these methods aimed at increasing the recognition accuracy and obtaining a more tolerant system is described. the system described shows improvements in recognition for long words. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_287",
        "graph": {
            "node_idx": 287,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    12,
                    30,
                    20,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    19,
                    21,
                    23,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    5,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    7,
                    8,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                287,
                4538,
                276,
                1899,
                1202,
                19578,
                24863,
                10322,
                5297,
                19183,
                4420,
                7501,
                8199,
                6983,
                3779,
                14554,
                19286,
                19377,
                9206,
                8302,
                8301,
                5679,
                9178,
                2218,
                21040,
                5381,
                5176,
                5567,
                5382,
                3549,
                4539,
                11632,
                1295,
                9208,
                3661,
                20609,
                12865,
                12864,
                14150,
                286,
                5300,
                1200,
                5298,
                5184,
                14542,
                6292,
                2323,
                17138,
                3507,
                1040,
                7490,
                16480,
                2482,
                333,
                22094,
                22097,
                14568
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hpam: an active message layer for a network of hp workstationsactive messages is a thin, highly optimized communication layer targeted at the library or compiler writer. a primary goal of an active message layer is to deliver the minimum latency and peak bandwidth of the network hardware to user programs. previous work on active messages demonstrated a 6-to 12-fold performance improvement over vendor supplied send and receive libraries for massively parallel processors. this document describes an active message layer we have constructed on a network of workstations. the hpam layer currently runs on a network of 4 hp 9000/ 735 workstations with medusa fddi interface cards. hpam achieves a round trip time for a 20 byte payload of 29 msec, an order of magnitude better than traditional software, and a maximum bandwidth of 12 mb/s. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_317",
        "graph": {
            "node_idx": 317,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    10,
                    8,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    4,
                    4,
                    4,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                317,
                16455,
                16463,
                17463,
                315,
                24821,
                24973,
                24977,
                6967,
                485,
                6968,
                17608,
                5722,
                18391,
                18974,
                19510,
                19518,
                6969
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: representing self-knowledge for introspection about memory searchthis position paper sketches a framework for modeling introspective reasoning and discusses the relevance of that framework for modeling introspective reasoning about memory search. it argues that effective and flexible memory processing in rich memories should be built on five types of explicitly represented self-knowledge: knowledge about information needs, relationships between different types of information, expectations for the actual behavior of the information search process, desires for its ideal behavior, and representations of how those expectations and desires relate to its actual performance. this approach to modeling memory search is both an illustration of general principles for modeling introspective reasoning and a step towards addressing the problem of how a reasoner human or machinecan acquire knowledge about the properties of its own knowledge base. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_320",
        "graph": {
            "node_idx": 320,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                320,
                16455,
                16463,
                18161,
                6967,
                23279,
                17608,
                5722,
                18391,
                18974,
                19510,
                19518,
                6969
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: metacognitive adaptation: regulating the plan transformation process have employed case-based planning approaches to perform case-adaptation.recent research in case-based reasoning suggests the use of metacognitive approaches to control the reasoning process. whereas most of this research focuses on issues related to retrieval and representation, we describe a metacognitive approach to case adaptation based on the generation of questions and answers. the answer generation utilizes particular planning knowledge in the form of introspection plans and adaptation plans. an example of our implementation, iu-lian, will illustrate this process. recent results in case-based reasoning have addressed the control of the reasoning process using ideas from metacognition. the term metacognition describes the \"active monitoring and consequent regulation\" of the agent's own cognitive processes (flavell 1976). as a result, we can regard the term metacognition as describing two distinct but related issues: the issue of knowledge about cognition and the issue of regulating cognition. the first term includes awareness of the agent's resources with respect to the demands of the agent's thinking; for example, the availability of analogous knowledge during an analogical mapping task. the second issue involves self-regulating mechanisms such as planning, monitoring, and self-questioning (brown 1987; flavell & wellman 1977; nelson & narens 1994; ram 1991; wong 1985). such metacognitive skills should be improved with growing experience. reasoners should be able to adapt and reuse such experience. the concept of reuse of previous experience has been exploited in the paradigm of case-based reasoning where previous experience is usually represented by cases (see kolodner 1993 for an overview). important components of the case-based reasoning approach are the retrieval of a previous case and the adaptation of this case to obtain a solution for the current problem (hammond 1989; hinrichs 1992; jones 1992; kass 1990; ram 1992). if this approach is applied to plans, we refer to it as case-based planning (hammond 1989). however, these earlier examples of adaptation planning do not use metacognitive strategies such as selection and monitoring. therefore we have developed an approach to plan adaptation which represents the regulation of the adaptation process in the form of adaptation plans and introspection plans. adaptation plans are used to perform the actual adaptation process, whereas introspection plans are used to monitor and to guide the adaptation process. the retrieval of these plans is supported by questions and answers which are also generated by case-based planning. representing reasoning stages in the form of plans has the advantage that intentional content and context of the reasoning process can be accessed by metacognitive processes and can be learned. within the framework of metacognitve adaptation, we investigated the central hypothesis: in particular, we will address the following issues: * interleaving the adaptation process and the moni toring process to improve the adaptation result. in the remainder of the paper, we will describe our approach by means of an example involving the domains of electric circuits and systems of water pipes. we will then explain our approach of metacognitive adaptation and compare it with the adaptation mechanisms in the chef system (hammond 1989). finally, we will discuss the approach with respect to the general adaptation problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_331",
        "graph": {
            "node_idx": 331,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    4,
                    11,
                    4,
                    12,
                    13,
                    4,
                    14,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    4,
                    4,
                    4,
                    8,
                    8,
                    9,
                    9
                ]
            ],
            "node_list": [
                331,
                5360,
                7398,
                24430,
                8973,
                18401,
                24776,
                24802,
                8972,
                14557,
                22441,
                616,
                5879,
                19778,
                10313
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the robustness of the h r m hierarchym is a robust hierarchy. roughly speaking, a hierarchy is robust if each type is \"stronger\" than any combination of lower level types. for certain models of binding between processes and objects, we prove here that h r m is not a robust hierarchy. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_344",
        "graph": {
            "node_idx": 344,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    11,
                    12,
                    8,
                    13,
                    14,
                    7,
                    12,
                    15,
                    3,
                    14,
                    16,
                    17,
                    8,
                    18
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    3,
                    3,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    10
                ]
            ],
            "node_list": [
                344,
                3077,
                16719,
                5634,
                18342,
                21017,
                20351,
                10103,
                5635,
                22497,
                16357,
                4576,
                382,
                8442,
                12807,
                11125,
                350,
                9181,
                24032
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: keying hash functions for message authenticationan abridged version of this paper appears in advances in cryptology - crypto 96 proceedings, abstract the use of cryptographic hash functions like md5 or sha for message authentication has become a standard approach in many internet applications and protocols. though very easy to implement, these mechanisms are usually based on ad hoc techniques that lack a sound security analysis. we present new constructions of message authentication schemes based on a cryptographic hash function. our schemes, nmac and hmac, are proven to be secure as long as the underlying hash function has some reasonable cryptographic strengths. moreover we show, in a quantitative way, that the schemes retain almost all the security of the underlying hash function. in addition our schemes are efficient and practical. their performance is essentially that of the underlying hash function. moreover they use the hash function (or its compression function) as a black box, so that widely available library code or hardware can be used to implement them in a simple way, and replaceability of the underlying hash function is easily supported. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_353",
        "graph": {
            "node_idx": 353,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    11,
                    12,
                    10,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    1,
                    3,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    10,
                    17,
                    0,
                    28,
                    4,
                    29,
                    30,
                    31,
                    6,
                    32,
                    33,
                    11,
                    34,
                    35,
                    36,
                    24,
                    37
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8
                ]
            ],
            "node_list": [
                353,
                2875,
                343,
                11087,
                350,
                16025,
                2874,
                22445,
                14291,
                21022,
                16458,
                19350,
                21901,
                16835,
                382,
                3817,
                3818,
                10103,
                23264,
                9474,
                6638,
                11721,
                22239,
                16355,
                24032,
                5634,
                21019,
                347,
                7618,
                346,
                344,
                23691,
                8442,
                19237,
                12746,
                13960,
                24000,
                22233
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: entity authentication and key distributionan abridged version of this paper appears in advances in cryptology - crypto '93 proceedings, abstract entity authentication and key distribution are central cryptographic problems in distributed computing|but up until now, they have lacked even a meaningful definition. one consequence is that incorrect and inefficient protocols have proliferated. this paper provides the first treatment of these problems in the complexity-theoretic framework of modern cryptography. addressed in detail are two problems of the symmetric, two-party setting: mutual authentication and authenticated key exchange. for each we present a definition, protocol, and proof that the protocol meets its goal, assuming the (minimal) assumption of pseudorandom function. when this assumption is appropriately instantiated, the protocols given are practical and efficient. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_355",
        "graph": {
            "node_idx": 355,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    3,
                    14,
                    15,
                    16,
                    17,
                    18,
                    11,
                    19,
                    20,
                    21,
                    22,
                    23,
                    19,
                    24,
                    7,
                    11,
                    25
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    8,
                    8
                ]
            ],
            "node_list": [
                355,
                17108,
                356,
                8117,
                6050,
                360,
                3817,
                10103,
                379,
                22445,
                22497,
                16458,
                15622,
                5365,
                21018,
                17347,
                18667,
                19245,
                7258,
                8442,
                12805,
                16835,
                12746,
                3818,
                12807,
                13963
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the exact security of digital signatures how to sign with rsa and rabinwe describe an rsa-based signing scheme which combines essentially optimal efficiency with attractive security properties. signing takes one rsa decryption plus some hashing, verification takes one rsa encryption plus some hashing, and the size of the signature is the size of the modulus. assuming the underlying hash functions are ideal, our schemes are not only provably secure, but are so in a tight way| an ability to forge signatures with a certain amount of computational resources implies the ability to invert rsa (on the same size modulus) with about the same computational effort. furthermore, we provide a second scheme which maintains all of the above features and in addition provides message recovery. these ideas extend to provide schemes for rabin signatures with analogous properties; in particular their security can be tightly related to the hardness of factoring. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_362",
        "graph": {
            "node_idx": 362,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    5,
                    6,
                    7,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                362,
                16458,
                18635,
                7491,
                20863,
                17759,
                18000,
                18752
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: private information retrieval two database scheme with communication complexity of o(n 1=3 a scheme forpublicly accessible databases are an indispensable resource for retrieving up to date information. but they also pose a significant risk to the privacy of the user, since a curious database operator can follow the user's queries and infer what the user is after. indeed, in cases where the users' intentions are to be kept secret, users are often cautious about accessing the database. it can be shown that when accessing a single database, to completely guarantee the privacy of the user, the whole database should be downloaded , namely n bits should be communicated (where n is the number of bits in the database). in this work, we investigate whether by replicating the database, more efficient solutions to the private retrieval problem can be obtained. we describe schemes that enable a user to access k replicated copies of a database (k 2) and privately retrieve information stored in the database. this means that each individual database gets no information on the identity of the item retrieved by the user. our schemes use the replication to gain substantial saving. in particular, we have 3 log 2 n databases with polylogarithmic (in n) communication complexity. fl a preliminary version of this paper appeared in proc. of 36th ieee conference on the foundations of computer science (focs), pp. 41-50, october 1995. y computer science dept., technion, haifa, israel. email: benny@cs.technion.ac.il z computer science and applied math. dept., weizmann institute of science, rehovot, israel. supported by grant no. 92-00226 from the israel-us binational science foundation (bsf), jerusalem, israel. email: oded@wisdom.weizmann.ac.il \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_367",
        "graph": {
            "node_idx": 367,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    2,
                    15,
                    16,
                    17,
                    18,
                    19,
                    4,
                    1,
                    20,
                    21,
                    22,
                    23,
                    24,
                    5,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    3,
                    21,
                    1,
                    23,
                    5,
                    31,
                    32,
                    33,
                    9,
                    10,
                    10,
                    1,
                    34
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    10,
                    10
                ]
            ],
            "node_list": [
                367,
                16458,
                11591,
                17146,
                1756,
                365,
                12269,
                11120,
                351,
                13450,
                379,
                20195,
                20384,
                11884,
                2463,
                3731,
                10416,
                3730,
                11883,
                8595,
                346,
                368,
                19244,
                11305,
                19350,
                7618,
                11556,
                350,
                20674,
                6638,
                12275,
                355,
                352,
                12809,
                13963
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: two remarks concerning the goldwasser-micali-rivest signature scheme (reproduced from preprint)the focus of this note is the goldwasser-micali-rivest signature scheme (presented in the 25th pocs , 1984). the gmr scheme has the salient property that, unless factoring is easy, it is infeasible to forge any signature even through an adaptive chosen message attack. we present two technical contributions with respect to the gmr scheme: 1) the gmr scheme can be made totally \"memoryless\": that is, the signature generated by the signer on message m does not depend on the previous signed messages. (in the original scheme, the signature to a message depends on the number of messages signed before.) 2) the gmr scheme can be implemented almost as efficiently as the rsa: the original implementation of the gmr scheme based on factoring, can be speeded-up by a factor of jn j. thus, both signing and verifying take time o(jn j 3 log 2 jn j). (here n is the moduli.) \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_371",
        "graph": {
            "node_idx": 371,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    1,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    3,
                    26,
                    27,
                    28,
                    7,
                    29,
                    6,
                    1,
                    30,
                    31,
                    27,
                    6,
                    32,
                    4,
                    33,
                    34,
                    0,
                    35,
                    9,
                    36,
                    37,
                    25,
                    3,
                    27,
                    28,
                    7,
                    29,
                    38,
                    39,
                    8,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                371,
                373,
                4438,
                2045,
                363,
                370,
                16458,
                341,
                20925,
                12665,
                352,
                1562,
                1121,
                1373,
                10546,
                1374,
                226,
                714,
                20926,
                21482,
                1983,
                6461,
                16594,
                8392,
                18087,
                340,
                3176,
                385,
                2047,
                2041,
                17514,
                342,
                8595,
                6628,
                18667,
                20572,
                8997,
                2043,
                8996,
                383,
                12808,
                346,
                15621,
                13963,
                360,
                12746,
                12805,
                8117,
                353,
                11556,
                348
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the composition of zero-knowledge proof systemsthe wide applicability of zero-knowledge interactive proofs comes from the possibility of using these proofs as subroutines in cryptographic protocols. a basic question concerning this use is whether the (sequential and/or parallel) composition of zero-knowledge protocols is zero-knowledge too. we demonstrate the limitations of the composition of zero-knowledge protocols by proving that the original denition of zero-knowledge is not closed under sequential composition; and that even the strong formulations of zero-knowledge (e.g. black-box simulation) are not closed under parallel execution. we present lower bounds on the round complexity of zero-knowledge proofs, with signicant implications to the parallelization of zero-knowledge protocols. we prove that 3-round interactive proofs and constant-round arthur-merlin proofs that are black-box simulation zero-knowledge exist only for languages in bpp. in particular, it follows that the \"parallel versions\" of the rst interactive proofs systems presented for quadratic residuosity, graph isomorphism and any language in np, are not black-box simulation zero-knowledge, unless the corresponding languages are in bpp. whether these parallel versions constitute zero-knowledge proofs was an intriguing open question arising from the early works on zero-knowledge. other consequences are a proof of optimality for the round complexity of various known zero-knowledge protocols, and the necessity of using secret coins in the design of \"parallelizable\" constant-round zero-knowledge proofs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_375",
        "graph": {
            "node_idx": 375,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    8,
                    0,
                    5,
                    6,
                    1,
                    9,
                    10,
                    11,
                    8,
                    0,
                    5,
                    6,
                    8,
                    6,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    7,
                    7
                ]
            ],
            "node_list": [
                375,
                16458,
                9472,
                9473,
                366,
                19350,
                9474,
                8116,
                18667,
                361,
                7402,
                7258,
                8117,
                20671
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: proactive public key and signature systemsemerging applications like electronic commerce and secure communications over open networks have made clear the fundamental role of public key cryptography as a unique enabler for world-wide scale security solutions. on the other hand, these solutions clearly expose the fact that the protection of private keys is a security bottleneck in these sensitive applications. this problem is further worsened in the cases where a single and unchanged private key must be kept secret for very long time (such is the case of certification authority keys, bank and e-cash keys, etc.). one crucial defense against exposure of private keys is offered by threshold cryptography where the private key functions (like signatures or decryption) are distributed among several parties such that a predetermined number of parties must cooperate in order to correctly perform these operations. this protects keys from any single point of failure. an attacker needs to break into a multiplicity of locations before it can compromise the system. however, in the case of long-lived keys the attacker still has a considerable period of time (like a few years) to gradually break the system. here we present proactive public key systems where the threshold solutions are further enhanced by periodic fl ibm research, haifa, amir@haifa.vnet.ibm.com y university of california, san diego, markus@cs.ucsd.edu z massachusetts institute of technology, stasio@mit.edu x ibm t.j. watson research center, hugo@watson.ibm.com -certco, new york, moti@certco.com, moti@cs.columbia.edu refreshment of the shared function in such a way that the private key (and its corresponding public key) is kept unchanged for as long as required, yet the breaking of the system requires the attacker to break into several locations in a short period of time, e.g during one day or one week. we present such solutions for a variety of discrete log based cryptosystems including dss and schnorr signatures, elgamal-like signatures and encryption, undeniable signatures, and more. we build on previous work on proactive secret sharing and threshold schemes, and develop a general methodology for the combination of many of these systems into secure proactive public key solutions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_376",
        "graph": {
            "node_idx": 376,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    3,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    5,
                    21,
                    22,
                    11,
                    23,
                    24,
                    12,
                    3,
                    25,
                    13,
                    1,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    5,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    35,
                    42,
                    33,
                    43,
                    44,
                    45,
                    46,
                    7,
                    47,
                    48,
                    25,
                    11,
                    1,
                    49,
                    50,
                    6,
                    51,
                    10,
                    52,
                    53
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                376,
                2047,
                374,
                2045,
                353,
                354,
                12665,
                12746,
                21445,
                383,
                13450,
                16594,
                340,
                385,
                8057,
                1374,
                17718,
                360,
                369,
                17145,
                17555,
                3597,
                6608,
                8392,
                18087,
                3176,
                341,
                2041,
                347,
                343,
                15671,
                2875,
                350,
                22136,
                22445,
                21960,
                24000,
                1124,
                2874,
                2876,
                19350,
                6839,
                16458,
                13015,
                13662,
                20925,
                12808,
                21018,
                363,
                6628,
                10681,
                381,
                9935,
                379
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: \"one-way functions are essential for complexity based cryptography,\" \"limits on the provable consequences of one-waystoc 1989, 44-61. [56] r. impagliazzo, and m. yung, \"direct minimum-knowledge computation,\" crypto 1987, 40-51. [57] j. kilian, \"founding cryptography on oblivious transfer,\" acm stoc 1988, 20-31. [58] e. kushilevitz, \"privacy and communication complexity,\" ieee focs 1989, 416-421. [59] l. lamport, r. shostak, and m. pease, \"the byzantine generals problem,\" acm trans. on program symmetrically-biased coin,\" ieee focs 1984, 11-21. [61] s. micali and p. rogaway, \"secure computation,\" crypto 1991. [62] m. naor, \"\"bit commitment using pseudo-randomness,\" crypto 1989, 128-136. [63] m. naor, r. ostrovsky, r. venkatesan, and m. yung, \"perfect zero-knowledge arguments for np can tocol design,\" ieee focs 1983, pp. 23-30. [73] a. yao, \"some complexity questions related to distributive computing,\" acm stoc 1979, 209-213. [74] a. yao, \"protocols for secure computations,\" ieee focs 1982, 160-164. [75] a. yao, \"how to generate and exchange secrets,\" ieee focs 1986, 162-167. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_381",
        "graph": {
            "node_idx": 381,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    2,
                    12,
                    13,
                    4,
                    14,
                    15,
                    5,
                    1,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    0,
                    22,
                    23,
                    10,
                    24,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    9,
                    10,
                    10
                ]
            ],
            "node_list": [
                381,
                16458,
                1756,
                6628,
                4378,
                7302,
                19769,
                377,
                10514,
                12808,
                12665,
                8595,
                17514,
                363,
                18752,
                10040,
                12804,
                3597,
                18464,
                10181,
                374,
                10103,
                14140,
                19398,
                20925
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: perfect zero-knowledge arguments for np can be based on general complexity assumptions (extended abstract)zero-knowledge arguments\" is a fundamental cryptographic primitive which allows one polynomial-time player to convince another polynomial-time player of the validity of an np statement, without revealing any additional information in the information-theoretic sense. despite their practical and theoretical importance, it was only known how to implement zero-knowledge arguments based on specific algebraic assumptions; basing them on a general complexity assumption was open since their introduction in 1986 [bcc, bc, ch]. in this paper, we finally show a general construction, which can be based on any one-way permutation. we stress that our scheme is efficient: both players can execute only polynomial-time programs during the protocol. moreover, the security achieved is on-line: in order to cheat and validate a false theorem, the prover must break a cryptographic assumption fl ibm research division, almaden research center, san jose, ca \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_401",
        "graph": {
            "node_idx": 401,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    3,
                    4,
                    0,
                    6,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    5,
                    5
                ]
            ],
            "node_list": [
                401,
                13178,
                8789,
                21242,
                21244,
                6478,
                8788
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: interfaces to path 3.0: design, implementation and usageseveral new interfaces have recently been developed requiring path to solve a mixed complementarity problem. to overcome the necessity of maintaining a different version of path for each interface, the code was reorganized using object-oriented design techniques. at the same time, robustness issues were considered and enhancements made to the algorithm. in this paper, we document the external interfaces to the path code and describe some of the new utilities using path. we then discuss the enhancements made and compare the results obtained from \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_412",
        "graph": {
            "node_idx": 412,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    10,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    25,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    35,
                    5,
                    40,
                    41,
                    42,
                    43,
                    44,
                    7,
                    45,
                    46,
                    30,
                    47,
                    48,
                    49,
                    50,
                    8,
                    51,
                    52,
                    53,
                    54,
                    55
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                412,
                1082,
                11830,
                10026,
                1198,
                14691,
                8742,
                8608,
                12173,
                14369,
                15327,
                417,
                3295,
                16890,
                24422,
                11632,
                12607,
                24610,
                3411,
                14687,
                22519,
                14569,
                8918,
                19597,
                12642,
                13041,
                21172,
                14409,
                14410,
                22947,
                15192,
                1295,
                5182,
                21781,
                6090,
                22518,
                14693,
                15217,
                18141,
                8199,
                20917,
                12749,
                12970,
                18173,
                12641,
                12816,
                8107,
                10717,
                8184,
                20615,
                12172,
                21984,
                14394,
                14370,
                14457,
                23040
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cpu inheritance schedulingtraditional processor scheduling mechanisms in operating systems are fairly rigid, often supporting only one fixed scheduling policy, or, at most, a few scheduling classes whose implementations are closely tied together in the os kernel. this paper presents cpu inheritance scheduling, a novel processor scheduling framework in which arbitrary threads can act as schedulers for other threads. widely different scheduling policies can be implemented under the framework, and many different policies can coexist in a single system, providing much greater scheduling flexibility. modular, hierarchical control can be provided over the processor utilization of arbitrary administrative domains, such as processes, jobs, users, and groups, and the cpu resources consumed can be accounted for and attributed accurately. applications, as well as the os, can implement customized local scheduling policies; the framework ensures that all the different policies work together logically and predictably. as a side effect, the framework also cleanly addresses priority inversion by providing a generalized form of priority inheritance that automatically works within and among diverse scheduling policies. cpu inheritance scheduling extends naturally to multiprocessors, and supports processor management techniques such as processor affinity[29] and scheduler activations[3]. we show that this flexibility can be provided with acceptable overhead in typical environments, depending on factors such as context switch speed and frequency. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_416",
        "graph": {
            "node_idx": 416,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    2,
                    16,
                    17,
                    9,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    2,
                    29,
                    24,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    9,
                    2,
                    37,
                    38,
                    23,
                    39,
                    40,
                    9,
                    41
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7
                ]
            ],
            "node_list": [
                416,
                1082,
                11632,
                5183,
                333,
                8035,
                16,
                5180,
                24422,
                1198,
                412,
                24610,
                24858,
                16890,
                417,
                8742,
                22519,
                8301,
                6956,
                18141,
                18496,
                5181,
                1587,
                19578,
                19649,
                8741,
                4576,
                7418,
                5182,
                24353,
                24597,
                23863,
                10966,
                12183,
                26,
                25108,
                2937,
                5184,
                1090,
                5175,
                24683,
                21781
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: vino: an integrated platform for operating system and database research kernel mechanisms are reusable bythe standard operating system model has changed little since that time, and we believe that, at its core, it is the wrong model for dbms and other resource-intensive applications. the standard model is inflexible, uncooperative, and irregular in its treatment of resources. we describe the design of a new system, the vino kernel, which addresses the limitations of standard operating systems. it focuses on three key ideas: \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_424",
        "graph": {
            "node_idx": 424,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    3,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    19,
                    26,
                    27,
                    28,
                    6,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                424,
                1134,
                4000,
                421,
                9821,
                16892,
                15413,
                22494,
                14679,
                2911,
                813,
                288,
                1199,
                1132,
                10876,
                8042,
                15348,
                23066,
                4002,
                8092,
                4001,
                14775,
                4414,
                17469,
                10630,
                856,
                9711,
                19694,
                9710,
                18877,
                14680,
                2559,
                2909,
                2843,
                10060
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: compiling for distributed-memory systemsdistributed-memory systems are potentially scalable to a very large number of processors and promise to be powerful tools for solving large-scale scientific and engineering problems. however, these machines are currently difficult to program, since the user has to distribute the data across the processors and explicitly formulate the communication required by the program under the selected distribution. during the past years, language extensions of standard programming languages such as fortran were developed that allow a concise formulation of data distribution, and new compilation methods were designed and implemented that allow the programming of such machines at this relatively high level. in this paper, we describe the current state of the art in compiling procedural languages (in particular, fortran) for distributed-memory machines, analyze the limitations of these approaches, and outline future research. fl the work described in this paper was supported by the austrian research foundation (fwf) under the grant number p7576-tec and by the austrian ministry for science and research (bmwf) \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_430",
        "graph": {
            "node_idx": 430,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    0,
                    21,
                    22,
                    11,
                    5,
                    23,
                    13,
                    24,
                    6,
                    25,
                    26,
                    27
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    9,
                    10,
                    10
                ]
            ],
            "node_list": [
                430,
                2907,
                8716,
                17607,
                429,
                18911,
                8064,
                17825,
                23881,
                16236,
                7203,
                2904,
                10688,
                19503,
                9435,
                18233,
                746,
                7828,
                22884,
                24131,
                16488,
                8006,
                7854,
                698,
                6706,
                16234,
                13994,
                13993
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experiments with a new boosting algorithmin an earlier paper, we introduced a new boosting algorithm called adaboost which, theoretically, can be used to significantly reduce the error of any learning algorithm that consistently generates classifiers whose performance is a little better than random guessing. we also introduced the related notion of a pseudo-loss which is a method for forcing a learning algorithm of multi-label concepts to concentrate on the labels that are hardest to discriminate. in this paper, we describe experiments we carried out to assess how well adaboost with and without pseudo-loss, performs on real learning problems. we performed two sets of experiments. the first set compared boosting to breiman's bagging method when used to aggregate various classifiers (including decision trees and single attribute-value tests). we compared the performance of the two methods on a collection of machine-learning benchmarks. in the second set of experiments, we studied in more detail the performance of boosting using a nearest-neighbor classifier on an ocr problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_437",
        "graph": {
            "node_idx": 437,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    1,
                    10,
                    11,
                    12,
                    0,
                    6,
                    8,
                    13,
                    14,
                    15,
                    16,
                    1,
                    17,
                    18,
                    19,
                    5,
                    16,
                    20,
                    21,
                    22,
                    23,
                    15,
                    24,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6
                ]
            ],
            "node_list": [
                437,
                16460,
                8994,
                439,
                7712,
                435,
                10119,
                19616,
                19807,
                3254,
                9251,
                18513,
                6113,
                19939,
                7747,
                7746,
                434,
                18466,
                1027,
                3408,
                1689,
                1686,
                436,
                1687,
                432
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: combining exploratory projection pursuit and projection pursuit regression with application to neural networkswe present a novel classification and regression method that combines exploratory projection pursuit (unsupervised training) with projection pursuit regression (supervised training), to yield a new family of cost/complexity penalty terms. some improved generalization properties are demonstrated on real world problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_438",
        "graph": {
            "node_idx": 438,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    9,
                    11,
                    1,
                    14,
                    5,
                    15,
                    6,
                    16,
                    17,
                    18,
                    19,
                    20,
                    11,
                    21,
                    3,
                    9,
                    22,
                    23,
                    24,
                    25,
                    18,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                438,
                8994,
                9251,
                437,
                19105,
                7712,
                10119,
                11105,
                19821,
                19939,
                844,
                16460,
                3254,
                18513,
                439,
                435,
                19616,
                19807,
                7747,
                7746,
                434,
                18466,
                135,
                2640,
                840,
                10447,
                134
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: objective function formulation of the bcm theory of visual cortical plasticity: statistical connections, stability conditionsin this paper, we present an objective function formulation of the bcm theory of visual cortical plasticity that permits us to demonstrate the connection between the unsupervised bcm learning procedure and various statistical methods, in particular, that of projection pursuit. this formulation provides a general method for stability analysis of the fixed points of the theory and enables us to analyze the behavior and the evolution of the network under various visual rearing conditions. it also allows comparison with many existing unsupervised methods. this model has been shown successful in various applications such as phoneme and 3d object recognition. we thus have the striking and possibly highly significant result that a biological neuron is performing a sophisticated statistical procedure. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_445",
        "graph": {
            "node_idx": 445,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                445,
                24916
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: b on the efficiency of optimising shallow backtracking in compiled prologthe cost of backtracking has been identified as one of the bottlenecks in achieving peak performance in compiled prolog programs. much of the backtracking in prolog programs is shallow, i.e. is caused by unification failures in the head of a clause when there are more alternatives for the same procedure, and so special treatment of this form of backtracking has been proposed as a significant optimisation. this paper describes a modified wam which optimises shallow backtracking. four different implementation approaches are compared. a number of benchmark results are presented, measuring the relative tradeoffs between compilation time, code size, and run time. the results show that the speedup gained by this optimisation can be significant. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_451",
        "graph": {
            "node_idx": 451,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                451,
                24916
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: isrn sics/r-91/07-se variable shunting for the wamsics research report r91:07 issn 0282-3638 swedish institute of computer science box 1263, s164 28 kista, sweden \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_473",
        "graph": {
            "node_idx": 473,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    4,
                    5,
                    10,
                    10
                ]
            ],
            "node_list": [
                473,
                13698,
                6595,
                20531,
                1658,
                10217,
                20758,
                21750,
                22634,
                23124,
                11131,
                13657,
                10736,
                18076,
                19684,
                15416,
                24054,
                19973,
                11132
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: visibility preprocessing for interactive walkthroughsthe number of polygons comprising interesting architectural models is many more than can be rendered at interactive frame rates. however, due to occlusion by opaque surfaces (e.g., walls), only a small fraction of a typical model is visible from most viewpoints. we describe a method of visibility preprocessing that is efficient and effective for axis-aligned or axial architectural models. a model is subdivided into rectangular cells whose boundaries coincide with major opaque surfaces. non-opaque portals are identified on cell boundaries, and used to form an adjacency graph connecting the cells of the subdivision. next, the cell-to-cell visibility is computed for each cell of the subdivision, by linking pairs of cells between which unobstructed sightlines exist. during an interactive walkthrough phase, an observer with a known position and view cone moves through the model. at each frame, the cell containing the observer is identified, and the contents of potentially visible cells are retrieved from storage. the set of potentially visible cells is further reduced by culling it against the observer's view cone, producing the eye-to-cell visibility. the contents of the remaining visible cells are then sent to a graphics pipeline for hidden-surface removal and rendering. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_486",
        "graph": {
            "node_idx": 486,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    10,
                    13,
                    14,
                    8,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    0,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    11,
                    8,
                    35,
                    36,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                486,
                1716,
                5428,
                6244,
                16965,
                19945,
                24885,
                17122,
                5416,
                6967,
                1717,
                5417,
                16569,
                16825,
                17089,
                6968,
                19554,
                6527,
                5429,
                18881,
                20437,
                9828,
                13975,
                22035,
                14100,
                23872,
                17395,
                11111,
                17608,
                5722,
                18391,
                18974,
                19510,
                19518,
                6969,
                17719,
                6009
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: supporting combined human and machine planning: an interface for planning by analogical reasoningrealistic and complex planning situations require a mixed-initiative planning framework in which human and automated planners interact to mutually construct a desired plan. ideally, this joint cooperation has the potential of achieving better plans than either the human or the machine can create alone. human planners often take a case-based approach to planning, relying on their past experience and planning by retrieving and adapting past planning cases. planning by analogical reasoning in which generative and case-based planning are combined, as in prodigy/analogy, provides a suitable framework to study this mixed-initiative integration. however, having a human user engaged in this planning loop creates a variety of new research questions. the challenges we found creating a mixed-initiative planning system fall into three categories: planning paradigms differ in human and machine planning; visualization of the plan and planning process is a complex, but necessary task; and human users range across a spectrum of experience, both with respect to the planning domain and the underlying planning technology. this paper presents our approach to these three problems when designing an interface to incorporate a human into the process of planning by analogical reasoning with prodigy/analogy. the interface allows the user to follow both generative and case-based planning, it supports visualization of both plan and the planning rationale, and it addresses the variance in the experience of the user by allowing the user to control the presentation of information. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_487",
        "graph": {
            "node_idx": 487,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    6,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    4,
                    31,
                    32,
                    33,
                    34,
                    35,
                    7,
                    36,
                    37,
                    6,
                    1,
                    38,
                    23,
                    9,
                    8,
                    39,
                    40,
                    41,
                    42,
                    43,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                487,
                17384,
                488,
                5792,
                2946,
                16851,
                11522,
                13460,
                14791,
                498,
                8873,
                3080,
                3073,
                20890,
                16784,
                20891,
                24228,
                2818,
                24597,
                3529,
                6087,
                24550,
                236,
                3610,
                24719,
                458,
                16703,
                8767,
                7216,
                15676,
                4599,
                21023,
                8956,
                12126,
                13181,
                1936,
                22592,
                409,
                6196,
                15883,
                10825,
                18291,
                7318,
                20872
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reducing memory latency via non-blocking and prefetching cachestechnical report 92-06-03 department of computer science and engineering university of washington seattle, wa 98195 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_498",
        "graph": {
            "node_idx": 498,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    3,
                    20,
                    0,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    8,
                    24,
                    27,
                    28
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    8
                ]
            ],
            "node_list": [
                498,
                409,
                11522,
                17384,
                6196,
                3610,
                14791,
                15883,
                10825,
                1198,
                17960,
                494,
                16,
                22618,
                15118,
                22870,
                18377,
                23419,
                24228,
                1936,
                16803,
                12537,
                12627,
                14525,
                22592,
                10171,
                11373,
                4925,
                6482
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: effective cache prefetching on bus-based multiprocessorscompiler-directed cache prefetching has the potential to hide much of the high memory latency seen by current and future high-performance processors. however, prefetching is not without costs, particularly on a multiprocessor. prefetching can negatively affect bus utilization, overall cache miss rates, memory latencies and data sharing. we simulate the effects of a compiler-directed prefetching algorithm, running on a range of bus-based multiprocessors. we show that, despite a high memory latency, this architecture does not necessarily support prefetching well, in some cases actually causing performance degradations. we pinpoint several problems with prefetching on a shared memory architecture (additional conflict misses, no reduction in the data sharing traffic and associated latencies, a multiprocessor's greater sensitivity to memory utilization and the sensitivity of the cache hit rate to prefetch distance) and measure their effect on performance. we then solve those problems through architectural techniques and heuristics for prefetching that could be easily incorporated into a compiler: 1) victim caching, which eliminates most of the cache conflict misses caused by prefetching in a direct-mapped cache, 2) special prefetch algorithms for shared data, which significantly improve the ability of our basic prefetching algorithm to prefetch invalidation misses, and 3) compiler-based shared data restructuring, which eliminates many of the invalidation misses the basic prefetching algorithm doesn't predict. the combined effect of these improvements is to make prefetching effective over a much wider range of memory architectures. keywords: cache prefetching, bus-based multiprocessor, cache misses, prefetching strategies, parallel programs, false sharing, memory latency \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_501",
        "graph": {
            "node_idx": 501,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    5,
                    1,
                    17,
                    18,
                    19,
                    15,
                    20,
                    21,
                    17,
                    9,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    24,
                    7,
                    30,
                    10,
                    31,
                    17,
                    24,
                    23,
                    32,
                    10,
                    33,
                    34,
                    35,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    6,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                501,
                10058,
                500,
                751,
                6316,
                9826,
                10782,
                12479,
                11642,
                6995,
                3965,
                19040,
                1959,
                2188,
                3296,
                3038,
                7213,
                18652,
                7767,
                16381,
                2202,
                17709,
                6430,
                10781,
                988,
                24708,
                17924,
                8329,
                8330,
                18880,
                12414,
                17679,
                7986,
                2907,
                2204,
                19634,
                20813
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: bayesian graphical models for discrete dataz york's research was supported by a nsf graduate fellowship. the authors are grateful to julian besag, david bradshaw, jeff bradshaw, james carlsen, david draper, ivar heuch, robert kass, augustine kong, steffen lauritzen, adrian raftery, and james zidek for helpful comments and discussions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_505",
        "graph": {
            "node_idx": 505,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    5,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    2,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    7,
                    20,
                    33,
                    34,
                    35,
                    36,
                    37
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7
                ]
            ],
            "node_list": [
                505,
                12514,
                3163,
                5245,
                6706,
                1673,
                5945,
                8571,
                20783,
                16716,
                18518,
                20850,
                3167,
                20502,
                12037,
                12035,
                22877,
                23082,
                17127,
                17194,
                3152,
                9834,
                5781,
                17882,
                20081,
                17537,
                23193,
                2878,
                1674,
                1675,
                15522,
                23214,
                14420,
                2904,
                7982,
                18460,
                3307,
                18157
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: beyond independence: conditions for the optimality of the simple bayesian classifierthe simple bayesian classifier (sbc) is commonly thought to assume that attributes are independent given the class, but this is apparently contradicted by the surprisingly good performance it exhibits in many domains that contain clear attribute dependences. no explanation for this has been proposed so far. in this paper we show that the sbc does not in fact assume attribute independence, and can be optimal even when this assumption is violated by a wide margin. the key to this finding lies in the distinction between classification and probability estimation: correct classification can be achieved even when the probability estimates used contain large errors. we show that the previously-assumed region of optimality of the sbc is a second-order infinitesimal fraction of the actual one. this is followed by the derivation of several necessary and several sufficient conditions for the optimality of the sbc. for example, the sbc is optimal for learning arbitrary conjunctions and disjunctions, even though they violate the independence assumption. the paper also reports empirical evidence of the sbc's competitive performance in domains containing substantial degrees of attribute dependence. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_510",
        "graph": {
            "node_idx": 510,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    6,
                    29,
                    30,
                    31,
                    4,
                    30,
                    32,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    10
                ]
            ],
            "node_list": [
                510,
                5245,
                3168,
                17330,
                8311,
                15500,
                9429,
                20647,
                21384,
                17825,
                6396,
                17127,
                17194,
                1673,
                3152,
                9834,
                5781,
                17882,
                20081,
                10202,
                17273,
                7573,
                3167,
                3163,
                5945,
                4144,
                24782,
                19792,
                22877,
                10688,
                9435,
                23193,
                23216
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a study of cross-validation and bootstrap for accuracy estimation and model selectionwe review accuracy estimation methods and compare the two most common methods: cross-validation and bootstrap. recent experimental results on artificial data and theoretical results in restricted settings have shown that for selecting a good classifier from a set of classifiers (model selection), ten-fold cross-validation may be better than the more expensive leave-one-out cross-validation. we report on a large-scale experiment|over half a million runs of c4.5 and a naive-bayes algorithm|to estimate the effects of different parameters on these algorithms on real-world datasets. for cross-validation, we vary the number of folds and whether the folds are stratified or not; for bootstrap, we vary the number of bootstrap samples. our results indicate that for real-word datasets similar to ours, the best method to use for model selection is ten-fold stratified cross validation, even if computation power allows using more folds. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_518",
        "graph": {
            "node_idx": 518,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                518,
                13254,
                18593,
                21293,
                13253,
                22975
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improving responsiveness for wide-area data accessin a wide-area environment, the time required to obtain data from remote sources can vary unpredictably due to network congestion, link failure or other problems. traditional techniques for query optimization and query execution do not cope well with such unpredictability. the static nature of those techniques prevents them from adapting to remote access delays that arise at runtime. in this paper we describe two separate, but related techniques aimed at tackling this problem. the first technique, called query scrambling, hides relatively short, intermittent delays by dynamically adjusting query execution plans on-the-fly. the second technique addresses the longer-term unavailability of data sources by allowing the return of partial query answers when some of the data needed to fully answer a query are missing. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_530",
        "graph": {
            "node_idx": 530,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    5,
                    2,
                    12,
                    1,
                    5,
                    14,
                    12,
                    13,
                    5,
                    2,
                    15,
                    16,
                    17,
                    18,
                    19,
                    7,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    4,
                    6,
                    6,
                    6,
                    6,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                530,
                2251,
                13655,
                24862,
                1116,
                21681,
                13656,
                19393,
                18603,
                8547,
                4731,
                3661,
                21660,
                4076,
                1905,
                761,
                19431,
                22618,
                17714,
                533,
                2126,
                4793,
                531,
                5962,
                20032,
                22198,
                14378
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: \"a methodology for implementing highly concurrent data structures,\" proceedings 197-206. \"axioms for concurrent objects,\" \"on2] a. gottlieb, b.d. lubachevsky, and l. rudolph, \"basic techniques for the efficient coordination of very large numbers of cooperating sequential processors,\" acm transactions on programming languages and systems, (april,1983), vol. 5, no. 2, pp. 164-189. [5] m.p. herlihy, \"impossibility and universality results for wait-free synchronization,\" seventh acm sigact-sigops symposium on principles of distributed computing, (august,1988), pp. 276-290. [9] s. prakash, \"non-blocking algorithms for concurrent data structures\" university of florida, department of computer science masters thesis, 1991. available at anonymouf ftp site cis.ufl.edu:cis/tech-reports/tr91/tr91-002.ps.z \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_576",
        "graph": {
            "node_idx": 576,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    17,
                    31,
                    3,
                    32,
                    21,
                    28
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                576,
                338,
                1094,
                12179,
                6821,
                14369,
                1198,
                3101,
                8741,
                9167,
                8035,
                12607,
                13041,
                12183,
                10966,
                23864,
                18584,
                17672,
                20374,
                14761,
                5175,
                14370,
                12455,
                7193,
                15603,
                1090,
                20614,
                22339,
                14457,
                23048,
                9871,
                18749,
                14394
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: safe operating system specialization: the rpc case studyadaptive operating systems allow one to optimize system functionalities with respect to common situations. we present an experiment aimed at optimizing the rpc implementation in chorus by manual specialization. we show that there exist numerous opportunities for specialization and that they can lead to great improvements. then, we discuss how this optimization can be reproduced automatically with a specializer for c programs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_614",
        "graph": {
            "node_idx": 614,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    1,
                    14,
                    15,
                    16,
                    17
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    4,
                    5,
                    5,
                    8
                ]
            ],
            "node_list": [
                614,
                3932,
                18655,
                17837,
                4126,
                10978,
                24426,
                24132,
                14074,
                24783,
                16847,
                6212,
                3931,
                9960,
                16890,
                19796,
                21276,
                22011
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: serverless network file systemscopyright 1995 by the association for computing machinery, inc. permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or direct commercial advantage and that copies show this notice on the first page or initial screen of a display along with the full citation. copyrights for components of this work owned by others than acm must be honored. abstracting with credit is permitted. to copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works, requires prior specific permission and/or a fee. permissions may be requested from publications dept., acm inc., 1515 broadway, new york, ny 10036 usa, fax +1 (212) 869-0481, or &lt;permissions@acm.org&gt;. abstract in this paper, we propose a new paradigm for network file system design, serverless network file systems. while traditional network file systems rely on a central server machine, a serverless system utilizes workstations cooperating as peers to provide all file system services. any machine in the system can store, cache, or control any block of data. our approach uses this location independence, in combination with fast local area networks, to provide better performance and scalability than traditional file systems. further, because any machine in the system can assume the responsibilities of a failed component, our serverless design also provides high availability via redundant data storage. to demonstrate our approach, we have implemented a prototype serverless network file system called xfs. preliminary performance measurements suggest that our architecture achieves its goal of scalability. for instance, in a 32-node xfs system with 32 active clients, each client receives nearly as much read or write throughput as it would see if it were the only active client. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_621",
        "graph": {
            "node_idx": 621,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    4,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    10,
                    57,
                    58
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                621,
                4088,
                990,
                5528,
                3061,
                13825,
                8812,
                24486,
                24726,
                4060,
                1404,
                17108,
                8653,
                24431,
                409,
                2661,
                495,
                19917,
                20630,
                3102,
                11459,
                8668,
                18991,
                3780,
                6674,
                16776,
                7081,
                994,
                2911,
                13683,
                22420,
                12603,
                16719,
                14575,
                14074,
                3077,
                22166,
                18655,
                22557,
                23117,
                24882,
                13835,
                6983,
                4061,
                4418,
                19491,
                7999,
                21836,
                12266,
                14000,
                12248,
                22402,
                23997,
                4502,
                11515,
                17837,
                20090,
                9345,
                23903
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the sprite network operating systemsprite is a new operating system for networked uniprocessor and multiprocessor workstations with large physical memories. it implements a set of kernel calls much like those of 4.3 bsd unix, with extensions to allow processes on the same workstation to share memory and to allow processes to migrate between workstations. the implementation of the sprite kernel contains several interesting features, including a remote procedure call facility for communication between kernels, the use of prefix tables to implement a single file name space and to provide flexibility in administering the network file system, and large variable-size file caches on both client and server machines, which provide high performance even for diskless workstations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_624",
        "graph": {
            "node_idx": 624,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    3,
                    9,
                    6,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    4,
                    7,
                    19,
                    20,
                    21,
                    4,
                    22,
                    4,
                    4,
                    7,
                    8,
                    10,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                624,
                24412,
                24683,
                12168,
                3528,
                12602,
                12607,
                623,
                12604,
                2561,
                24045,
                20609,
                14289,
                12612,
                1639,
                14753,
                15118,
                22870,
                12606,
                3219,
                8529,
                21577,
                24132,
                2846,
                3080,
                24397,
                5109,
                4020,
                20615,
                2845,
                14575,
                14626,
                2818
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hierarchical clustering: a structure for scalable multiprocessor operating system designtechnical report csri-268 march, 1992 the computer systems research institute (csri) is an interdisciplinary group formed to conduct research and development relevant to computer systems and their application. it is an institute within the faculty of applied science and engineering, and the faculty of arts and science, at the university of toronto, and is supported in part by the natural sciences and engineering research council of canada. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_655",
        "graph": {
            "node_idx": 655,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    8,
                    11,
                    2,
                    4,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    12,
                    1,
                    19,
                    20,
                    21,
                    4,
                    14,
                    3,
                    8,
                    22,
                    23,
                    24,
                    25,
                    26,
                    4,
                    7,
                    27,
                    28,
                    29,
                    30,
                    31,
                    3,
                    23,
                    32,
                    33,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                655,
                2974,
                2932,
                2878,
                6318,
                4040,
                9196,
                18071,
                1674,
                21626,
                23508,
                6645,
                4940,
                2993,
                12848,
                19106,
                17155,
                16798,
                12847,
                5312,
                19171,
                2935,
                1673,
                24399,
                1675,
                15522,
                14420,
                12849,
                4426,
                2906,
                4638,
                20479,
                16477,
                23216
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: supervised learning from incomplete data via an em approachreal-world learning tasks may involve high-dimensional data sets with arbitrary patterns of missing data. in this paper we present a framework based on maximum likelihood density estimation for learning from such data sets. we use mixture models for the density estimates and make two distinct appeals to the expectation-maximization (em) principle (dempster et al., 1977) in deriving a learning algorithm|em is used both for the estimation of mixture components and for coping with missing data. the resulting algorithm is applicable to a wide range of supervised as well as unsupervised learning problems. results from a classification benchmark|the iris data set|are presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_668",
        "graph": {
            "node_idx": 668,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    5,
                    1,
                    6,
                    2,
                    3,
                    7,
                    8,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                668,
                331,
                24776,
                24802,
                7398,
                24430,
                18401,
                8973,
                14557,
                8972
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: wait-free hierarchies are not robusta wait-free hierarchy [her91, jay93] classifies object types on the basis of their strength in supporting wait-free implementations of other types. (in the context of the present paper, an implementation may use any number of objects of the given types, as well as read/write registers.) such a hierarchy is robust if it is impossible to implement objects of types that it classifies as \"strong\" by combining objects of types that it classifies as \"weak\". we prove that, if nondeterministic types are allowed, the only wait-free hierarchy that is robust is the trivial one, which lumps all types into a single level. in particular, the consensus hierarchy (the most closely studied wait-free hierarchy) is not robust. our result implies that, in general, it is not possible to determine the power of a concurrent system that supports a given set of primitive object types by reasoning about the power of each primitive type in isolation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_672",
        "graph": {
            "node_idx": 672,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    1,
                    11,
                    12,
                    13,
                    14,
                    5,
                    15,
                    16,
                    17,
                    18,
                    19,
                    6,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    21,
                    4,
                    32,
                    33,
                    34,
                    35,
                    6,
                    1,
                    36,
                    1,
                    37,
                    38,
                    39,
                    31,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                672,
                945,
                7579,
                8463,
                1132,
                1134,
                943,
                540,
                21371,
                1488,
                567,
                25073,
                11015,
                12682,
                10824,
                458,
                273,
                12747,
                13678,
                12871,
                9238,
                1199,
                24167,
                5841,
                19694,
                815,
                3489,
                3985,
                14144,
                14585,
                813,
                288,
                10876,
                8042,
                15348,
                23066,
                15037,
                10395,
                19608,
                1917,
                23243,
                24189,
                12673,
                6088,
                812,
                3665,
                24441,
                5679,
                24662,
                810,
                16809,
                553,
                19887,
                23953,
                24178,
                24412,
                9319,
                18328,
                24558,
                16465,
                24683,
                6479,
                240,
                1918
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mechanisms for cooperative shared memorythis paper explores the complexity of implementing directory protocols by examining their mechanisms| primitive operations on directories, caches, and network interfaces. we compare the following protocols: dir 1 b, dir 4 b, dir 4 nb, dir n nb [2], dir 1 sw [9] and an improved version of dir 1 sw (dir 1 sw + ). the comparison shows that the mechanisms and mechanism sequencing of dir 1 sw and dir 1 sw + are simpler than those for other protocols. we also compare protocol performance by running eight benchmarks on 32 processor systems. simulations show that dir 1 sw + 's performance is comparable to more complex directory protocols. the significant disparity in hardware complexity and the small difference in performance argue that dir 1 sw + may be a more effective use of resources. the small performance difference is attributable to two factors: the low degree of sharing in the benchmarks and check-in/check-out (cico) directives [9]. fl this work is supported in part by nsf pyi awards ccr-9157366 and mips-8957278, nsf grant ccr-9101035, univ. of wisconsin graduate school grant, wisconsin alumni research foundation fellowship and donations from a.t.&t. bell laboratories and digital equipment corporation. our thinking machines cm-5 was purchased through nsf institutional infrastructure grant no. cda-9024618 with matching funding from the univ. of wisconsin graduate school. c fl 1993 ieee. abstracting is permitted with credit to the source. libraries are permitted to photocopy beyond the limit of us copytight law, for private use of patrons, those articles in this volume that carry a code at the bottom of the first page, provided that the per-copy fee indicated in the code is paid through the copyright clearance center, 27 congress street, salem, ma 01970. for other copying, reprint, or republication permission, write to ieee copyrights manager, ieee service center, 445 hoes lane, po box 1331, piscataway, nj 088551. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_688",
        "graph": {
            "node_idx": 688,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    9,
                    10,
                    11,
                    12,
                    13,
                    9,
                    14,
                    15,
                    16,
                    17,
                    18,
                    6,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    0,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    8,
                    9
                ]
            ],
            "node_list": [
                688,
                15257,
                24463,
                18497,
                3240,
                8672,
                2146,
                11546,
                7535,
                15256,
                16737,
                19729,
                22933,
                22941,
                18202,
                13043,
                2148,
                2813,
                4053,
                10340,
                19250,
                19814,
                15539,
                15200,
                22945,
                4972,
                16073,
                23928
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: rcbr: a simple and ecient service for multiple time-scale tracvariable bit rate compressed video trac is expected to be a signitcant component of the trac mix in integrated services networks. this trac is hard to manage because it has strict delay and loss requirements while simultaneously exhibiting burstiness at multiple time-scales. we show that burstiness over long time-scales, in conjunction with resource reservation using one-shot trac descriptors, can substantially degrade the loss rate, end-to-end delay and statistical multiplexing gain of a connection. we use large-deviation theory to model the performance of multiple time-scale trac and to motivate the design of renegotiated constant bit rate (rcbr) service. sources using rcbr service are presented with an abstraction of a txed-size buer which is drained at a constant rate. they may renegotiate the drain rate to match their workload. because all trac entering the network is cbr, rcbr requires minimal buering and scheduling support in switches. we show that the service is suitable for both stored and online video sources. an rcbr source must decide when to renegotiate its service rate, and what the new service rate should be. we present a) an algorithm to compute the optimal renegotiation schedule for stored (o-line) trac, and b) a heuristic to approximate the optimal schedule for online trac. we also discuss measurement-based admission control for rcbr trac. simulation experiments show that rcbr is able to extract almost all of the statistical multiplexing gain available by exploiting slow time-scale variations in trac. moreover, simple admission control schemes are sucient to keep the renegotiation failure probability below a small threshold, while still oering high link utilization. thus, we believe that rcbr is a simple, practical, and eective service for carrying \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_726",
        "graph": {
            "node_idx": 726,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                726,
                16476,
                17045
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cooperative case-based reasoningwe are investigating possible modes of cooperation among homogeneous agents with learning capabilities. in this paper we will be focused on agents that learn and solve problems using case-based reasoning (cbr), and we will present two modes of cooperation among them: distributed case-based reasoning (distcbr) and collective case-based reasoning (colcbr). we illustrate these modes with an application where different cbr agents able to recommend chromatography techniques for protein purification cooperate. the approach taken is to extend noos, the representation language being used by the cbr agents. noos is knowledge modeling framework designed to integrate learning methods and based on the task/method decomposition principle. the extension we present, plural noos, allows communication and cooperation among agents implemented in noos by means of three basic constructs: alien references, foreign method evaluation, and mobile methods. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_755",
        "graph": {
            "node_idx": 755,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    9,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    3,
                    21,
                    22,
                    23,
                    24,
                    25,
                    11,
                    26,
                    27,
                    2,
                    28,
                    29,
                    1,
                    18,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    7,
                    38,
                    39,
                    40
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    10
                ]
            ],
            "node_list": [
                755,
                1556,
                17786,
                200,
                5434,
                14023,
                16188,
                6445,
                10569,
                17302,
                9452,
                204,
                4280,
                8269,
                1624,
                17739,
                23255,
                56,
                24704,
                21092,
                21716,
                14588,
                24768,
                199,
                15499,
                212,
                24139,
                1881,
                17992,
                8980,
                5432,
                1432,
                21950,
                21952,
                23848,
                6864,
                1128,
                15567,
                3465,
                9746,
                18654
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using prototypical objects to implement shared behavior in object oriented systemsa traditional philosophical controversy between representing general concepts as abstract sets or classes and representing concepts as concrete prototypes is reflected in a controversy between two mechanisms for sharing behavior between objects in object oriented programming languages. inheritance splits the object world into classes, which encode behavior shared among a group of instances, which represent individual members of these sets. the class/instance distinction is not needed if the alternative of using prototypes is adopted. a prototype represents the default behavior for a concept, and new objects can reuse part of the knowledge stored in the prototype by saying how the new object differs from the prototype. the prototype approach seems to hold some advantages for representing default knowledge, and incrementally and dynamically modifying concepts. delegation is the mechanism for implementing this in object oriented languages. after checking its idiosyncratic behavior, an object can forward a message to prototypes to invoke more general knowledge. because class objects must be created before their instances can be used, and behavior can only be associated with classes, inheritance fixes the communication patterns between objects at instance creation time. because any object can be used as a prototype, and any messages can be forwarded at any time, delegation is the more flexible and general of the two techniques. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_769",
        "graph": {
            "node_idx": 769,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    1,
                    4,
                    17,
                    18,
                    9,
                    19,
                    20,
                    3,
                    21,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    10,
                    10
                ]
            ],
            "node_list": [
                769,
                4400,
                18174,
                21421,
                3411,
                17211,
                4965,
                18251,
                13412,
                22949,
                5300,
                2541,
                7418,
                5180,
                5299,
                14883,
                12213,
                14642,
                14641,
                22950,
                22951,
                17138,
                5297
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: orca: a language for parallel programming of distributed systemsorca is a language for implementing parallel applications on loosely coupled distributed systems. unlike most languages for distributed programming, it allows processes on different machines to share data. such data are encapsulated in data-objects, which are instances of user-defined abstract data types. the implementation of orca takes care of the physical distribution of objects among the local memories of the processors. in particular, an implementation may replicate and/or migrate objects in order to decrease access times to objects and increase parallelism. this paper gives a detailed description of the orca language design and motivates the design choices. orca is intended for applications programmers rather than systems programmers. this is reflected in its design goals to provide a simple, easy to use language that is type-secure and provides clean semantics. the paper discusses three example parallel applications in orca, one of which is described in detail. it also describes one of the existing implementations, which is based on reliable broadcasting. performance measurements of this system are given for three parallel applications. the measurements show that significant speedups can be obtained for all three applications. finally, the paper compares orca with several related languages and systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_775",
        "graph": {
            "node_idx": 775,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    4,
                    22,
                    23,
                    24,
                    25,
                    8,
                    26,
                    27,
                    28,
                    29,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    6,
                    8,
                    8,
                    8,
                    9
                ]
            ],
            "node_list": [
                775,
                233,
                5386,
                9552,
                7196,
                1631,
                11632,
                23612,
                8547,
                10966,
                23831,
                10170,
                17969,
                5573,
                1116,
                17960,
                3528,
                13337,
                22238,
                9593,
                9594,
                10901,
                10566,
                825,
                492,
                17226,
                8301,
                761,
                19431,
                22618
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the duality of memory and communication in the implementation of a multiprocessor operating systemmach is a multiprocessor operating system being implemented at carnegie-mellon university. an important component of the mach design is the use of memory objects which can be managed either by the kernel or by user programs through a message interface. this feature allows applications such as transaction management systems to participate in decisions regarding secondary storage management and page replacement. this paper explores the goals, design and implementation of mach and its external memory management facility. the relationship between memory and communication in mach is examined as it relates to overall performance, applicability of mach to new multiprocessor architectures, and the structure of application programs. permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the acm copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the association of computing machinery. to copy otherwise, or to republish, requires a fee and/or specific permission. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_777",
        "graph": {
            "node_idx": 777,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    4,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    3,
                    3
                ]
            ],
            "node_list": [
                777,
                7031,
                18508,
                9380,
                855
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: exploiting commuting operations in parallelizing serial programstwo operations commute if the result of their execution is independent of the order in which they execute. commuting operations can be executed concurrently provided they execute atomically on the objects they access. statically recognizing commuting operations is of great interest because they increase the amount of concurrency a compiler can exploit. in this document we introduce commutativity analysis anew technique for automatically parallelizing serial programs. we then conduct a feasibility study of existing scientific applications as to the existence and exploitability of commuting operations. we study the commuting operations present in one such application the barnes-hut hierarchical n-body algorithm. we then parallelize this application using knowledge of commuting operations and present performance results of the parallel code for a shared-memory multiprocessor. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_782",
        "graph": {
            "node_idx": 782,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    7,
                    11,
                    12,
                    13,
                    14,
                    10,
                    15,
                    16,
                    17,
                    18,
                    19,
                    17,
                    18,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                782,
                784,
                18779,
                786,
                6642,
                13936,
                9835,
                10061,
                15641,
                15642,
                23749,
                12978,
                12977,
                15190,
                23746,
                17519,
                6643,
                8299,
                22417,
                8296
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: characterization of mbone session dynamics: developing and applying a measurement toolmuch of our current understanding of the operational aspects and the network requirements of multicast communication derives from the mbone. as an experimental network that overlays the internet, the mbone has served as the testbed for multicast protocols. this work has led to the development of audio and video conferencing tools that have been used extensively recently. this paper describes our efforts in developing and using a measurement tool, called mlisten, for characterizing the dynamic behavior in mbone sessions. such a characterization will be of great benefit in understanding how any future networking infrastructure with multicast and real-time capabilities will be used. we discuss the challenges in monitoring mbone session participation and report on a methodology for pre-processing observed data to make it better reflect the true behavior of members in an mbone session. we also report on the results of using mlisten to determine temporal, geographical and resource usage characteristics of several recent mbone sessions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_785",
        "graph": {
            "node_idx": 785,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    3,
                    13,
                    6,
                    0,
                    14,
                    15,
                    16,
                    17,
                    18,
                    17,
                    19,
                    20,
                    21,
                    22,
                    23,
                    6,
                    7,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    10,
                    10
                ]
            ],
            "node_list": [
                785,
                22006,
                15190,
                6561,
                14102,
                12499,
                12977,
                784,
                23554,
                21871,
                12979,
                22935,
                8297,
                8298,
                8299,
                13973,
                22011,
                13883,
                14077,
                7699,
                15763,
                23461,
                2014,
                12978,
                9835,
                10061,
                15641,
                15642,
                23749,
                12646,
                12976
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: protocol independent multicast-sparse mode (pim-sm): motivation and architecturethis document is an internet draft. internet drafts are working documents of the internet engineering task force (ietf), its areas, and its working groups. (note that other groups may also distribute working documents as internet drafts). internet drafts are draft documents valid for a maximum of six months. internet drafts may be updated, replaced, or obsoleted by other documents at any time. it is not appropriate to use internet drafts as reference material or to cite them other than as a \"working draft\" or \"work in progress.\" \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_799",
        "graph": {
            "node_idx": 799,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                799,
                19520,
                16061,
                23730
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: characterizing observability and controllability of software componentstechnical report osu-cisrc-9/95-tr37 september 1995 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_805",
        "graph": {
            "node_idx": 805,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    6,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    2,
                    5,
                    8,
                    6,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    3,
                    41,
                    12,
                    42,
                    2,
                    43,
                    7,
                    44,
                    45,
                    29,
                    46,
                    9,
                    47,
                    48,
                    46,
                    25,
                    49,
                    9,
                    50,
                    51,
                    6,
                    52,
                    53,
                    54,
                    46,
                    11,
                    55
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                805,
                3898,
                3193,
                4354,
                804,
                1249,
                525,
                1856,
                526,
                528,
                16851,
                17758,
                1388,
                1389,
                1387,
                23570,
                3658,
                16728,
                3194,
                18203,
                19600,
                20021,
                6222,
                3196,
                22671,
                7489,
                11071,
                14301,
                1054,
                22538,
                23891,
                24152,
                2845,
                2628,
                545,
                802,
                1836,
                989,
                1638,
                541,
                2574,
                16529,
                24539,
                24793,
                14499,
                24275,
                9323,
                1868,
                18630,
                14415,
                527,
                524,
                14576,
                16204,
                24004,
                22220
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: lazy code motionwe present a bit-vector algorithm for the optimal and economical placement of computations within flow graphs, which is as efficient as standard unidirectional analyses. the point of our algorithm is the decomposition of the bi-directional structure of the known placement algorithms into a sequence of a backward and a forward analysis, which directly implies the efficiency result. moreover, the new compositional structure opens the algorithm for modification: two further uni-directional analysis components exclude any unnecessary code motion. this laziness of our algorithm minimizes the register pressure, which has drastic effects on the run-time be-haviour of the optimized programs in practice, where an economical use of registers is essential. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_813",
        "graph": {
            "node_idx": 813,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    3,
                    20,
                    21,
                    22,
                    21,
                    23,
                    24,
                    25,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    6
                ]
            ],
            "node_list": [
                813,
                1297,
                1132,
                8042,
                13412,
                21421,
                15729,
                1305,
                17705,
                8668,
                4376,
                19604,
                14541,
                24301,
                14585,
                19694,
                7142,
                6482,
                18128,
                4447,
                3985,
                9379,
                2542,
                4826,
                10945,
                22441
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: lcm: memory system support for parallel language implementationhigher-level parallel programming languages can be difficult to implement efficiently on parallel machines. this paper shows how a flexible, compiler-controlled memory system can help achieve good performance for language constructs that previously appeared too costly to be practical. our compiler-controlled memory system is called loosely coherent memory (lcm). it is an example of a larger class of reconcilable shared memory (rsm) systems, which generalize the replication and merge policies of cache-coherent shared-memory. rsm protocols differ in the action taken by a processor in response to a request for a location and the way in which a processor reconciles multiple outstanding copies of a location. lcm memory becomes temporarily inconsistent to implement the semantics of c** parallel functions efficiently. rsm provides a compiler with control over memory-system policies, which it can use to implement a language's semantics, improve performance, or detect errors. we illustrate the first two points with lcm and our compiler for the data-parallel language c**. fl this work is supported in part by nsf pyi/nyi awards ccr-9157366 and ccr-9357779, nsf grants ccr-9101035 and mip-9225097, doe grant de-fg02-93er25176, and donations from digital equipment corporation, thinking machines corporation, and xerox corporation. our thinking machines cm-5 was purchased through nsf institutional infrastructure grant no. cda-9024618 with matching funding from the univ. of wisconsin graduate school. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_818",
        "graph": {
            "node_idx": 818,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    8,
                    9,
                    2,
                    10,
                    11,
                    12,
                    13,
                    14,
                    13,
                    15,
                    16,
                    17,
                    18,
                    19,
                    12,
                    20,
                    9,
                    21,
                    22,
                    23,
                    24,
                    20,
                    8,
                    20,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8
                ]
            ],
            "node_list": [
                818,
                9241,
                3304,
                3525,
                3522,
                19074,
                6076,
                11870,
                11869,
                14151,
                16749,
                2829,
                20365,
                10413,
                5428,
                10668,
                10414,
                19065,
                19322,
                7184,
                2826,
                24878,
                22035,
                14100,
                14516
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning explanation-based search control rules for partial order planningthis paper presents snlp+ebl, the first implementation of explanation based learning techniques for a partial order planner. we describe the basic learning framework of snlp+ebl, including regression, explanation propagation and rule generation. we then concentrate on snlp+ebl's ability to learn from failures and present a novel approach that uses stronger domain and planner specific consistency checks to detect, explain and learn from the failures of plans at depth limits. we will end with an empirical evaluation of the efficacy of this approach in improving planning performance. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_820",
        "graph": {
            "node_idx": 820,
            "edge_index": [
                [
                    0,
                    1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                820,
                821,
                3813,
                14574,
                6886,
                3814,
                12612,
                1639,
                15181
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: locality of reference in lu decomposition with partial pivotingthis paper presents a new partitioned algorithm for lu decomposition with partial pivoting. the new algorithm, called the recursively-partitioned algorithm, is based on a recursive partitioning of the matrix. the paper analyzes the locality of reference in the new algorithm and the locality of reference in a known and widely used partitioned algorithm for lu decomposition called the right-looking algorithm. the analysis reveals that the new algorithm performs a factor of fi( m=n) fewer i/o operations (or cache misses) than the right-looking algorithm, where n is the order of the matrix and m is the size of primary memory. the analysis also determines the optimal block size for the right-looking algorithm. experimental comparisons between the new algorithm and the right-looking algorithm show that an implementation of the new algorithm outperforms a similarly coded right-looking algorithm on 6 different risc architectures, that the new algorithm performs fewer cache misses than any other algorithm tested, and that it benefits more from strassen's matrix-multiplication algorithm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_846",
        "graph": {
            "node_idx": 846,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    1,
                    4,
                    19,
                    20,
                    18,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    24,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    8
                ]
            ],
            "node_list": [
                846,
                135,
                844,
                16844,
                2640,
                3671,
                1027,
                7990,
                9706,
                10865,
                3856,
                13638,
                19379,
                12839,
                21401,
                13589,
                9083,
                19807,
                7747,
                840,
                10447,
                134,
                2639,
                1872,
                841,
                8167,
                22909,
                8994,
                5760,
                7713,
                436,
                12374,
                9777,
                9778,
                23975
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 3d object recognition: symmetry and virtual viewsmany 3d objects in the world around us are strongly constrained. for instance, not only cultural artifacts but also many natural objects are bilaterally symmetric. human faces are an important case for which bilateral symmetry holds, at least approximatively. can a priori information about generic constraints of this type help the task of 3d object recognition? it can be shown that theoretically such prior information reduces the amount of information needed to recognize a 3d object, since additional virtual views can be generated from given model views by the appropriate symmetry transformations. under special conditions, a single non-accidental \"model\" view is theoretically sufficient for recognition of novel views, if the object is bilaterally symmetric, whereas the theoretical minimum (under the same conditions) for a non-symmetric object is two views. in practice, we expect that the \"virtual\" views provided by the symmetry property will facilitate human recognition of novel views. psychophysical experiments confirm that humans are better in the recognition of symmetric objects. the hypothesis of symmetry-induced virtual views together with a network model that successfully accounts for human recognition of generic 3d objects leads to predictions that we have verified with psychophysical experiments. this paper, report describes research done within the center for biological and computational learning in the department of brain and cognitive sciences, and at the artificial intelligence laboratory. this research is sponsored by grants from the office of naval research under contracts n00014-91-j-1270 and n00014-92-j-1879; by a grant from the national science foundation under contract asc-9217041; and by a grant from the national institutes of health under contract nih 2-s07-rr07047. additional support is provided by the north atlantic treaty organization, atr audio and visual perception research laboratories, mitsubishi electric corporation, sumitomo metal industries, and siemens ag. support for the a.i. laboratory's artificial intelligence research is provided by onr contract n00014-91-j-4038. tomaso poggio is supported by the uncas and helen whitaker chair at the whitaker college, massachusetts institute of technology. thomas vetter holds a postdoctoral fellowship from the deutsche forschungsgemeinschaft (ve 135/1-1). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_858",
        "graph": {
            "node_idx": 858,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    7,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    6,
                    28,
                    3,
                    7,
                    29,
                    10,
                    30
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                858,
                16487,
                5459,
                11851,
                8582,
                5899,
                11718,
                11572,
                15574,
                15948,
                15956,
                17183,
                6733,
                17612,
                9287,
                16485,
                9192,
                10258,
                24116,
                17303,
                7983,
                7982,
                6706,
                7667,
                6812,
                3198,
                3630,
                20783,
                23992,
                9596,
                6164
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: chunking in soar: the anatomy of a general learn ing mechanism. machine learning, 1(1). learninggers university. also appears as tech. report ml- tr-7. minton, s. (1988). quantitative results concerning the utility of explanation-based learning. in proceedings of national conference on artificial intelli gence, pages 564-569. st. paul, mn. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_874",
        "graph": {
            "node_idx": 874,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    6,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    5,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    0,
                    21,
                    47
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                874,
                746,
                6706,
                4879,
                1977,
                3965,
                9258,
                17476,
                1604,
                4663,
                17607,
                8064,
                10202,
                24213,
                7827,
                6996,
                18090,
                19349,
                18182,
                10370,
                7854,
                17537,
                3163,
                23193,
                15322,
                17085,
                9184,
                6508,
                3389,
                24229,
                8345,
                697,
                5091,
                20076,
                5092,
                15700,
                13168,
                7986,
                2907,
                2204,
                19634,
                20813,
                6883,
                17753,
                17707,
                1593,
                12063,
                20616
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: boosting a weak learning algorithm by majority to be published in information and computationwe present an algorithm for improving the accuracy of algorithms for learning binary concepts. the improvement is achieved by combining a large number of hypotheses, each of which is generated by training the given learning algorithm on a different set of examples. our algorithm is based on ideas presented by schapire in his paper \"the strength of weak learnability\", and represents an improvement over his results. the analysis of our algorithm provides general upper bounds on the resources required for learning in valiant's polynomial pac learning framework, which are the best general upper bounds known today. we show that the number of hypotheses that are combined by our algorithm is the smallest number possible. other outcomes of our analysis are results regarding the representational power of threshold circuits, the relation between learnability and compression, and a method for parallelizing pac learning algorithms. we provide extensions of our algorithms to cases in which the concepts are not binary and to the case where the accuracy of the learning algorithm depends on the distribution of the instances. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_934",
        "graph": {
            "node_idx": 934,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    3,
                    11,
                    12,
                    13,
                    14,
                    0,
                    15,
                    3,
                    16,
                    17,
                    18,
                    19,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    9
                ]
            ],
            "node_list": [
                934,
                1790,
                24332,
                7094,
                1789,
                24605,
                24212,
                24714,
                22298,
                15535,
                23737,
                8458,
                2017,
                9734,
                3462,
                17863,
                18167,
                18491,
                3391,
                9938
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: and composition of software architectures main points are illustrated by means of familiar architectures forthe design of a large system typically involves the development of a hierarchy of different but related architectures. a criterion for the relative correctness of an architecture is presented, and conditions for architecture composition are defined which ensure that the correctness of a composite architecture follows from the correctness of its parts. both the criterion and the composition requirements reflect special considerations from the domain of software architecture. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_935",
        "graph": {
            "node_idx": 935,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    9,
                    14,
                    15,
                    7,
                    11,
                    16,
                    17,
                    18,
                    19,
                    6,
                    9,
                    20,
                    21,
                    22,
                    23,
                    11,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    9,
                    30
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                935,
                17186,
                3462,
                16682,
                9938,
                21950,
                2017,
                16689,
                8634,
                15662,
                2018,
                2016,
                2836,
                18948,
                22370,
                24212,
                16630,
                24605,
                24332,
                24714,
                16589,
                9210,
                23378,
                16762,
                14491,
                18491,
                6298,
                3391,
                22298,
                14493,
                22368
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: foundations for the study of software architecturethe purpose of this paper is to build the foundation for software architecture. we first develop an intuition for software architecture by appealing to several well-established architectural disciplines. on the basis of this intuition, we present a model of software architecture that consists of three components: elements, form, and rationale. elements are either processing, data, or connecting elements. form is defined in terms of the properties of, and the relationships among, the elements | that is, the constraints on the elements. the rationale provides the underlying basis for the architecture in terms of the system constraints, which most often derive from the system requirements. we discuss the components of the model in the context of both architectures and architectural styles and present an extended example to illustrate some important architecture and style considerations. we conclude by presenting some of the benefits of our approach to software architecture, summarizing our contributions, and relating our approach to other current work. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_953",
        "graph": {
            "node_idx": 953,
            "edge_index": [
                [
                    1,
                    1
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                953,
                14549
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiresolution b-spline radiositythis paper introduces a kind of new wavelet radiosity method called multiresolution b-spline radiosity, which uses b-splines of different scales to represent radiosity distribution functions. a set of techniques and algorithms, such as function extrapolation, adaptive quadrature, scale adjustment and octree, are proposed to implement it. this method sets up hierarchical structures on surfaces, keeps radiosity distribution continuous at element boundaries, does not need postprocessing, and does not prevent the use of any surface whose parameter domain is rectilinear. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_1000",
        "graph": {
            "node_idx": 1000,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                    7,
                    8,
                    9,
                    10,
                    8,
                    11,
                    12,
                    4,
                    13,
                    14,
                    15,
                    16,
                    17,
                    8,
                    18,
                    19,
                    3,
                    20,
                    21,
                    5,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    12,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    0,
                    35,
                    10,
                    5,
                    36,
                    7,
                    37,
                    27,
                    38,
                    29,
                    39,
                    40,
                    41,
                    14,
                    42,
                    43
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                1000,
                12058,
                17929,
                7825,
                5752,
                5835,
                221,
                1503,
                175,
                23869,
                1474,
                12059,
                7824,
                24366,
                1008,
                24611,
                19724,
                17286,
                721,
                19099,
                1001,
                12060,
                3473,
                10677,
                6348,
                4916,
                20743,
                21798,
                13819,
                21799,
                6678,
                12057,
                19091,
                13624,
                5865,
                920,
                20651,
                8657,
                1520,
                13843,
                3474,
                19929,
                5021,
                18179
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a new framework for sensor interpretation: planning to resolve sources of uncertaintysensor interpretation involves the determination of high-level explanations of sensor data. blackboard-based interpretation systems have usually been limited to incremental hypothesize and test strategies for resolving uncertainty. we have developed a new interpretation framework that supports the use of more sophisticated strategies like differential diagnosis. the resun framework has two key components: an evidential representation that includes explicit, symbolic encodings of the sources of uncertainty (sous) in the evidence for hypotheses and a script-based, incremental control planner. interpretation is viewed as an incremental process of gathering evidence to resolve particular sources of uncertainty. control plans invoke actions that examine the symbolic sous associated with hypotheses and use the resulting information to post goals to resolve uncertainty. these goals direct the system to expand methods appropriate for resolving the current sources of uncertainty in the hypotheses. the planner's refocusing mechanism makes it possible to postpone focusing decisions when there is insufficient information to make decisions and provides opportunistic control capabilities. the resun framework has been implemented and experimentally verified using a simulated aircraft monitoring application. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_1007",
        "graph": {
            "node_idx": 1007,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    8,
                    17,
                    18,
                    3,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    15,
                    32,
                    33,
                    34,
                    6,
                    35,
                    0,
                    36,
                    23,
                    1,
                    12,
                    37,
                    38,
                    39,
                    40,
                    18
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1007,
                24442,
                920,
                5752,
                7296,
                4811,
                8622,
                6541,
                20982,
                5856,
                919,
                20511,
                1520,
                24651,
                6755,
                12777,
                917,
                23179,
                23869,
                24366,
                1008,
                24611,
                19724,
                24362,
                3474,
                8497,
                2797,
                18803,
                11828,
                8830,
                4195,
                11825,
                21178,
                21179,
                18179,
                9305,
                5313,
                24878,
                20200,
                20889,
                12823
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: optimal composition of real-time systemsreal-time systems are designed for environments in which the utility of actions is strongly time-dependent. recent work by dean, horvitz and others has shown that anytime algorithms are a useful tool for real-time system design, since they allow computation time to be traded for decision quality. in order to construct complex systems, however, we need to be able to compose larger systems from smaller, reusable anytime modules. this paper addresses two basic problems associated with composition: how to ensure the interruptibility of the composed system; and how to allocate computation time optimally among the components. the first problem is solved by a simple and general construction that incurs only a small, constant penalty. the second is solved by an off-line compilation process. we show that the general compilation problem is np-complete. however, efficient local compilation techniques, working on a single program structure at a time, yield globally optimal allocations for a large class of programs. we illustrate these results with two simple applications. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_1043",
        "graph": {
            "node_idx": 1043,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    3,
                    12,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7
                ]
            ],
            "node_list": [
                1043,
                9167,
                6210,
                10204,
                5149,
                6213,
                21217,
                5626,
                15765,
                23702,
                18457,
                23693,
                10978,
                24426,
                14133,
                21276,
                13230,
                14546,
                10729,
                17108,
                1036,
                24834,
                21953,
                2745,
                22420,
                14693,
                22863,
                16031
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using smart clients to build scalable servicesindividual machines are no longer sufficient to handle the offered load to many internet sites. to use multiple machines for scalable performance, load balancing, fault transparency, and backward compatibility with url naming must be addressed. a number of approaches have been developed to provide transparent access to multi-server internet services including http redirect, dns aliasing, magic routers, and active networks. recently however, portable java code and lightly loaded client machines allow the migration of certain service functionality onto the client. in this paper, we argue that in many instances, a client-side approach to providing transparent access to internet services provides increased flexibility and performance over the existing solutions. we describe the design and implementation of smart clients and show how our system can be used to provide transparent access to scalable and/or highly available network services, including prototypes for: telnet, ftp, and an internet chat application. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_1046",
        "graph": {
            "node_idx": 1046,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                1046,
                16495
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: phase singularities in scale-spacethis paper concerns the use of phase information from band-pass signals for the measurement of binocular disparity, optic flow, and image orientation. towards this end, one of the important properties of band-pass phase information is its stability with respect to small geometric deformations and contrast changes. however, in particular regions phase can also be very unstable due to the occurrence of phase singularities. we discuss the existence of phase singularities, and their relation to the neighbourhoods where phase is unreliable. moreover, we present a simple method for detecting these regions of instability. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_1061",
        "graph": {
            "node_idx": 1061,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    3,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                1061,
                13644,
                1059,
                23009,
                1060,
                15285,
                18523,
                1062,
                19326,
                24083,
                15294
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: modeling cortical plasticity based on adapting lateral interactiona neural network model called lissom for the cooperative self-organization of afferent and lateral connections in cortical maps is applied to modeling cortical plasticity. after self-organization, the lissom maps are in a dynamic equilibrium with the input, and reorganize like the cortex in response to simulated cortical lesions and intracortical microstimulation. the model predicts that adapting lateral interactions are fundamental to cortical reorganization, and suggests techniques to hasten recovery following sensory cortical surgery. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1087",
        "graph": {
            "node_idx": 1087,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    5,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                1087,
                24149,
                24276,
                10026,
                1586,
                6956,
                18141,
                24730,
                575,
                18003,
                24169,
                8918,
                19597,
                12642,
                13041,
                21172,
                15327,
                14409,
                14410,
                22947,
                15192,
                24597,
                4020,
                24228,
                1042,
                8608,
                4408,
                12183,
                8742,
                14664,
                24340,
                24905,
                338,
                4576,
                3507,
                24219,
                1587,
                17926,
                24493,
                8108
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolving mach 3.0 to a migrating thread modelwe have modified mach 3.0 to treat cross-domain remote procedure call (rpc) as a single entity, instead of a sequence of message passing operations. with rpc thus elevated, we improved the transfer of control during rpc by changing the thread model. like most operating systems, mach views threads as statically associated with a single task, with two threads involved in an rpc. an alternate model is that of migrating threads, in which, during rpc, a single thread abstraction moves between tasks with the logical flow of control, and \"server\" code is passively executed. we have compatibly replaced mach's static threads with migrating threads, in an attempt to isolate this aspect of operating system design and implementation. the key element of our design is a decoupling of the thread abstraction into the execution context and the schedulable thread of control, consisting of a chain of contexts. a key element of our implementation is that threads are now \"based\" in the kernel, and temporarily make excursions into tasks via upcalls. the new system provides more precisely defined semantics for thread manipulation and additional control operations, allows scheduling and accounting attributes to follow threads, simplifies kernel code, and improves rpc performance. we have retained the old thread and ipc interfaces for backwards compatibility, with no changes required to existing client programs and only a minimal change to servers, as demonstrated by a functional unix single server and clients. the logical complexity along the critical rpc path has been reduced by a factor of nine. local rpc, doing normal marshaling, has sped up by factors of 1.7-3.4. we conclude that a migrating-thread model is superior to a static model, that kernel-visible rpc is a prerequisite for this improvement, and that it is feasible to improve existing operating systems in this manner. 1 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_1093",
        "graph": {
            "node_idx": 1093,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    1,
                    9,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    6,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    5,
                    0,
                    28,
                    25,
                    29,
                    30,
                    31,
                    1,
                    32,
                    20,
                    33,
                    34,
                    8,
                    35,
                    30,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    8,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1093,
                5175,
                1091,
                18014,
                1092,
                2110,
                3208,
                14357,
                3908,
                1864,
                3653,
                17672,
                18749,
                415,
                17132,
                24667,
                1906,
                18344,
                1089,
                22238,
                15603,
                24586,
                22171,
                24092,
                14658,
                24094,
                2111,
                18361,
                20636,
                1090,
                1094,
                1018,
                3114,
                14770,
                16853,
                16574,
                14369
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a code generation interface for ansi clcc is a retargetable, production compiler for ansi c; it has been ported to the vax, motorola 68020, sparc, and mips r3000, and some versions have been in use for over a year and a half. it is smaller and faster than generally available alternatives, and its local code is comparable. this paper describes the interface between the target-independent front end and the target-dependent back ends. the interface consists of shared data structures, a few functions, and a dag language. while this approach couples the front and back ends tightly, it results in efficient, compact compilers. the interface is illustrated by detailing a code generator that emits naive vax code. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_1132",
        "graph": {
            "node_idx": 1132,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    4,
                    15,
                    16,
                    17,
                    18,
                    10,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    8,
                    6,
                    29,
                    30,
                    31,
                    32,
                    11,
                    33,
                    34,
                    9,
                    35,
                    22,
                    36,
                    37,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    5,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1132,
                2562,
                3985,
                19694,
                24301,
                14144,
                21063,
                14585,
                4447,
                6086,
                1489,
                9238,
                2844,
                6908,
                10430,
                24167,
                7142,
                2845,
                22859,
                24201,
                15749,
                6195,
                6482,
                15739,
                23454,
                8088,
                22442,
                24216,
                1836,
                21690,
                1199,
                18548,
                553,
                24312,
                7985,
                7318,
                3707,
                21065
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: application-specific protocols for user-level shared memoryrecent distributed shared memory (dsm) systems and proposed shared-memory machines have implemented some or all of their cache coherence protocols in software. one way to exploit the flexibility of this software is to tailor a coherence protocol to match an application's communication patterns and memory semantics. this paper presents evidence that this approach can lead to large performance improvements. it shows that application-specific protocols substantially improved the performance of three application programs|appbt, em3d, and barnes|over carefully tuned transparent shared memory implementations. the speed-ups were obtained on blizzard, a fine-grained dsm system running on a 32-node thinking machines cm-5. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_1168",
        "graph": {
            "node_idx": 1168,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    2,
                    3,
                    11,
                    13,
                    14,
                    15,
                    4,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    18,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    20,
                    37,
                    38,
                    39,
                    40,
                    41,
                    8,
                    42,
                    43,
                    7,
                    44,
                    41,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8
                ]
            ],
            "node_list": [
                1168,
                16504,
                2559,
                2909,
                2646,
                3867,
                3550,
                8088,
                14145,
                2845,
                599,
                8809,
                18579,
                3105,
                10907,
                2562,
                3746,
                10754,
                7142,
                21065,
                13672,
                15728,
                3679,
                3814,
                4686,
                3678,
                17091,
                2183,
                22978,
                22979,
                22924,
                5381,
                14710,
                7108,
                17478,
                3549,
                17723,
                9178,
                8433,
                24766,
                14144,
                22081,
                5301,
                9919,
                12644
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: parallelizing molecular dynamics programs for distributed memory machines: an application of the chaos runtime support librarycharmm (chemistry at harvard macromolecular mechanics) is a program that is widely used to model and simulate macromolecular systems. charmm has been parallelized by using the chaos runtime support library on distributed memory architectures. this implementation distributes both data and computations over processors. this data parallel strategy should make it possible to simulate very large molecules on large numbers of processors. in order to minimize communication among processors and to balance computational load, a variety of partitioning approaches are employed to distribute the atoms and computations over processors. in this implementation, atoms are partitioned based on geometrical positions and computational load by using unweighted or weighted recursive coordinate bisection. the experimental results reveal that taking computational load into account is essential. the performance of two iteration partitioning algorithms, atom decomposition and force decomposition, is also compared. a new irregular force decomposition algorithm is introduced and implemented. the chaos library is designed to facilitate parallelization of irregular applications. this library (1) couples partitioners to the application programs, (2) remaps data and partitions work among processors, and (3) optimizes interprocessor communications. this paper presents an application of chaos that can be used to support efficient execution of irregular problems on distributed memory machines. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_1188",
        "graph": {
            "node_idx": 1188,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                1188,
                16506,
                24419,
                24508,
                19969,
                24924,
                24958
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a denotational framework for comparing models of computationwe give a denotational framework (a meta model) within which certain properties of models of computation can be understood and compared. it describes concurrent processes in general terms as sets of possible behaviors. a process is determinate if given the constraints imposed by the inputs there are exactly one or exactly zero behaviors. compositions of processes are processes with behaviors in the intersection of the behaviors of the component processes. the interaction between processes is through signals, which are collections of events. each event is a value-tag pair, where the tags can come from a partially ordered or totally ordered set. timed models are where the set of tags is totally ordered. synchronous events share the same tag, and synchronous signals contain events with the same set of tags. synchronous processes have only synchronous signals as behaviors. strict causality (in timed tag systems) and continuity (in untimed tag systems) ensure determinacy under certain technical conditions. the framework is used to compare certain essential features of various models of computation, including kahn process networks, dataow, sequential processes, concurrent sequential processes with rendezvous, petri nets, and discrete-event systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_1194",
        "graph": {
            "node_idx": 1194,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                1194,
                6090,
                9176,
                1199,
                18548,
                6086,
                9382,
                9383,
                22646
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: start-voyagerthis paper describes the start-voyager cluster area network (clan) parallel system. clan is a new class of parallel systems designed to bridge the performance and functionality gap between traditional mpps and nows (networks of workstations). by constructing a parallel machine with unmodified commercial smps as the building block, a clan system inherits most of the advantages of the now approach. in addition by chosing the coherent memory bus as the point of interface, a clan system achieves better message passing performance than nows, and also offers coherent distributed shared memory. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_1198",
        "graph": {
            "node_idx": 1198,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    0,
                    15,
                    3,
                    9,
                    16,
                    17,
                    18,
                    9,
                    19,
                    20,
                    21,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9
                ]
            ],
            "node_list": [
                1198,
                8199,
                1295,
                13041,
                21781,
                5182,
                22518,
                14693,
                18141,
                15218,
                23864,
                18019,
                3661,
                18912,
                12816,
                19953,
                23832,
                14687,
                22519,
                15217,
                22960,
                14688
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: application performance and flexibility on exokernel systemsthe exokernel operating system architecture safely gives untrusted software efficient control over hardware and software resources by separating management from protection. this paper describes an exokernel system that allows specialized applications to achieve high performance without sacrificing the performance of unmodified unix programs. it evaluates the exokernel architecture by measuring end-to-end application performance on xok, an exo-kernel for intel x86-based computers, and by comparing xok's performance to the performance of two widely-used 4.4bsd unix systems (freebsd and openbsd). the results show that common unmodified unix applications can enjoy the benefits of exoker-nels: applications either perform comparably on xok/exos and the bsd unixes, or perform significantly better. in addition, the results show that customized applications can benefit substantially from control over their resources (e.g., a factor of eight for a web server). this paper also describes insights about the exokernel approach gained through building three different exokernel systems, and presents novel approaches to resource multiplexing. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_1200",
        "graph": {
            "node_idx": 1200,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                1200,
                6090,
                11830,
                20609,
                1199,
                18548,
                6086,
                14569
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: implications of i/o for gang scheduled workloadsthis paper examines the implications of gang scheduling for general-purpose multiprocessors. the workloads in these environments include both compute-bound parallel jobs, which often require gang scheduling, and i/o-bound jobs, which require high cpu priority to achieve interactive response times. our results indicate that an effective interactive multiprocessor scheduler must weigh both the benefits and costs of gang scheduling when deciding how to allocate resources to jobs. this paper answers a number of questions about gang scheduling in the context of a variety of synthetic applications and splash benchmarks running on the fugu scalable multiprocessor workstation. we show that gang scheduling interferes with the performance of i/o-bound jobs, that applications do not benefit equally from gang scheduling, that most real applications can tolerate at least a small amount of scheduling skew without major performance degradation, and that messaging statistics can provide important clues to whether applications require gang scheduling. taken together these results suggest that a multiprocessor scheduler can deliver interactive response times by dynamically monitoring and adjusting its resource allocation strategy. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_1201",
        "graph": {
            "node_idx": 1201,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    4,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    1,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    2,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4
                ]
            ],
            "node_list": [
                1201,
                6090,
                1199,
                272,
                6086,
                22507,
                18548,
                276,
                17236,
                567,
                19068,
                7681,
                710,
                6983,
                774,
                4088,
                602,
                7317,
                3707,
                24301,
                3492,
                11421,
                1565,
                5841,
                9319,
                1564
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fugu: implementing translation and protection in a multiuser, multimodel multiprocessormultimodel multiprocessors provide both shared memory and message passing primitives to the user for efficient communication. in a multiuser machine, translation permits machine resources to be virtualized and protection permits users to be isolated. the challenge in a multiuser multiprocessor is to provide translation and protection sufficient for general-purpose computing without compromising communication performance, particularly the performance of communication between parallel threads belonging to the same computation. fugu is a proposed architecture that integrates translation and protection with a set of communication mechanisms originally designed for high performance on a single-user, physically-addressed, large-scale, multimodel multiprocessor. communication in fugu is based on the mechanisms of the alewife machine [1]. the mechanisms are shared memory with hardware cache coherence, user-level message sends and receives, and a user-controlled dma facility integrated with messages for bulk transfers. this paper presents a design that integrates translation and protection with these communication mechanisms. three components of the design are novel. first, we propose maintaining tlb coherence as a side-effect of cache coherence on page table entries. second, we describe how to permit user-launched and user-handled messages without dedicating physical memory for buffering at the sender or at the receiver. we propose to use a rudimentary, second, system-only network to avoid deadlock of the user-accessible network. third, we show how to integrate user dma with virtual memory to permit bulk transfers without prenegotiation and global locking of physical memory. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_1202",
        "graph": {
            "node_idx": 1202,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    3,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    7,
                    30,
                    23,
                    29,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    12,
                    3,
                    1,
                    2,
                    38
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1202,
                6292,
                5300,
                5297,
                12134,
                2218,
                4538,
                8302,
                6090,
                22447,
                5298,
                10085,
                17138,
                12136,
                12135,
                14545,
                286,
                2217,
                2219,
                12172,
                21015,
                21354,
                7501,
                8199,
                11830,
                3779,
                6983,
                19286,
                19377,
                11422,
                8301,
                20089,
                21065,
                22422,
                22423,
                1199,
                18548,
                6086,
                19887
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experience with active messages on the meiko cs-2active messages provide a low latency communication architecture which on modern parallel machines achieves more than an order of magnitude performance improvement over more traditional communication libraries. this paper discusses the experience we gained while implementing active messages on the meiko cs-2, and discusses implementations for similar architectures. during our work we have identified that architectures which only support efficient remote write operations (or dma transfers as in the case of the cs-2) make it difficult to transfer both data and control as required by active messages. traditional network interfaces avoid this problem because they have a single point of entry which essentially acts as a queue. to efficiently support active messages on modern network communication co-processors, hardware primitives are required which support this queue behavior. we overcame this problem by producing specialized code which runs on the communications co-processor and supports the active messages protocol. our implementation of active messages results in a one-way latency of 12:3s and achieves up to 39 mb/s for bulk transfers. both numbers are close to optimal for the current meiko hardware and are competitive with performance of active messages on other hardware platforms. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_1218",
        "graph": {
            "node_idx": 1218,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    7,
                    8,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4
                ]
            ],
            "node_list": [
                1218,
                17155,
                10053,
                10054,
                8070,
                19034,
                14967,
                5334,
                17967
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: discovering predictable classifications (neural computation, 5(4):625-635, 1993)prediction problems are among the most common learning problems for neural networks (e.g. in the context of time series prediction, control, etc.). with many such problems, however, perfect prediction is inherently impossible. for such cases we present novel unsupervised systems that learn to classify patterns such that the classifications are predictable while still being as specific as possible. the approach can be related to the imax method of hinton, becker and zemel (1989, 1991). experiments include a binary stereo task proposed by becker and hinton, which can be solved more readily by our system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1257",
        "graph": {
            "node_idx": 1257,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                1257,
                16510,
                18121,
                19997,
                25007
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: machine learning methods for international conflict databases: a case study in predicting mediation outcomethis paper tries to identify rules and factors that are predictive for the outcome of international conflict management attempts. we use c4.5, an advanced machine learning algorithm, for generating decision trees and prediction rules from cases in the confman database. the results show that simple patterns and rules are often not only more understandable, but also more reliable than complex rules. simple decision trees are able to improve the chances of correctly predicting the outcome of a conflict management attempt. this suggests that mediation is more repetitive than conflicts per se, where such results have not been achieved so far. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_1260",
        "graph": {
            "node_idx": 1260,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                1260,
                16510,
                18121,
                19997
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the possible contribution of ai to the avoidance of crises and wars: using cbr methodsthis paper presents the application of case-based reasoning methods to the kosimo data base of international conflicts. a case-based reasoning tool - vie-cbr has been deveolped and used for the classification of various outcome variables, like political, military, and territorial outcome, solution modalities, and conflict intensity. in addition, the case retrieval algorithms are presented as an interactive, user-modifiable tool for intelli gently searching the conflict data base for precedent cases. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_1262",
        "graph": {
            "node_idx": 1262,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    0,
                    8,
                    9,
                    10,
                    11,
                    5,
                    12,
                    13,
                    1,
                    14,
                    15,
                    16,
                    17,
                    3,
                    10,
                    11,
                    7,
                    13,
                    18,
                    19,
                    5,
                    20,
                    21,
                    5,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    11,
                    10,
                    33,
                    7,
                    5,
                    34,
                    35,
                    0,
                    8,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1262,
                10590,
                11768,
                12103,
                1266,
                8059,
                6242,
                20554,
                13874,
                5590,
                1263,
                19903,
                11965,
                20568,
                17276,
                2172,
                24505,
                2076,
                17961,
                5088,
                23037,
                23038,
                24608,
                9137,
                20332,
                25031,
                18443,
                20329,
                24300,
                3343,
                15494,
                12239,
                23661,
                12492,
                20578,
                12086,
                4023
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using genetic algorithms to explore pattern recognition in the immune system comments welcomewe describe an immune system model based on a universe of binary strings. the model is directed at understanding the pattern recognition processes and learning that take place at both the individual and species levels in the immune system. the genetic algorithm (ga) is a central component of our model. in the paper we study the behavior of the ga on two pattern recognition problems that are relevant to natural immune systems. finally, we compare our model with explicit fitness sharing techniques for genetic algorithms, and show that our model implements a form of implicit fitness sharing. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_1270",
        "graph": {
            "node_idx": 1270,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    5,
                    6,
                    9,
                    7,
                    9,
                    10,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    4,
                    4,
                    6,
                    7,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                1270,
                9490,
                8965,
                3711,
                8737,
                9489,
                6977,
                10246,
                6976,
                17614,
                14943
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a probabilistic framework for feature-based speech recognition 1most current speech recognizers use an observation space which is based on a temporal sequence of frames (e.g., mel-cepstra). there is another class of recognizer which further processes these frames to produce a segment-based network, and represents each segment by fixed-dimensional features. in such feature-based rec-ognizers the observation space takes the form of a temporal network of feature vectors, so that a single segmentation of an utterance will use a subset of all possible feature vectors. in this work we examine a maximum a posteriori decoding strategy for feature-based recognizers and develop a normalization criterion useful for a segment-based viterbi or a fl search. we report experimental results for the task of phonetic recognition on the timit corpus where we achieved context-independent and context-dependent (using di-phones) results on the core test set of 64.1% and 69.5% respectively. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_1317",
        "graph": {
            "node_idx": 1317,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    7,
                    4,
                    25,
                    26,
                    27,
                    28,
                    29,
                    2,
                    30,
                    4,
                    21,
                    23,
                    24,
                    7,
                    25
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1317,
                15010,
                24373,
                10364,
                21724,
                17837,
                8845,
                6388,
                10423,
                7374,
                23533,
                15012,
                14132,
                22052,
                5211,
                18868,
                521,
                15193,
                8691,
                8230,
                18219,
                13737,
                21727,
                13739,
                13736,
                23885,
                19320,
                23130,
                23755,
                23756,
                18718
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: self-similarity through high-variability: statistical analysis of ethernet lan traffic at the source levela number of recent empirical studies of traffic measurements from a variety of working packet networks have convincingly demonstrated that actual network traffic is self-similar or long-range dependent in nature (i.e., bursty over a wide range of time scales) in sharp contrast to commonly made traffic modeling assumptions. in this paper, we provide a plausible physical explanation for the occurrence of self-similarity in high-speed network traffic. our explanation is based on convergence results for processes that exhibit high variability (i.e., infinite variance) and is supported by detailed statistical analyses of real-time traffic measurements from ethernet lan's at the level of individual sources. our key mathematical result states that the superposition of many on/off sources (also known as packet trains) whose on-periods and off-periods exhibit the noah effect (i.e., have high variability or infinite variance) produces aggregate network traffic that features the joseph effect (i.e., is self-similar or long-range dependent). there is, moreover, a simple relation between the parameters describing the intensities of the noah effect (high variability) and the joseph effect (self-similarity). an extensive statistical analysis of two sets of high time-resolution traffic measurements from two ethernet lan's (involving a few hundred active source-destination pairs) confirms that the data at the level of individual sources or source-destination pairs are consistent with the noah effect. we also discuss implications of this simple physical explanation for the presence of self-similar traffic patterns in modern high-speed network traffic for (i) parsimonious traffic modeling, (ii) efficient synthetic generation of realistic traffic patterns, and (iii) relevant network performance and protocol analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_1322",
        "graph": {
            "node_idx": 1322,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    5,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    11,
                    23,
                    24,
                    25,
                    1,
                    26,
                    27,
                    17,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8
                ]
            ],
            "node_list": [
                1322,
                4778,
                12375,
                10361,
                11956,
                3128,
                2490,
                6382,
                13572,
                20776,
                19849,
                8771,
                2362,
                10065,
                20587,
                9103,
                19572,
                14188,
                22115,
                5783,
                19271,
                11957,
                3129,
                18122,
                5910,
                12159,
                12158,
                17267,
                7629,
                16641,
                17441,
                9692,
                6467,
                7683,
                19296,
                20147,
                13603,
                21601,
                7006,
                7378,
                21583
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: pattern recognition. workshop on the interpretation of visual motion, santa barbara, ca, 1998. improved trackinga combined 2d, 3d approach is presented that allows for robust tracking of moving bodies in a given environment as observed via a single, uncalibrated video camera. low-level features are often insufficient for detection, segmentation, and tracking of non-rigid moving objects. therefore, an improved mechanism is proposed that combines low-level (image processing) and mid-level (recursive trajectory estimation) information obtained during the tracking process. the resulting system can segment and maintain the tracking of moving objects before, during, and after occlusion. at each frame, the system also extracts a stabilized coordinate frame of the moving objects. this stabilized frame can be used as input to motion recognition modules. the approach enables robust tracking without constraining the system to know the shape of the objects being tracked beforehand; although, some assumptions are made about the characteristics of the shape of the objects, and how they evolve with time. experiments in tracking moving people are described. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_1330",
        "graph": {
            "node_idx": 1330,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    4,
                    12,
                    13,
                    5,
                    1,
                    13,
                    5,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    7,
                    6,
                    9,
                    27,
                    4,
                    12,
                    28,
                    24,
                    3,
                    29,
                    22,
                    30,
                    29,
                    22,
                    6,
                    3,
                    31,
                    6,
                    32
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1330,
                2164,
                1327,
                3889,
                19445,
                10584,
                12183,
                9809,
                14220,
                9811,
                14255,
                4751,
                19778,
                20629,
                12210,
                6932,
                2168,
                12518,
                1328,
                3775,
                14539,
                6738,
                22167,
                4577,
                14289,
                22208,
                1040,
                14320,
                14342,
                22165,
                22211,
                22207,
                22255
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: properties of membership servicesa membership service is used in a distributed system to maintain information about which sites are functioning and which have failed at any given time. such services have proven to be fundamental for constructing distributed applications, with many example services and algorithms defined in the literature. despite these efforts, however, little has been done on examining the abstract properties important to membership independent of a given service. here, these properties are identified and characterized. message ordering graphs are used to specify the effect of each property on the message flow as seen by the application, and dependency graphs are used to characterize the relationship between properties. these graphs help differentiate existing services, as well as facilitate the design of new services in which only those properties actually required by an application are included. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_1337",
        "graph": {
            "node_idx": 1337,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    8,
                    17,
                    18,
                    19,
                    3,
                    20,
                    21,
                    2,
                    22,
                    23,
                    18,
                    19,
                    24,
                    25,
                    5,
                    26,
                    27,
                    28,
                    29,
                    30,
                    15,
                    31,
                    8,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1337,
                1377,
                19320,
                6609,
                21968,
                12654,
                22933,
                1341,
                23130,
                23131,
                7891,
                10423,
                6072,
                18465,
                13736,
                1538,
                14076,
                15427,
                23755,
                23756,
                24350,
                10422,
                8296,
                15234,
                16079,
                20917,
                18837,
                16545,
                7253,
                15232,
                13438,
                14102,
                23560,
                16082,
                6560,
                8298,
                22032,
                13883,
                14096,
                23129
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: adaptive playout mechanisms for packetized audio applications in wide-area networksrecent interest in supporting packet-audio applications over wide area networks has been fueled by the availability of low-cost, toll-quality workstation audio and the demonstration that limited amounts of interactive audio can be supported by today's internet. in such applications, received audio packets are buffered, and their playout delayed at the destination host in order to compensate for the variable network delays. in this paper we investigate the performance of four different algorithms for adaptively adjusting the playout delay of audio packets in an interactive packet-audio terminal application, in the face of such varying network delays. we evaluate the playout algorithms using experimentally-obtained delay measurements of audio traffic between several different internet sites. our results indicate that an adaptive algorithm which explicitly adjusts to the sharp, spike-like increases in packet delay which we observed in our traces can achieve a lower rate of lost packets for both a given average play-out delay and a given maximum buffer size. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_1342",
        "graph": {
            "node_idx": 1342,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    6,
                    7,
                    3,
                    12,
                    13,
                    14,
                    8,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    1,
                    28,
                    29,
                    9,
                    30,
                    10,
                    4,
                    31,
                    32,
                    33,
                    34,
                    31,
                    35
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    9,
                    10
                ]
            ],
            "node_list": [
                1342,
                1343,
                16,
                16519,
                772,
                9552,
                2793,
                19364,
                19383,
                9593,
                10901,
                469,
                4793,
                4930,
                18339,
                13408,
                16242,
                5175,
                24149,
                7418,
                1089,
                5180,
                14641,
                21478,
                22300,
                19953,
                26,
                240,
                5222,
                14936,
                9594,
                410,
                24667,
                2791,
                22701,
                24837
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: how to use a 64-bit virtual address spacethe recent appearance of architectures with flat 64-bit virtual addressing opens an opportunity to reconsider our use of virtual address spaces. in this paper we argue for an alternative addressing model, in which all programs and data reside in a single global virtual address space shared by multiple protection domains. hardware-based memory protection exists within the single address space, providing firewalls as strong as in conventional systems. we explore the tradeoffs in the use of a global virtual address space relative to the private address space model. we contend that a shared address space can eliminate obstacles to efficient sharing and exchange of data structures that are inherent in private address space systems. the shared address space offers advantages similar to some capability-based computer systems, but can be implemented on standard page-based hardware, without the performance costs and restricted data model typical of capability-based systems. we introduce opal, an operating system to support this model on paged 64-bit architectures. the key feature of opal is a flat virtual address space that includes data on long-term storage and across the network. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_1350",
        "graph": {
            "node_idx": 1350,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    3,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    21,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1350,
                17056,
                1175,
                10292,
                8269,
                8420,
                17630,
                8268,
                10111,
                1393,
                23579,
                2805,
                9038,
                22241,
                1173,
                3958,
                6082,
                16505,
                20595,
                14079,
                19198,
                3977,
                1391,
                6094,
                2007,
                9488,
                10569,
                1432,
                8421,
                5434,
                1556,
                7798,
                2856,
                23716,
                19084,
                23546,
                16343,
                2730,
                86,
                16034,
                24476,
                5603,
                18606,
                19199,
                1390
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the design and implementation of kaleidoscope'90, a constraint imperative programming language there is a stronglanguages are imperative and declarative programming. we describe a scheme for languages that integrate specific features from these two paradigms into a new framework: constraint imperative programming. along with the framework, we discuss the design and implementation of a particular instance of this framework, kaleidoscope'90. from the imperative paradigm, constraint imperative programming adopts explicit control flow, state, and assignment. from the declarative paradigm, it adopts explicit, system \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_1353",
        "graph": {
            "node_idx": 1353,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    15,
                    20,
                    21,
                    0,
                    22,
                    15,
                    21,
                    23,
                    6,
                    0,
                    7,
                    8,
                    24,
                    25,
                    26,
                    27,
                    28,
                    18,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1353,
                16521,
                3963,
                16940,
                9779,
                20713,
                11800,
                11801,
                20721,
                12337,
                11726,
                16860,
                10442,
                19200,
                19654,
                20327,
                12303,
                20716,
                20723,
                21186,
                20708,
                5345,
                23237,
                12327,
                7092,
                20892,
                12333,
                3722,
                12339,
                14739,
                3724,
                25019,
                12302,
                15461,
                52
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: de-noising by reconstruction f n is defined in the wavelet domain by translating all thep n. we prove two results about that estimator. [smooth]: with high probability ^ f fl n is at least as smooth as f , in any of a wide variety of smoothness measures. [adapt]: the estimator comes nearly as close in mean square to f as any measurable estimator can come, uniformly over balls in each of two broad scales of smoothness classes. these two properties are unprecedented in several ways. our proof of these results develops new facts about abstract statistical inference and its connection with acknowledgements. these results were described at the symposium on wavelet theory, held in connection with the shanks lectures at van-derbilt university, april 3-4 1992. the author would like to thank professor l.l. schumaker for hospitality at the conference, and r.a. devore, iain johnstone, gerard kerkyacharian, bradley lucier, a.s. nemirovskii, ingram olkin, and dominique picard for interesting discussions and correspondence on related topics. the author is also at the university of california, berkeley \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_1354",
        "graph": {
            "node_idx": 1354,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                1354,
                16521,
                16940
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 1 statistical enhancement of a reflectometry metrology system metrology performance is a very important issuethe increasing demands for in-situ statistical process control (spc) in the semiconductor industry have elevated the need for high performance metrology. as we move to deep submicron technology and larger wafers, the accuracy and repeatability of the metrology system becomes more and more important for capturing the temporal and spatial process variation. in this paper we describe a set of statistical techniques for improving and evaluating a reectometry metrology system. our techniques include experiment design and bayesian analysis that help us to focus only on the active factors while ignoring those that are statistically insignificant. bootstrap evaluation of the metrology is performed based on those active factors. it is expected that this methodology will greatly facilitate the speed and characterization of in-situ metrology, which is essential to modern control applications. modern inspection instruments usually encompass of complex model that is needed to extract useful information from the physical observation. these models often contain unknown parameters, whose values must be estimated. for example, in the reectometry system, considering the uctuation of the probed material, all the parameters that describe the dispersion equations, as well as thin-film thickness comprise the metrology space. the performance of metrology is inuenced by the physical measurement mechanism, the embedded numerical algorithm and the metrology space. we define the metrology space as the cartesian space spanned by the extractable parameters of the sensor model. in advanced metrology, the dimension of the metrology space is usually fairly large. let us now focus on the two major problems that can diminish the performance of metrology: the high dimension of the metrology space and the high computational cost of the sensor model. higher dimension usually affects speed and accuracy. fortunately, due to the principle of factor sparsity, it is often the case that of the many potentially important variables, only a few are truly important or active, while the rest are inert. to systematically address these problems, we follow the strategy shown in fig. 1. we start by identifying the possibly important factors. then we conduct one or more small, carefully designed simulated experiments. through bayesian variable screening, we identity those variables that are truly important based on the reduced metrology space, we then conduct a statistical evaluation. because of the reduction of metrology parameter space, the computational cost of metrology is drastically reduced. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_1361",
        "graph": {
            "node_idx": 1361,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    3,
                    9,
                    10,
                    11,
                    12,
                    13,
                    5,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    4,
                    23,
                    24,
                    25,
                    26,
                    3,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    18,
                    33,
                    14,
                    34,
                    35,
                    36,
                    30,
                    37,
                    1,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7
                ]
            ],
            "node_list": [
                1361,
                1359,
                6580,
                7532,
                319,
                3059,
                658,
                10748,
                12283,
                116,
                3525,
                313,
                7437,
                17392,
                1360,
                16861,
                20650,
                12568,
                17777,
                15830,
                22153,
                18487,
                5586,
                19134,
                268,
                24780,
                5604,
                2977,
                17348,
                16713,
                3057,
                1078,
                17122,
                17816,
                1950,
                5835,
                9302,
                5739,
                12567,
                11163,
                22035,
                14100,
                16087,
                23712,
                2213
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: integrating abstraction and explanation-based learning in prodigythis paper describes the integration of abstraction and explanation-based learning (ebl) in the context of the prodigy system. prodigy's abstraction module creates a hierarchy of abstract problem spaces, so problem solving can proceed in a more directed fashion. the ebl module acquires search control knowledge by analyzing problem-solving traces. when the two modules are integrated, they tend to complement each other's capabilities, resulting in performance improvements that neither system can achieve independently. we present empirical results showing the effect of combining the two modules and describe the factors that influence the overall performance of the integrated system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_1369",
        "graph": {
            "node_idx": 1369,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    8,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    19,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    5,
                    0,
                    21,
                    29,
                    30,
                    17,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    15,
                    38
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    8,
                    8
                ]
            ],
            "node_list": [
                1369,
                5431,
                20364,
                18398,
                4949,
                1368,
                11017,
                22975,
                6527,
                21914,
                23998,
                3843,
                20159,
                5725,
                173,
                5429,
                5739,
                9585,
                15634,
                1980,
                17054,
                6361,
                9495,
                13893,
                13975,
                22029,
                22126,
                23696,
                14095,
                759,
                4492,
                9776,
                18751,
                7584,
                21998,
                19837,
                24064,
                11353,
                9828
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: query reformulation for dynamic information integration editor:the standard approach to integrating heterogeneous information sources is to build a global schema that relates all of the information in the different sources, and to pose queries directly against it. the problem is that schema integration is usually difficult, and as soon as any of the information sources change or a new source is added, the process may have to be repeated. the sims system uses an alternative approach. a domain model of the application domain is created, establishing a fixed vocabulary for describing data sets in the domain. using this language, each available information source is described. queries to sims against the collection of available information sources are posed using terms from the domain model, and reformulation operators are employed to dynamically select an appropriate set of information sources and to determine how to integrate the available information to satisfy a query. this approach results in a system that is more flexible than existing ones, more easily scalable, and able to respond dynamically to newly available or unexpectedly missing information sources. this paper describes the query reformulation process in sims and the operators used in it. we provide precise definitions of the reformulation operators and explain the rationale behind choosing the specific ones sims uses. we have demonstrated the feasibility and effectiveness of this approach by applying sims in the domains of transportation planning and medical trauma care. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_1415",
        "graph": {
            "node_idx": 1415,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                1415
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: what price replication?replicated data is employed in distributed databases to enhance data availability. however, the benefit of data availability is only realized at the cost of elaborate algorithms which hide the underlying complexity of maintaining multiple copies of a single data item. the concern about the performance impact of replica control is part of the reasons why replication, although extensively researched, has yet to receive wide acceptance in practice. this paper makes use of a simulation model to explore the performance tradeoffs of data replication. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_1420",
        "graph": {
            "node_idx": 1420,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                1420,
                4884,
                17040,
                18298
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a predictive switching model of cerebellar movement controlwe present a hypothesis about how the cerebellum could participate in regulating movement in the presence of significant feedback delays without resorting to a forward model of the motor plant. we show how a simplified cerebellar model can learn to control endpoint positioning of a nonlinear spring-mass system with realistic delays in both afferent and efferent pathways. the model's operation involves prediction, but instead of predicting sensory input, it directly regulates movement by reacting in an anticipatory fashion to input patterns that include delayed sensory feedback. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1423",
        "graph": {
            "node_idx": 1423,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    2,
                    4,
                    0,
                    10,
                    8,
                    11,
                    12,
                    13,
                    5,
                    8,
                    9,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    4,
                    20,
                    13,
                    21,
                    22,
                    8,
                    9,
                    23
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1423,
                16532,
                16608,
                2215,
                2558,
                17682,
                18181,
                17334,
                19308,
                3278,
                1422,
                2557,
                16653,
                15403,
                17118,
                22611,
                4019,
                24822,
                5216,
                4318,
                3271,
                17803,
                10410,
                2556
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: sensor based planning, part i: the generalized voronoi graphthis paper introduces a 1-dimensional network of curves termed the generalized voronoi graph (gvg) and its extension, the hierarchical generalized voronoi graph (hgvg), which can be used as a basis for a roadmap or retract-like structure. the gvg and hgvg provide a basis for sensor based path planning in an unknown static environment. in this paper, the gvg and hgvg are defined and some of their properties are exploited to show their utility for motion planning. a companion paper describes how to use the gvg and hgvg for the purposes of sensor based planning. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_1444",
        "graph": {
            "node_idx": 1444,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    7,
                    9,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    8,
                    9
                ]
            ],
            "node_list": [
                1444,
                24568,
                17470,
                13656,
                12650,
                586,
                24769,
                14410,
                15757,
                15758,
                21660,
                4076,
                21681,
                13655,
                3766,
                5538,
                22330,
                14431,
                14409
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: designing hard real-time systemsthis paper presents a systems life cycle and a structured design method which are tailored towards the construction of real-time systems in general, and hard real-time systems in particular. the standard systems life cycle is modified to take into account the expression and satisfaction of nonfunctional requirements. the hood design method is extended to support abstractions which explicitly cater for the characteristics and properties of hard real-time systems. the new method is called hrt-hood (hard real time hood). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_1462",
        "graph": {
            "node_idx": 1462,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    14,
                    24,
                    25,
                    5,
                    14,
                    26,
                    27,
                    28,
                    24,
                    29,
                    25,
                    30,
                    25,
                    3,
                    5,
                    0,
                    2,
                    5,
                    31,
                    14,
                    32,
                    33,
                    6,
                    34,
                    35,
                    6,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    6,
                    0,
                    46,
                    47,
                    3,
                    48,
                    42,
                    41,
                    49,
                    50,
                    2,
                    33,
                    19,
                    25,
                    34,
                    45,
                    7,
                    49,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1462,
                852,
                24139,
                202,
                17677,
                4645,
                8979,
                1458,
                1459,
                1544,
                212,
                11668,
                6821,
                6888,
                24225,
                21267,
                17042,
                836,
                6889,
                2439,
                9986,
                206,
                2346,
                1051,
                9110,
                205,
                17354,
                1049,
                7496,
                24573,
                13801,
                526,
                22223,
                22421,
                15499,
                7406,
                19984,
                8318,
                1055,
                7261,
                24768,
                4407,
                22401,
                6681,
                22456,
                204,
                25077,
                10756,
                13804,
                1881,
                19625
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: static type determination and aliasing for cstatic type determination involves compile time calculation of the type of object a pointer may point to, at a particular program point during some execution. we show that the problem of precise interprocedural type determination is np-hard in the presence of inheritance, virtual functions and pointers. we highlight the significance of type determination in improving code efficiency and precision of other static analyses. first we present a safe, approximate type determination algorithm for c ++ programs with single level pointers, using the conditional analysis technique [lr91]. then we present a generalization of this approach to simultaneously solve the aliasing and type determination problems for c ++ programs with multiple levels of pointer dereferencing, and explain why this is a more complicated analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_1465",
        "graph": {
            "node_idx": 1465,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    4,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                1465,
                11829,
                4712,
                5319,
                24242,
                24830,
                24911,
                6859,
                18659,
                8909,
                6589,
                11597,
                8910,
                9973,
                15801,
                4616,
                23499,
                5482,
                6590,
                5913,
                17148,
                25004,
                5912,
                304,
                5916,
                9180,
                8762
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reasoning about actions with slgwe show how some forms of reasoning about the effects of actions can be automated using slg, a logic programming interpreter developed by chen and warren. slg is turned into an interpreter for \"extended\" logic programs, in which both negation as failure and classical negation can be used. a new translation from a high-level action language into extended logic programming is proposed, in which the rules for reasoning backwards in time are restricted to \"relevant\" situations, in order to ensure the termination of the query evaluation process. in examples that use this translation and involve reasoning about the past and counterfactual reasoning, slg is found to terminate without floundering on ground queries, as well as on the nonground queries that have fluent variables only. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_1469",
        "graph": {
            "node_idx": 1469,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    49,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1469,
                3964,
                18391,
                509,
                894,
                2587,
                10748,
                7837,
                18757,
                3429,
                4048,
                17607,
                7327,
                3389,
                17707,
                18836,
                10680,
                1276,
                4549,
                17753,
                16987,
                3168,
                2370,
                6645,
                6706,
                4022,
                18447,
                19792,
                11410,
                2383,
                17231,
                893,
                10520,
                18454,
                3006,
                19171,
                8437,
                16995,
                4627,
                9802,
                10414,
                7308,
                10049,
                20540,
                21395,
                2213,
                17879,
                19147,
                24185,
                4426,
                18259,
                18731,
                2382,
                19890,
                3680,
                18160,
                6723,
                24580,
                18864,
                10175,
                386,
                8583
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an improved algorithm for incremental induction of decision treestechnical report 94-07 february 7, 1994 (updated april 25, 1994) this paper will appear in proceedings of the eleventh international conference on machine learning. abstract this paper presents an algorithm for incremental induction of decision trees that is able to handle both numeric and symbolic variables. in order to handle numeric variables, a new tree revision operator called `slewing' is introduced. finally, a non-incremental method is given for finding a decision tree based on a direct metric of a candidate tree. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_1475",
        "graph": {
            "node_idx": 1475,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    7,
                    11,
                    12,
                    13,
                    2,
                    14,
                    5,
                    15,
                    6,
                    16,
                    17,
                    18,
                    19,
                    20,
                    2,
                    8,
                    2,
                    3,
                    9,
                    21,
                    7,
                    22,
                    8,
                    23,
                    4,
                    24,
                    25,
                    26,
                    27,
                    2,
                    28,
                    20,
                    18,
                    29,
                    6,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    5,
                    5,
                    5,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1475,
                10233,
                2608,
                2607,
                12058,
                3119,
                19488,
                19162,
                1474,
                8097,
                1001,
                13436,
                15604,
                13625,
                24299,
                24748,
                19505,
                19738,
                18656,
                23760,
                4437,
                4402,
                13624,
                920,
                20161,
                21464,
                1503,
                23869,
                24481,
                18692,
                5752,
                16774,
                17017,
                24366,
                175,
                1008,
                24611,
                7824,
                12060
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on planning, scheduling and control, vol. a planner for the control of problem-solving systemsas part of research on sophisticated control for sensor interpretation, we have developed a planning-based control scheme for blackboard systems. a planner's goal/plan/subgoal structure provides explicit context information that can be used to index and apply large amounts of context-specific control knowledge. the key obstacle to using planning for the control of problem solvers is the need to deal with uncertain and dynamically changing situations without incurring unacceptable overhead. we have addressed these problems in several ways: our planner is script-based, planning and execution are interleaved, plans can invoke information gathering actions, plan refinement is controlled by plan-specific focusing heuristics, and the system's focus-of-attention can be dynamically shifted by the refocusing mechanism. refocusing makes it possible to postpone focusing decisions and maintain the opportunistic control capabilities of conventional blackboard systems. planning with refocusing results in a view of the control process as both a search for problem solutions and a search for the best methods to determine these solutions. the planner has been implemented in the resun interpretation system and has been used with a simulated aircraft monitoring application and a system for understanding household sounds. our experience confirms that the combination of control plans with context-specific focusing heuristics provides a modular framework for developing and maintaining complex control strategies. in experiments, we have been able to achieve significant performance improvements as a result of the ability to encode sophisticated control strategies despite the overhead of the planning mechanism. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_1479",
        "graph": {
            "node_idx": 1479,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    0,
                    11,
                    5,
                    6,
                    12,
                    2,
                    7,
                    8,
                    10,
                    2,
                    7,
                    8,
                    10,
                    2,
                    8,
                    10,
                    7,
                    4,
                    0,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1479,
                4784,
                2633,
                16918,
                17019,
                17523,
                2632,
                2631,
                7229,
                4783,
                18470,
                725,
                6661
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: self-taught visually-guided pointing for a humanoid robotthe authors implemented a system which performs a fundamental visuomotor coordination task on the humanoid robot cog. cog's task was to saccade its pair of two degree-of-freedom eyes to foveate on a target, and then to maneuver its six degree-of-freedom compliant arm to point at that target. this task requires systems for learning to saccade to visual targets, generating smooth arm trajectories, locating the arm in the visual field, and learning the map between gaze direction and correct pointing configuration of the arm. all learning was self-supervised solely by visual feedback. the task was accomplished by many parallel processes running on a seven processor, extensible architecture, \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_1482",
        "graph": {
            "node_idx": 1482,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                1482,
                16540,
                24449,
                2585,
                17780,
                7864,
                8725,
                12507,
                2583,
                2584,
                9672,
                1748,
                10414,
                23009
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: acquiring the mapping from meaning to sounds1 we thank steen ladegaard knudsen for his assistance in programming, analysis and running of simulations, scott baden for his assistance in vectorizing our code for the cray y-mp, the division of engineering block grant for time on the cray at the san diego supercomputer center, and the members of the pdpnlp and guru research groups at ucsd for helpful comments on earlier versions of this work. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1483",
        "graph": {
            "node_idx": 1483,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    8,
                    3,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    4,
                    6,
                    6
                ]
            ],
            "node_list": [
                1483,
                3318,
                16942,
                17003,
                3319,
                18480,
                4666,
                18725,
                16751,
                10447
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: top-down gaze targeting for space-variant active visionin this paper, we describe the use of iconic scene descriptions for top-down foveal targeting. these descriptions take the form of a vector of responses of a bank of steerable filters at multiple scales and orientations. such a representation has a number of useful properties such as rotation and scale invariance, partial view-insensitivity and tolerance to occlusions. top-down control of gaze for uniform resolution sensors is achieved by the process of backpro-jection which matches vectors of a previously foveated point to instances of the point in other possibly transformed images. the multiscale structure of representation can be exploited to extend this procedure to the space-variant case. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_1486",
        "graph": {
            "node_idx": 1486,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    1,
                    36,
                    27
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                1486,
                16793,
                3633,
                10053,
                2188,
                996,
                24708,
                25020,
                3554,
                5004,
                3634,
                5006,
                19553,
                10033,
                19034,
                14967,
                16607,
                17882,
                18036,
                3296,
                18364,
                5245,
                11484,
                11483,
                11911,
                10175,
                19001,
                4638,
                7661,
                1273,
                10559,
                20082,
                9609,
                20135,
                23947,
                9691,
                16997
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: factorial learning and the em algorithmmany real world learning problems are best characterized by an interaction of multiple independent causes or factors. discovering such causal structure from the data is the focus of this paper. based on zemel and hinton's cooperative vector quantizer (cvq) architecture, an unsupervised learning algorithm is derived from the expectation-maximization (em) framework. due to the combinatorial nature of the data generation process, the exact e-step is computationally intractable. two alternative methods for computing the e-step are proposed: gibbs sampling and mean-field approximation, and some promising empirical results are presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_1490",
        "graph": {
            "node_idx": 1490,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    2,
                    8,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    4,
                    8,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5
                ]
            ],
            "node_list": [
                1490,
                16542,
                1491,
                3373,
                21979,
                10393,
                18100,
                18405,
                19298,
                12749,
                12709,
                22011,
                9175,
                11329,
                8120,
                13737,
                6388,
                14076,
                7555
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evaluation of tcp vegas: emulation and experimentthis paper explores the claims that tcp vegas [2] both uses network bandwidth more efficiently and achieves higher network throughput than tcp reno [6]. it explores how link bandwidth, network buffer capacity, tcp receiver acknowledgment algorithm, and degree of network congestion affect the relative performance of vegas and reno. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_1499",
        "graph": {
            "node_idx": 1499,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    2,
                    9,
                    10,
                    12,
                    13,
                    4,
                    2,
                    3,
                    14,
                    9,
                    15,
                    16,
                    5,
                    3,
                    2,
                    17,
                    0,
                    9,
                    15,
                    18,
                    14,
                    19,
                    1,
                    11,
                    4,
                    2,
                    20,
                    21,
                    9,
                    10,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1499,
                6091,
                3804,
                5054,
                7593,
                6704,
                2221,
                7596,
                17891,
                9789,
                2223,
                7921,
                7601,
                5056,
                24626,
                8335,
                1500,
                2224,
                7592,
                22602,
                18198,
                7595,
                8424
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a general framework for semantics-based bottom-up abstract interpretation of logic programsthe theory of abstract interpretation provides a formal framework to develop advanced dataflow analysis tools. the idea is to define a non-standard semantics which is able to compute, in finite time, an approximated model of the program. in this paper we define an abstract interpretation framework based on a fixpoint approach to the semantics. this leads to the definition, by means of a suitable set of operators, of an abstract fixpoint characterization of a -model associated with the program. thus, we obtain a specializable abstract framework for bottom-up abstract interpretations of definite logic programs. the specialization of the framework is shown on two examples, namely ground dependence analysis and depth-k analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_1501",
        "graph": {
            "node_idx": 1501,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    16,
                    3,
                    25,
                    1,
                    26,
                    12,
                    27,
                    28,
                    6,
                    29,
                    23,
                    9,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    8,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                1501,
                5865,
                221,
                8366,
                720,
                12016,
                12357,
                3936,
                2061,
                20990,
                21169,
                1502,
                24881,
                12050,
                20522,
                12364,
                3837,
                17249,
                4916,
                8160,
                21798,
                12059,
                6678,
                20743,
                13843,
                222,
                175,
                20476,
                9695,
                12359,
                2802,
                11916,
                25056,
                7441,
                25102,
                5846,
                6346,
                24562,
                2077,
                18370,
                24198,
                24918,
                24681,
                24951,
                13037,
                4557,
                3011
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a hierarchical protocol for coordinating multiagent behaviors. toward an architecture for adaptive, rational, mobile agentspga86] david l. poole, randy g. goebel, and romas aleliunas. theorist: a logical reasoning system for defaults and diagnosis. research report cs-86-06, university of waterloo, waterloo, ont., february 1986. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_1521",
        "graph": {
            "node_idx": 1521,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    4,
                    8,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    0,
                    36,
                    37,
                    4,
                    1,
                    5,
                    7,
                    8,
                    38,
                    1,
                    8,
                    39
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    8
                ]
            ],
            "node_list": [
                1521,
                1520,
                12364,
                6340,
                2076,
                8275,
                2980,
                9718,
                16045,
                3146,
                1371,
                18302,
                1370,
                924,
                3474,
                2536,
                20748,
                8160,
                7508,
                2970,
                8480,
                20470,
                3002,
                24881,
                12362,
                12967,
                7688,
                16595,
                11641,
                2077,
                17276,
                2078,
                3010,
                19825,
                19833,
                23711,
                3837,
                3145,
                20734,
                15175
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: coalition, cryptography, and stability: mechanisms for coalition formation in task oriented domainsin some domains, however, it may be possible for beneficial agreements to be reached among sub-groups of agents, who might be individually motivated to work together to the exclusion of others outside the group. this paper considers this more general case of n-agent coalition formation. we present a simple coalition formation mechanism that uses cryptographic techniques for subadditive task oriented domains. the mechanism is efficient, symmetric, and individual rational. when the domain is also concave, the mechanism also satisfies coalition rationality. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_1544",
        "graph": {
            "node_idx": 1544,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    6,
                    13,
                    14,
                    2,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    8,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    11,
                    28,
                    29,
                    9,
                    30,
                    16,
                    22,
                    31,
                    18,
                    32,
                    33,
                    34
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1544,
                19540,
                8979,
                12120,
                1459,
                24768,
                4645,
                22223,
                22401,
                12536,
                1881,
                205,
                202,
                20582,
                8318,
                24139,
                1055,
                22357,
                8088,
                22456,
                7261,
                10767,
                24225,
                17354,
                1049,
                7496,
                9110,
                24573,
                13801,
                12540,
                20998,
                15499,
                12644,
                22471,
                14145
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reducing indirect function call overhead in c++ programsmodern computer architectures increasingly depend on mechanisms that estimate future control flow decisions to increase performance. mechanisms such as speculative execution and prefetching are becoming standard architectural mechanisms that rely on control flow prediction to prefetch and speculatively execute future instructions. at the same time, computer programmers are increasingly turning to object-oriented languages to increase their productivity. these languages commonly use run time dispatching to implement object polymorphism. dispatching is usually implemented using an indirect function call, which presents challenges to existing control flow prediction techniques. we have measured the occurrence of indirect function calls in a collection of c++ programs. we show that, although it is more important to predict branches accurately, indirect call prediction is also an important factor in some programs and will grow in importance with the growth of object-oriented programming. we examine the improvement offered by compile-time optimizations and static and dynamic prediction techniques, and demonstrate how compilers can use existing branch prediction mechanisms to improve performance in c++ programs. using these methods with the programs we examined, the number of instructions between mispredicted breaks in control can be doubled on existing computers. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_1556",
        "graph": {
            "node_idx": 1556,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    8,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    11,
                    1,
                    32,
                    2,
                    33,
                    34,
                    35,
                    6,
                    36,
                    34,
                    7,
                    37,
                    38
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1556,
                8353,
                17302,
                205,
                22559,
                1624,
                23255,
                3690,
                14755,
                6397,
                21422,
                7428,
                17728,
                12179,
                19638,
                24225,
                7404,
                8088,
                12536,
                212,
                24388,
                4421,
                8693,
                1350,
                17630,
                18220,
                11565,
                24292,
                4761,
                1393,
                20189,
                17739,
                17304,
                7427,
                22560,
                5897,
                56,
                24359,
                4280
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: object-oriented multi-methods in cecilmultiple dispatching provides increased expressive power over single dispatching by guiding method lookup using the values of all arguments instead of only the receiver. however, existing languages with multiple dispatching do not encourage the data-abstraction-oriented programming style that is encouraged by traditional single-dispatching languages; instead existing multiple-dispatching languages tend to foster a function-oriented programming style organized around generic functions. we propose an alternative view of multiple dispatching that is intended to promote a data-abstraction-oriented programming style. instead of viewing a multi-method as outside of all objects, we view a multi-method as inside the objects for which the multi-method applies (on which it dispatches). because objects are closely connected to the multi-methods implementing their operations, the internals of an object can be encapsulated by being accessible only to the closely-connected multi-methods. we are exploring this object-oriented view of multi-methods in the context of a new programming language named cecil. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_1561",
        "graph": {
            "node_idx": 1561,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                1561
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: generalized fair reachability analysis for cyclic protocolsin this paper, the notion of fair reachability is generalized to cyclic protocols with n 2 machines. substantial state reduction can be achieved via fair progress state exploration. it is shown that the fair reachable state space is exactly the set of reachable states with equal channel length. as a result, deadlock detection is decidable for p, the class of cyclic protocols whose fair reachable state spaces are finite. the concept of simultaneous unboundedness is defined and the lack of it is shown to be a necessary and sufficient condition for a protocol to be in p. through finite extension of the fair reachable state space, it is also shown that detection of unspecified receptions, unboundedness, and nonexecutable transitions are all decidable for p. furthermore, it is shown that any protocol p is logically correct if and only if there is no logical error in its fair reachable state space. this study shows that for the class p, our generalized fair reachability analysis technique not only achieves substantial state reduction but also maintains very competitive logical error coverage. therefore, it is a very useful technique to prove logical correctness for a wide variety of cyclic protocols. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_1562",
        "graph": {
            "node_idx": 1562,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    0,
                    0,
                    3,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                1562,
                373,
                9075,
                9073,
                18611,
                16458
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the limits of non-approximability of lattice problems thus, it seems unlikely that approximating thesewe show simple constant-round interactive proof systems for problems capturing the approx imability, to within a factor of p n, of optimization problems in integer lattices; specifically, the closest vector problem (cvp), and the shortest vector problem (svp). these interactive proofs are for the \"conp direction\"; that is, we give an interactive protocol showing that a vector is \"far\" from the lattice (for cvp), and an interactive protocol showing that the shortest-lattice-vector is \"long\" (for svp). furthermore, these interactive proof systems are honest-verifier perfect zero-knowledge. we conclude that approximating cvp (resp., svp) within a factor of p \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_1565",
        "graph": {
            "node_idx": 1565,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                1565,
                1564,
                12678,
                21016,
                10320,
                13719,
                21703,
                21947,
                272,
                23066,
                15885,
                15886
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: addressing partitioned arrays in distributed memory multiprocessors the software virtual memory approachpartitioning distributed arrays to ensure locality of reference is widely recognized as being critical in obtaining good performance on distributed memory multiprocessors. data partitioning is the process of tiling data arrays and placing the tiles in memory such that a maximum number of data accesses are satisfied from local memory. unfortunately, data partitioning makes it difficult to physically locate an element of a distributed array. data tiles with complicated shapes, such as hyperparallelepipeds, exacerbate this addressing problem. in this paper we propose a simple scheme called software virtual memory that allows flexible addressing of partitioned arrays with low runtime overhead. software virtual memory implements address translation in software using small, one-dimensional pages, and a compiler-generated software page map. because page sizes are chosen by the compiler, arbitrarily complex data tiles can be used to maximize locality, and because the pages are one-dimensional, runtime address computations are simple and efficient. one-dimensional pages also ensure that software virtual memory is more efficient than simple blocking for rectangular data tiles. software virtual memory provides good locality for complicated compile-time partitions, thus enabling the use of sophisticated partitioning schemes appearing in recent literature. software virtual memory can also be used in systems that provide hardware support for virtual memory. although hardware virtual memory, when used exclusively, eliminates runtime overhead for addressing, we demonstrate that it does not preserve locality of reference to the same extent as software virtual memory. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_1579",
        "graph": {
            "node_idx": 1579,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    1,
                    10,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3,
                    6,
                    8,
                    8
                ]
            ],
            "node_list": [
                1579,
                16548,
                16786,
                3498,
                24394,
                24428,
                1580,
                24850,
                4319,
                16780,
                1473,
                17196,
                20242,
                9814,
                18336
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: software synthesis for dsp using ptolemy, journal of vlsi signal processing to appear in specialscheduler. hence all of the inputs must be available before the cluster fires. furthermore, none of the outputs will be available until a cluster schedule iteration is completed. we are investigating cyclo-static dataow [17] as a method to eliminate the variance in makespans. in cyclo-static dataow, each actor firing has distinct phases. each phase produces and consumes a fixed amount of data at each input and output. the cluster schedule could then be expressed in schedule phases, thereby allowing part of the cluster to fire as soon as some of the input was available (versus waiting for all of the input for all of the phases). in this paper, we have introduced a hierarchical scheduling framework for sdf graphs being mapped onto multiple processors. this framework can drastically reduce the number of nodes present in the final dag graph, which is used for parallel scheduling. we have shown a practical example where this scheduling technique has greatly improved the final schedule. we plan to augment the sdf graph clustering techniques by specializing some of the dag clustering heuristics found in multiprocessor schedulers for direct use on the sdf graph. the objective is to hide only that parallelism that would not be exploited anyway, and in doing so, simplifying the dag. [1] j. buck, s. ha, e. a. lee, and d. g. messerschmitt, ptolemy: a framework for simulating and prototyping heterogeneous systems, international journal of computer simulation, special issue on simulation software development, vol. 4, pp. 155-182, 1994. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_1584",
        "graph": {
            "node_idx": 1584,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    6,
                    17,
                    7,
                    18,
                    19,
                    20,
                    21,
                    16,
                    5,
                    22,
                    23,
                    24,
                    25,
                    7,
                    26,
                    20,
                    21,
                    27,
                    6,
                    28,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                1584,
                16549,
                9936,
                7534,
                20619,
                13737,
                6388,
                8230,
                14325,
                23168,
                23750,
                7374,
                688,
                4603,
                16073,
                16211,
                13736,
                8691,
                21724,
                18219,
                21727,
                13739,
                22129,
                23885,
                13738,
                18360,
                14132,
                10364,
                21781
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on resource management and qos guarantees for long range dependent trafficit has been known for several years now that variable-bit-rate video sources are strongly auto-correlated. recently, several studies have indicated that the resulting stochastic processes exhibit long-range dependence properties. this implies that large buffers at intermediate switching points may not provide adequate delay performance for such classes of traffic in broadband packet-switched networks (such as atm). in this paper, we study the effect of long-memory processes on queue length statistics of a single queue system through a controlled fractionally differenced arima(1; d; 0) input process. this process has two parameters 1 (0 1 1) and d (0 d &lt; 1=2) representing an auto-regressive component and a long-range dependent component, respectively. results show that the queue length statistics studied (mean, variance and the 0:999 quantile) are proportional to e c 1 1 e c 2 d ; where (c 1 ; c 2 ) are positive constants, and c 2 &gt; c 1 : the effect of the auto-correlation structure on queue length statistics is also critically dependent on the tail of the distribution of the input process. therefore, multiplexing gains can be achieved for long-range dependent processes because the resulting process has a tighter tail distribution. given these observations, and the need to provide guaranteed maximum-delay and delay-jitter bounds, and low cell-loss probabilities to applications, the solution appears to be (a) allocating higher rates if the distribution tails are large, (b) using multiplexing to narrow these tails, (c) applying a per circuit frame-clock in conjunction with an active cell-discard strategy to deal with long-range dependence. strategy (c) is a version of the stop and go queueing that does not require tight deterministic rate specifications, but provides maximum-delay and delay-jitter bounds over multiple hops as in the original proposal. the combined strategy is a hybrid between packet switching and circuit switching technology. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_1601",
        "graph": {
            "node_idx": 1601,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    14,
                    22,
                    30,
                    23,
                    6,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    24,
                    26,
                    2,
                    39,
                    6,
                    24,
                    26,
                    40,
                    41,
                    22,
                    4,
                    0,
                    42,
                    24,
                    43,
                    10,
                    44,
                    45,
                    46,
                    4,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1601,
                4662,
                1595,
                16767,
                1598,
                38,
                10400,
                1602,
                15994,
                5731,
                5991,
                874,
                15322,
                9184,
                5921,
                7051,
                8017,
                6208,
                4879,
                8715,
                6861,
                16807,
                16057,
                18661,
                19302,
                693,
                19992,
                1408,
                2898,
                1606,
                2899,
                7266,
                3820,
                9603,
                39,
                17018,
                3263,
                37,
                40,
                1608,
                8015,
                9778,
                826,
                19838,
                3819,
                18863,
                18892
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: exact identification of read-once formulas using fixed points of amplification functionsin this paper we describe a new technique for exactly identifying certain classes of read-once boolean formulas. the method is based on sampling the input-output behavior of the target formula on a probability distribution which is determined by the fixed point of the formula's amplification function (defined as the probability that a 1 is output by the formula when each input bit is 1 independently with probability p). by performing various statistical tests on easily sampled variants of the fixed-point distribution, we are able to efficiently infer all structural information about any logarithmic-depth formula (with high probability). we apply our results to prove the existence of short universal identification sequences for large classes of formulas. we also describe extensions of our algorithms to handle high rates of noise, and to learn formulas of unbounded depth in valiant's model with respect to specific distributions. fl most of this research was carried out while all three authors were at m.i.t. laboratory for computer science. support was provided by nsf grant ccr-88914428, aro grant daal03-86-k-0171, darpa contract n00014-89-j-1988, and a grant from the siemens corporation. an extended abstract of this paper appeared in the proceedings of the 31st annual symposium on foundations of computer science. y supported in part by a g.e. foundation junior faculty grant. z supported by afosr grant afosr-89-0506. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_1607",
        "graph": {
            "node_idx": 1607,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    1,
                    12,
                    0,
                    13,
                    14,
                    7,
                    15,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    6,
                    6
                ]
            ],
            "node_list": [
                1607,
                17858,
                2409,
                22533,
                23244,
                19571,
                6286,
                23248,
                7521,
                2407,
                17191,
                4888,
                2420,
                4413,
                15547,
                2299
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: moving furniture with teams of autonomous robotswe wish to organize furniture in a room with a team of robots that can push objects. we show how coordinated pushing by robots can change the pose (position and orientation) of objects and then we ask whether planning, global control, and explicit communication are necessary for cooperatively changing the pose of objects. we answer in the negative and present, as witnesses, four cooperative manipulation protocols that use different amount of state, sensing, and communication. we analyze these protocols in the information invariant framework. we formalize the notion of resource tradeoffs for robot protocols and give the tradeoffs for the specific protocols discussed here. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_1609",
        "graph": {
            "node_idx": 1609,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    11,
                    12,
                    13,
                    14,
                    7,
                    15,
                    16,
                    17,
                    18,
                    11,
                    3,
                    19,
                    20,
                    21,
                    22,
                    23,
                    4,
                    24,
                    13,
                    11,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                1609,
                3283,
                2074,
                2970,
                3284,
                18766,
                24200,
                14809,
                12093,
                4465,
                11915,
                21026,
                2534,
                12827,
                2205,
                20485,
                16595,
                2999,
                9172,
                17906,
                17276,
                12967,
                14630,
                23197,
                20745,
                22614,
                20560,
                16971,
                17858,
                18674,
                2409,
                1607,
                22533,
                23244,
                23246,
                23248,
                11916
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an adaptive communication protocol for cooperating mobile robotswe describe mobile robots engaged in a cooperative task that requires communication. the robots are initially given a fixed but uninterpreted vocabulary for communication. in attempting to perform their task, the robots learn a private communication language. different meanings for vocabulary elements are learned in different runs of the experiment. as circumstances change, the robots adapt their lan guage to allow continued success at their task. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_1610",
        "graph": {
            "node_idx": 1610,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                1610,
                16550,
                7712,
                7747,
                7746,
                434,
                16460,
                18466
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: neural models for part-whole hierarchieswe present a connectionist method for representing images that explicitly addresses their hierarchical nature. it blends data from neu-roscience about whole-object viewpoint sensitive cells in inferotem-poral cortex 8 and attentional basis-field modulation in v4 3 with ideas about hierarchical descriptions based on microfeatures. 5, 11 the resulting model makes critical use of bottom-up and top-down pathways for analysis and synthesis. 6 we illustrate the model with a simple example of representing information about faces. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1618",
        "graph": {
            "node_idx": 1618,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    8,
                    9,
                    0,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4
                ]
            ],
            "node_list": [
                1618,
                1992,
                1999,
                8609,
                9083,
                20861,
                16586,
                6698,
                3871,
                1998,
                19896,
                20562,
                19797,
                6,
                11959,
                4737,
                9310,
                16207,
                20560,
                12093,
                20782,
                5920,
                18416
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: pruning recurrent neural networks for improved generalization performancedetermining the architecture of a neural network is an important issue for any learning task. for recurrent neural networks no general methods exist that permit the estimation of the number of layers of hidden neurons, the size of layers or the number of weights. we present a simple pruning heuristic which significantly improves the generalization performance of trained recurrent networks. we illustrate this heuristic by training a fully recurrent neural network on positive and negative strings of a regular grammar. we also show that if rules are extracted from networks trained to recognize these strings, that rules extracted after pruning are more consistent with the rules to be learned. this performance improvement is obtained by pruning and retraining the networks. simulations are shown for training and pruning a recurrent neural net on strings generated by two regular grammars, a randomly-generated 10-state grammar and an 8-state triple parity grammar. further simulations indicate that this pruning method can gives generalization performance superior to that obtained by training with weight decay. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1633",
        "graph": {
            "node_idx": 1633,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                1633,
                656,
                6735,
                8286,
                6742,
                18090,
                16793,
                13640,
                17942,
                18936,
                15822,
                10101,
                17579,
                10938,
                17544,
                9522,
                24787,
                2532,
                24846,
                8285,
                10442,
                13180,
                9778
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: structured machine learning for `soft' classification with smoothing spline anova and stacked tuning, testing and1 to appear in cowan, j., tesauro, g., and alspector, j. (eds.), advances in neural information processing systems 6. san francisco, ca: morgan kaufmann publishers. this paper has been written tersely to accomodate an 8 page limitation. presented as a (refereed) poster session at the 1993 conference on neural information processing systems-natural and synthetic, november 29, denver, co. supported by the nsf under grants dms-9121003 and dms-9301511, and by the national eye institute-nih under grants ey09946 and ey03083 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1652",
        "graph": {
            "node_idx": 1652,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    2,
                    15,
                    1,
                    16,
                    4,
                    17,
                    12,
                    11,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    21,
                    22,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1652,
                17541,
                24143,
                9147,
                24823,
                1648,
                20060,
                7698,
                5116,
                779,
                9651,
                9149,
                12785,
                2169,
                23529,
                15746,
                9998,
                14028,
                17839,
                7701,
                7702,
                10872,
                9010,
                2814,
                8361,
                15747,
                7699,
                13460,
                17727,
                24151,
                17020,
                4074,
                13776,
                5225,
                4465,
                16576,
                561,
                23462,
                9652,
                2859,
                2403
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the effects of mobility on reliable transport protocolswe explore the effects of host motion on the performance of active transport-level connections. motion causes increased delays and packet losses while the network learns how to route data to a host's new location. reliable transport protocols interpret these delays and losses as signs of network congestion. they consequently throttle their transmissions, further degrading performance. we quantify this degradation through measurements of protocol behavior in a wireless networking testbed. we show how current retransmission policies introduce unacceptably long pauses in communication (800 milliseconds and longer), and propose an end-to-end fast retransmission scheme that can reduce these pauses to levels more suitable for human interaction (200 milliseconds). our work demonstrates that reliable transport protocols must be made aware of mobility, and suggests how to adapt these protocols to mobile computing environments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_1659",
        "graph": {
            "node_idx": 1659,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    5,
                    12,
                    13,
                    14,
                    6,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    4,
                    7,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1659,
                18851,
                15416,
                13331,
                8085,
                13332,
                21707,
                13727,
                19850,
                5408,
                20186,
                23290,
                21710,
                24967,
                11620
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: light field renderinga number of techniques have been proposed for ying through scenes by redisplaying previously rendered or digitized views. techniques have also been proposed for interpolating between views by warping input images, using depth information or correspondences between multiple images. in this paper, we describe a simple and robust method for generating new views from arbitrary camera positions without depth information or feature matching, simply by combining and resampling the available images. the key to this technique lies in interpreting the input images as 2d slices of a 4d function - the light field. this function completely characterizes the ow of light through unobstructed space in a static scene with fixed illumination. we describe a sampled representation for light fields that allows for both efficient creation and display of inward and outward looking views. we hav e created light fields from large arrays of both rendered and digitized images. the latter are acquired using a video camera mounted on a computer-controlled gantry. once a light field has been created, new views may be constructed in real time by extracting slices in appropriate directions. since the success of the method depends on having a high sample rate, we describe a compression system that is able to compress the light fields we have generated by more than a factor of 100:1 with very little loss of fidelity. we also address the issues of antialiasing during creation, and resampling during slice extraction. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_1661",
        "graph": {
            "node_idx": 1661,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7,
                    8,
                    5,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                1661,
                4585,
                18448,
                13850,
                4575,
                18060,
                4590,
                19844,
                16992,
                19036,
                24804,
                19697
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: detecting, localizing and grouping repeated scene elements from an imagethis paper presents an algorithm for detecting, localizing and grouping instances of repeated scene elements. the grouping is represented by a graph where nodes correspond to individual elements and arcs join spatially neighboring elements. associated with each arc is an affine map that best transforms the image patch at one location to the other. the approach we propose consists of 4 steps: (1) detecting \"interesting\" elements in the image; (2) matching elements with their neighbors and estimating the affine transform between them; (3) growing the element to form a more distinctive unit; and (4) grouping the elements. the idea is analogous to tracking in dynamic imagery. in our context, we \"track\" an element to spatially neighboring locations in one image, while in temporal tracking, one would perform the search in neighboring image frames. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_1686",
        "graph": {
            "node_idx": 1686,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    1,
                    7,
                    9,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    5
                ]
            ],
            "node_list": [
                1686,
                5760,
                1027,
                7746,
                19105,
                10958,
                1030,
                7713,
                7747,
                436,
                8216,
                8994,
                7712,
                19774
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: canonical views in object representation and recognitionhuman performance in the recognition of 3d objects, as measured by response times and error rates, frequently depends on the orientation of the object with respect to the observer. we investigated the dependence of response time (rt) and error rate (er) on stimulus orientation for a class of random wire-like objects. first, we found no evidence for universally valid canonical views: the best view according to one subject's data was often hardly recognized by other subjects. second, a subject by subject analysis showed that the rt/er scores were not linearly dependent on the shortest angular distance in 3d to the best view, as predicted by the mental rotation theories of recognition. rather, the performance was significantly correlated with an image-plane feature by feature deformation distance between the presented view and the best (shortest-rt and lowest-er) view. our results suggest that measurement of image-plane similarity to a few (subject-specific) feature patterns is a better model than mental rotation for the mechanism used by the human visual system to recognize objects across changes in their 3d orientation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_1687",
        "graph": {
            "node_idx": 1687,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    2,
                    12,
                    13,
                    14,
                    12,
                    15,
                    5,
                    16,
                    1,
                    2,
                    13,
                    17,
                    18,
                    16,
                    1,
                    2,
                    19,
                    3,
                    12,
                    17,
                    13,
                    20,
                    21,
                    1,
                    3,
                    4,
                    7,
                    9,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9
                ]
            ],
            "node_list": [
                1687,
                5760,
                7713,
                1027,
                7746,
                434,
                6113,
                19105,
                1686,
                10958,
                18466,
                1030,
                7747,
                436,
                8216,
                8167,
                8994,
                7712,
                16460,
                435,
                12732,
                17368,
                19774
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: class similarity and viewpoint invariance in the recognition of 3d objectsin human vision, the processes and the representations involved in identifying specific individuals are frequently assumed to be different from those used for basic-level classification, because classification is largely viewpoint-invariant, but identification is not. this assumption was tested in psychophysical experiments, in which objective similarity between stimuli (and, consequently, the level of their distinction) varied in a controlled fashion. subjects were trained to discriminate between two classes of computer generated 3d objects, one resembling monkeys, and the other dogs. both classes were defined by the same set of 56 parameters, which encoded sizes, shapes, and placement of the limbs, the ears, the snout, etc. interpolation between parameter vectors of the class prototypes yielded shapes that changed smoothly between monkey and dog. within-class variation was induced in each trial by randomly perturbing all the parameters. after the subjects reached 90% correct performance on a fixed canonical view of each object, discrimination performance was tested for novel views that differed by up to 60 ffi from the training view. in experiment 1 (in which the distribution of parameters in each class was unimodal) and in experiment 2 (bimodal classes), the stimuli differed only parametrically and consisted of the same geons (parts), yet were recognized virtually independently of viewpoint in the low-similarity condition. in experiment 3, the prototypes differed in their complement of geons, yet the subjects' performance depended significantly on viewpoint in the high-similarity condition. in all three experiments, higher inter-stimulus similarity was associated with an increase in the mean error rate and, for misorientation of up to 45 ffi , with an increase in the degree of viewpoint dependence. these results suggest that a geon-level difference between stimuli is neither strictly necessary nor sufficient for viewpoint-invariant performance. thus, the standard characterization of basic and subordinate-level processes in visual recognition may need a revision. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_1688",
        "graph": {
            "node_idx": 1688,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    11,
                    24,
                    25,
                    1,
                    26,
                    9,
                    13,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    12,
                    26,
                    35,
                    36,
                    37
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1688,
                5760,
                17941,
                12408,
                21243,
                1935,
                435,
                14697,
                15158,
                7712,
                1030,
                7713,
                7747,
                436,
                8216,
                20788,
                2861,
                11522,
                1936,
                2386,
                12707,
                15188,
                6782,
                13443,
                8538,
                3408,
                7746,
                1687,
                19880,
                432,
                22523,
                15558,
                7163,
                23247,
                22902,
                434,
                16460,
                18466
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the geometry of graphs and some of its algorithmic applicationsin this paper we explore some implications of viewing graphs as geometric objects. this approach offers a new perspective on a number of graph-theoretic and algorithmic problems. there are several ways to model graphs geometrically and our main concern here is with geometric representations that respect the metric of the (possibly weighted) graph. given a graph g we map its vertices to a normed space in an attempt to (i) keep down the dimension of the host space, and (ii) guarantee a small distortion, i.e., make sure that distances between vertices in g closely match the distances between their geometric images. in this paper we develop efficient algorithms for embedding graphs low-dimensionally with a small distortion. further algorithmic applications include: * a simple, unified approach to a number of problems on multicommodity flows, including the leighton-rao theorem [37] and some of its extensions. we solve an open question in this area, showing that the max-flow vs. min-cut gap in the k-commodities problem is o(log k). our new deterministic polynomial-time algorithm finds a (nearly tight) cut meeting this bound. * for graphs embeddable in low-dimensional spaces with a small distortion, we can find low-diameter decompositions (in the sense of [7] and [43]). the parameters of the decomposition depend only on the dimension and the distortion and not on the size of the graph. given faithful low-dimensional representations of statistical data, it is possible to obtain meaningful and efficient clustering. this is one of the most basic tasks in pattern-recognition. for the (mostly heuristic) methods used in the practice of pattern-recognition, see [20], especially chapter 6. our studies of multicommodity flows also imply that every embedding of (the metric of) an n-vertex, constant-degree expander into a euclidean space (of any dimension) has distortion (log n). this result is tight, and closes a gap left open by bourgain [12]. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_1689",
        "graph": {
            "node_idx": 1689,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    2,
                    3,
                    6,
                    8,
                    9,
                    10,
                    11,
                    12,
                    3,
                    13,
                    14,
                    15,
                    8,
                    16,
                    17,
                    6,
                    14,
                    18,
                    10,
                    1,
                    3,
                    8,
                    19,
                    20,
                    17,
                    21,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    7
                ]
            ],
            "node_list": [
                1689,
                5760,
                1030,
                7713,
                1027,
                12305,
                7747,
                6113,
                436,
                8216,
                8994,
                1033,
                841,
                2772,
                8167,
                5924,
                4267,
                7712,
                434,
                12306,
                18505,
                22909,
                17368
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: representation of similarity as a goal of early visual processingwe consider the representational capabilities of systems of receptive fields found in early mammalian vision, under the assumption that the successive stages of processing remap the retinal representation space in a manner that makes objectively similar stimuli (such as different views of the same 3d object) closer to each other, and dissimilar stimuli farther apart. we present theoretical analysis and computational experiments that compare the similarity between stimuli as they are represented at the successive levels of the processing hierarchy, from the retina to the nonlinear cortical units. our results indicate that the representations at the higher levels of the hierarchy are indeed more useful for the classification of natural objects such as human faces. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_1690",
        "graph": {
            "node_idx": 1690,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    2,
                    8,
                    9,
                    10,
                    8,
                    11,
                    12,
                    13,
                    2,
                    1,
                    12,
                    14,
                    15,
                    16,
                    17,
                    18,
                    3,
                    19,
                    20,
                    21,
                    4,
                    22,
                    23,
                    6,
                    24,
                    25,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                1690,
                5760,
                7713,
                435,
                18523,
                19105,
                1059,
                1030,
                7747,
                436,
                8216,
                8167,
                434,
                16460,
                18753,
                3408,
                1689,
                1687,
                1027,
                13644,
                1060,
                15285,
                1062,
                19326,
                23009,
                24083,
                15294
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: models of perceptual learning in vernier hyperacuityperformance of human subjects in a wide variety of early visual processing tasks improves with practice. hyperbf networks (poggio and girosi, 1990) constitute a mathematically well-founded framework for understanding such improvement in performance, or perceptual learning, in the class of tasks known as visual hyperacuity. the present article concentrates on two issues raised by the recent psychophysical and computational findings reported in (poggio et al., 1992b; fahle and edelman, 1992). first, we develop a biologically plausible extension of the hyperbf model that takes into account basic features of the functional architecture of early vision. second, we explore various learning modes that can coexist within the hyperbf framework and focus on two unsupervised learning rules which may be involved in hyperacuity learning. finally, we report results of psychophysical experiments that are consistent with the hypothesis that activity-dependent presynaptic amplification may be involved in perceptual learning in hyperacuity. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1715",
        "graph": {
            "node_idx": 1715,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4
                ]
            ],
            "node_list": [
                1715,
                5417,
                486,
                17540,
                11111,
                16965,
                6449,
                16629,
                3525,
                6448,
                16463,
                5415,
                6244,
                6039,
                3057,
                24885
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the prodigy user interfacethe prodigy user interface supports the process of both building and running a planning domain in prodigy. it was designed to be highly modular, requiring no changes to the code of the prodigy planner to run, and extensible, so that interfaces to other modules built on prodigy could easily be integrated into the interface. in this paper we describe how these goals were achieved. we demonstrate building a domain and animating the planning process. we describe extensions to the user interface to support planning by analogical reasoning and probabilistic planning with prodigy. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_1717",
        "graph": {
            "node_idx": 1717,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    7,
                    8,
                    9,
                    10,
                    3,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                1717,
                5417,
                5416,
                17719,
                6009,
                19945,
                486,
                11111,
                9363,
                18418,
                18589,
                24680,
                8061,
                6004
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: exploiting domain geometry in analogical route planning running head: exploiting geometry in analogical route planningautomated route planning consists of using real maps to automatically find good map routes. two shortcomings to standard methods are (i) that domain information may be lacking, and (ii) that a \"good\" route can be hard to define. most on-line map representations do not include information that may be relevant for the purpose of generating good realistic routes, such as traffic patterns, construction, and one-way streets. the notion of a good route is dependent not only on geometry (shortest path), but also on a variety of other factors, such as the day and time, weather conditions, and perhaps most importantly, user-dependent preferences. these features can be learned by evaluating real-world execution experience. these difficulties motivate our work on applying analogical reasoning to route planning. analogical reasoning is a method of using past experience to improve problem solving performance in similar new situations. our approach consists of the accumulation and reuse of previously traversed routes. we exploit the geometric characteristics of the map domain in the storage, retrieval, and reuse phases of the analogical reasoning process. our route planning method retrieves and reuses multiple past routing cases that collectively form a good basis for generating a new routing plan. to find a good set of past routes, we have designed a similarity metric that takes into account the geometric and continuous-valued characteristics of a city map. the metric evaluates its own performance and uses execution experience to improve its prediction of case similarity, adaptability and executability. we present the replay mechanism that the planner uses to produce a route plan based on analogy with past routes retrieved by the similarity metric. we use illustrative examples and show some empirical results from a detailed on-line map of the city of pittsburgh, containing over 18,000 intersections and 25,000 street segments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_1718",
        "graph": {
            "node_idx": 1718,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    2,
                    7,
                    7,
                    19,
                    2,
                    7,
                    2,
                    5,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                1718,
                2848,
                20656,
                6890,
                12249,
                12247,
                12246,
                20658,
                24264,
                7062,
                2072,
                172,
                24728,
                19561,
                5710,
                6203,
                14422,
                22673,
                6814,
                11998
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: integrating diverse information repositories: a distributed hypertext approach 1today's networked software engineering environment is characterized by a multitude of autonomous, heterogeneous information repositories, a variety of incompatible user interfaces, diverse, unconventional data types, including text, graphics, and possibly video and sound, rapid change, both in structure and content, and multiple ways of viewing relationships among the same information items. existing information storage mechanisms fail to combine diverse data types/models, complex objects and storage structures, personal views and organizations of shared objects, access to distributed, heterogeneous repositories, and ease of evolution. this paper examines these issues and describes a distributed hypertext architecture that provides transparent access to autonomous, heterogeneous software object repositories, resulting in both a powerful organizational tool and a simple yet effective integration mechanism. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_1733",
        "graph": {
            "node_idx": 1733,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    0,
                    11,
                    2,
                    4,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    3,
                    25,
                    4,
                    26,
                    27,
                    28,
                    29,
                    5,
                    30,
                    31,
                    10,
                    32,
                    33,
                    34,
                    7,
                    35,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    9
                ]
            ],
            "node_list": [
                1733,
                17469,
                1734,
                3867,
                989,
                9702,
                8092,
                5174,
                15413,
                12871,
                421,
                10652,
                2183,
                7142,
                3814,
                9391,
                8933,
                4684,
                22924,
                22978,
                3679,
                17091,
                2559,
                2910,
                6797,
                3748,
                2911,
                20994,
                2646,
                13672,
                9703,
                4002,
                4001,
                19650,
                3653,
                1639,
                13717
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: compiling array expressions for efficient execution on distributed-memory machinesarray statements are often used to express data-parallelism in scientific languages such as fortran 90 and high performance fortran. in compiling array statements for a distributed-memory machine, efficient generation of communication sets and local index sets is important. we show that for arrays distributed block-cyclically on multiple processors, the local memory access sequence and communication sets can be efficiently enumerated as closed forms using regular sections. first, closed form solutions are presented for arrays that are distributed using block or cyclic distributions. these closed forms are then used with a virtual processor approach to give an efficient solution for arrays with block-cyclic distributions. this approach is based on viewing a block-cyclic distribution as a block (or cyclic) distribution on a set of virtual processors, which are cyclically (or block-wise) mapped to physical processors. these views are referred to as virtual-block or virtual-cyclic views depending on whether a block or cyclic distribution of the array on the virtual processors is used. the virtual processor approach permits different schemes based on the combination of the virtual processor views chosen for the different arrays involved in an array statement. these virtualization schemes have different indexing overhead. we present a strategy for identifying the virtualization scheme which will have the best performance. performance results on a cray t3d system are presented for hand-compiled code for array assignments. these results show that using the virtual processor approach, efficient code can be generated for execution of array statements involving block-cyclically distributed arrays. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_1739",
        "graph": {
            "node_idx": 1739,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    3,
                    10,
                    11,
                    12,
                    13,
                    5,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    6,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    8
                ]
            ],
            "node_list": [
                1739,
                16560,
                24152,
                24165,
                17557,
                1836,
                856,
                10794,
                12873,
                21549,
                6119,
                545,
                6196,
                544,
                15413,
                855,
                17570,
                4416,
                19329,
                10430,
                10876,
                20234,
                21421,
                6908,
                6205,
                22501
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: relaxing simd control flow constraints using loop transformationsmany loop nests in scientific codes contain a paralleliz-able outer loop but have an inner loop for which the number of iterations varies between different iterations of the outer loop. when running this kind of loop nest on a simd machine, the simd-inherent restriction to single program counter common to all processors will cause a performance degradation relative to comparable mimd implementations. this problem is not due to limited parallelism or bad load balance, it is merely a problem of control flow. this paper presents a loop transformation, which we call loop flattening, that overcomes this limitation by letting each processor advance to the next loop iteration containing useful computation, if there is such an iteration for the given processor. we study a concrete example derived from a molecular dynamics code and compare performance results for flattened and unflat-tened versions of this kernel on two simd machines, the cm-2 and the decmpp 12000. we then evaluate loop flattening from the compiler's perspective in terms of applicability, cost, profitability, and safety. we conclude with arguing that loop flattening, whether performed by the programmer or by the compiler, introduces negligible overhead and can significantly improve the performance of scientific codes for solving irregular problems. fl this research was supported by the center for research on parallel computation, a national science foundation science and technology center. use of the decmpp 12000 was provided by the center for research on parallel computation under nsf cooperative agreement no. ccr-8809615 with support from digital equipment corporation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_1741",
        "graph": {
            "node_idx": 1741,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    5,
                    11,
                    4,
                    4,
                    9,
                    12,
                    13,
                    4,
                    14,
                    15,
                    2,
                    3,
                    12,
                    4,
                    16,
                    6,
                    8,
                    17,
                    10,
                    18,
                    12,
                    6,
                    7,
                    19,
                    8,
                    4,
                    2,
                    11,
                    4,
                    20,
                    8,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    9
                ]
            ],
            "node_list": [
                1741,
                5619,
                6732,
                6733,
                6709,
                1744,
                18781,
                6731,
                15579,
                15578,
                9620,
                5362,
                6730,
                18500,
                6734,
                23193,
                17813,
                8578,
                1743,
                1746,
                8406
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: coordination and control structures and processes: possibilities for connectionist networks (cn)the absence of powerful control structures and processes that synchronize, coordinate, switch between, choose among, regulate, direct, modulate interactions between, and combine distinct yet interdependent modules of large connectionist networks (cn) is probably one of the most important reasons why such networks have not yet succeeded at handling difficult tasks (e.g. complex object recognition and description, complex problem-solving, planning). in this paper we examine how cn built from large numbers of relatively simple neuron-like units can be given the ability to handle problems that in typical multi-computer networks and artificial intelligence programs along with all other types of programs are always handled using extremely elaborate and precisely worked out central control (coordination, synchronization, switching, etc.). we point out the several mechanisms for central control of this un-brain-like sort that cn already have built into them albeit in hidden, often overlooked, ways. we examine the kinds of control mechanisms found in computers, programs, fetal development, cellular function and the immune system, evolution, social organizations, and especially brains, that might be of use in cn. particularly intriguing suggestions are found in the pacemakers, oscillators, and other local sources of the brain's complex partial synchronies; the diffuse, global effects of slow electrical waves and neurohormones; the developmental program that guides fetal development; communication and coordination within and among living cells; the working of the immune system; the evolutionary processes that operate on large populations of organisms; and the great variety of partially competing partially cooperating controls found in small groups, organizations, and larger societies. all these systems are rich in control but typically control that emerges from complex interactions of many local and diffuse sources. we explore how several different kinds of plausible control mechanisms might be incorporated into cn, and assess their potential benefits with respect to their cost. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1761",
        "graph": {
            "node_idx": 1761,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                1761
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning dextrous manipulation skills using the evolution strategythis paper presents an approach based on the evolution strategy for autonomous learning of dextrous manipulation primitives with a dextrous robot hand. we use heuristics derived from observations made on human hands to reduce the degrees of freedom of the task and make learning possible. our system does not rely on simulation; all the experimentation is performed the 16-degree-of-freedom utah/mit hand. we present experimental results that show that accurate dextrous manipulation skills can be learned in a period of a few minutes. we also show the application of the learned primitives to perform an assembly task. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_1768",
        "graph": {
            "node_idx": 1768,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                1768
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: sensorimotor primitives for programming robotic assembly skillsthis research was supported in part by the department of energy computational science fellowship program, by the department of energy integrated manufacturing predoctoral fellowship, by sandia national laboratories, and by the robotics institute at carnegie mellon university. the views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of the funding agencies. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_1789",
        "graph": {
            "node_idx": 1789,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    5,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    0,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    4,
                    9,
                    31,
                    32,
                    33
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    3,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1789,
                7787,
                3462,
                14491,
                16762,
                17863,
                9734,
                18167,
                934,
                3391,
                9938,
                2016,
                2836,
                14493,
                4141,
                19483,
                19657,
                11481,
                24950,
                25118,
                11687,
                6688,
                24212,
                24332,
                7094,
                930,
                19064,
                24714,
                22298,
                15535,
                23737,
                18948,
                15662,
                22370
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: architecture refinementa method is presented for the stepwise refinement of an abstract architecture into a relatively correct lower-level architecture that is intended to implement it. a refinement step involves the application of a predefined refinement pattern that provides a routine solution to a standard architectural design problem. a pattern contains an abstract architecture schema and a more detailed schema intended to implement it. the two schemas usually contain very different architectural concepts (from different architectural styles). once a refinement pattern is proven correct, instances of it can be used without proof in developing specific architectures. individual refinements are compositional, permitting incremental development and local reasoning. a special correctness criterion is defined for the domain of software architecture, as well as an accompanying proof technique. a useful syntactic form of correct composition is defined. the main points are illustrated by means of familiar architectures for a compiler. a prototype implementation of the method has been used successfully in a real application. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_1794",
        "graph": {
            "node_idx": 1794,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    0,
                    7,
                    3,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    9,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    9
                ]
            ],
            "node_list": [
                1794,
                16564,
                1810,
                5648,
                3407,
                7633,
                8868,
                20147,
                21626,
                13579,
                16567,
                9778,
                3408,
                17312,
                8538,
                915,
                20116,
                24398,
                10557,
                9196,
                10033,
                25035,
                10594,
                7684,
                21516,
                5911,
                13640,
                7463,
                23338,
                23882,
                21584
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: surface learning with applications to lipreadingmost connectionist research has focused on learning mappings from one space to another (eg. classification and regression). this paper introduces the more general task of learning constraint surfaces. it describes a simple but powerful architecture for learning and manipulating nonlinear surfaces from data. we demonstrate the technique on low dimensional synthetic surfaces and compare it to nearest neighbor approaches. we then show its utility in learning the space of lip images in a system for improving speech recognition by lip reading. this learned surface is used to improve the visual tracking performance during recognition. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_1808",
        "graph": {
            "node_idx": 1808,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    9,
                    10,
                    2,
                    8,
                    9,
                    1,
                    10,
                    4,
                    1,
                    2,
                    3,
                    8,
                    5,
                    6,
                    7,
                    11,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    6,
                    6,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1808,
                16754,
                9674,
                5244,
                16635,
                18184,
                3354,
                18815,
                1809,
                1807,
                19266,
                3355
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: non-axiomatic reasoning system (version 2.2) used to show how the system works. the limitations ofnars uses a new form of term logic, or an extended syllogism, in which several types of uncertainties can be represented and processed, and in which deduction, induction, abduction, and revision are carried out in a unified format. the system works in an asynchronously parallel way. the memory of the system is dynamically organized, and can also be interpreted as a network. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_1837",
        "graph": {
            "node_idx": 1837,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                1837,
                2112,
                23857,
                2111
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automatic data alignment and distribution for loosely synchronous problems in an interactive programming environmentan approach to distributed memory parallel programming that has recently become popular is one where the programmer explicitly specifies the data layout using language extensions, and a compiler generates all the communication. while this frees the programmer from the tedium of thinking about message-passing, no assistance is provided in determining the data layout scheme that gives a satisfactory performance on the target machine. we wish to provide automatic data alignment and distribution techniques for a large class of scientific computations, known in the literature as loosely synchronous problems. we propose an interactive software tool that allows the user to select regions of the sequential input program, then responds with a data decomposition scheme and diagnostic information for the selected region. the proposed tool allows the user to obtain insights into the characteristics of the program executing on a distributed memory machine and the behavior of the underlying compilation system without actually compiling and executing the program on the machine. an empirical study of actual application programs will show whether automatic techniques are able to generate data decomposition schemes that are close to optimal. if automatic techniques will fail to do so, we want to answer the questions (1) how user interaction can help to overcome the deficiencies of automatic techniques, and (2) whether, in particular, there is a data-parallel programming style that allows automatic detection of efficient data alignment and distribution schemes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_1841",
        "graph": {
            "node_idx": 1841,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    2,
                    13,
                    14,
                    15,
                    16,
                    17,
                    10,
                    18,
                    19,
                    20,
                    21,
                    1,
                    22,
                    23,
                    24,
                    3,
                    25,
                    26,
                    27,
                    28,
                    29
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                1841,
                15232,
                7253,
                18255,
                10122,
                9881,
                1840,
                21633,
                23755,
                23756,
                23805,
                15234,
                10422,
                8298,
                9882,
                11170,
                22006,
                9950,
                16132,
                16140,
                23810,
                2936,
                21854,
                1538,
                24927,
                25084,
                18660,
                19739,
                9461,
                22032
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: scalable reliable multicast using multiple multicast groupscmpsci technical report tr 96-73 october 1996 abstract we examine an approach for providing reliable, scalable multicast communication, involving the use of multiple multicast groups for reducing receiver processing costs in a multicast session. in this approach a single multicast group is used for the original transmission of packets. retransmissions of packets are done to separate multicast groups, which receivers dynamically join or leave. we first show that protocols using an infinite number of multicast groups incur much less processing overhead at the receivers compared to protocols that use only a single multicast group. this is due to the fact that receivers do not receive retransmissions of packets they have already received correctly. next, we derive the number of unwanted redundant packets at a receiver due to using only a finite number of multicast groups, for a specific negative acknowledgment (nak)-based protocol. we then explore the minimum number of multicast groups required to keep the cost of processing unwanted packets to a sufficiently low value (i.e., to achieve most of the benefit of using an infinite number of multicast groups). for an application consisting of a single sender transmitting reliably to many receivers we find that only a small number of multicast groups are required for a wide range of system parameters. in the case of an application where all participants simultaneously act as both senders and receivers a moderate number of multicast groups is needed. finally, we present a local filtering scheme for minimizing join/leave signaling when multiple multicast groups are used. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_1868",
        "graph": {
            "node_idx": 1868,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                1868,
                16574,
                2461,
                18630,
                6888,
                2630,
                23859,
                8196,
                6267,
                17403,
                12540,
                12536,
                14510,
                3387,
                6432,
                9112,
                4002,
                2627,
                703,
                14852,
                10229,
                24167,
                23055,
                19694,
                4925,
                5059,
                10652,
                7516,
                1038,
                7065
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the program structure tree: computing control regions in linear timein this paper, we describe the program structure tree (pst), a hierarchical representation of program structure based on single entry single exit (sese) regions of the control flow graph. we give a linear-time algorithm for finding sese regions and for building the pst of arbitrary control flow graphs (including irreducible ones). next, we establish a connection between sese regions and control dependence equivalence classes, and show how to use the algorithm to find control regions in linear time. finally, we discuss some applications of the pst. many control flow algorithms, such as construction of static single assignment form, can be speeded up by applying the algorithms in a divide-and-conquer style to each sese region on its own. the pst is also used to speed up data flow analysis by exploiting `sparsity'. experimental results from the perfect club and spec89 benchmarks confirm that the pst approach finds and exploits program structure. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_1872",
        "graph": {
            "node_idx": 1872,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8,
                    9,
                    10,
                    4,
                    11,
                    12,
                    13,
                    14,
                    2,
                    0,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                1872,
                1871,
                2639,
                7747,
                24613,
                19963,
                22909,
                16844,
                2624,
                3860,
                18702,
                19060,
                11324,
                23340,
                23975,
                841,
                2640,
                2638,
                8937,
                8938,
                7712
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a bootstrapping algorithm for learning linear models of object classesflexible models of object classes, based on linear combinations of prototypical images, are capable of matching novel images of the same class and have been shown to be a powerful tool to solve several fundamental vision tasks such as recognition, synthesis and correspondence. the key problem in creating a specific flexible model is the computation of pixelwise correspondence between the prototypes, a task done until now in a semiautomatic way. in this paper we describe an algorithm that automatically bootstraps the correspondence between the prototypes. the algorithm which can be used for 2d images as well as for 3d models is shown to synthesize successfully a flexible model of frontal face images and a flexible model of handwritten digits. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_1879",
        "graph": {
            "node_idx": 1879,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    0,
                    8,
                    9,
                    1,
                    5,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    1,
                    4,
                    5,
                    7,
                    0,
                    16,
                    17,
                    9,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1879,
                9802,
                4394,
                24645,
                12230,
                21395,
                9801,
                1112,
                4863,
                3074,
                1876,
                9336,
                3497,
                17498,
                18608,
                20929,
                21487,
                2089,
                3480,
                13405,
                3712,
                10647,
                9920,
                1810,
                19080,
                23947,
                10575,
                14430,
                24018,
                17036,
                14843,
                7868,
                4949,
                19798,
                1273,
                17127,
                8819,
                4292,
                4246,
                1697,
                21594,
                7527,
                19908
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: lexical modeling in a speaker independent speech understanding systemover the past 40 years, significant progress has been made in the fields of speech recognition and speech understanding. current state-of-the-art speech recognition systems are capable of achieving word-level accuracies of 90% to 95% on continuous speech recognition tasks using 5000 words. even larger systems, capable of recognizing 20,000 words are just now being developed. speech understanding systems have recently been developed that perform fairly well within a restricted domain. while the size and performance of modern speech recognition and understanding systems are impressive, it is evident to anyone who has used these systems that the technology is primitive compared to our own human ability to understand speech. some of the difficulties hampering progress in the fields of speech recognition and understanding stem from the many sources of variation that occur during human communication. one of the sources of variation that occurs in human communication is the different ways that words can be pronounced. there are many causes of pronunciation variation, such as: the phonetic environment in which the word occurs, the dialect of the speaker, the speaker's age, the speaker's gender, and the speaking rate. some researchers have shown improvements in speech recognition performance on a read-speech task through the use of explicit pronunciation modeling, while others have not shown any significant improvements. this thesis presents an algorithm for the construction of models that attempt to capture the variation that occurs in the pronunciations of words in spontaneous (i.e., non-read) speech. a technique for developing alternate pronunciations of words and then estimating \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_1898",
        "graph": {
            "node_idx": 1898,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    7,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                1898,
                21781,
                8668,
                3894,
                614,
                1043,
                9670,
                4537,
                22094,
                11342,
                8301,
                2746,
                18669,
                8142,
                17058,
                19305,
                10820,
                4685,
                18655,
                24682,
                14575,
                20953,
                13247,
                10978,
                6982,
                14074,
                19183,
                9167,
                6210,
                10204,
                5149,
                6213,
                21217,
                5626,
                15765,
                23702,
                18799,
                11830,
                14573,
                14221,
                8199,
                19286
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: transparent process migration: design alternatives and the sprite implementationthe sprite operating system allows executing processes to be moved between hosts at any time. we use this process migration mechanism to o*oad work onto idle machines, and also to evict migrated processes when idle workstations are reclaimed by their owners. sprite's migration mechanism provides a high degree of transparency both for migrated processes and for users. idle machines are identified, and eviction is invoked, automatically by daemon processes. on sprite it takes up to a few hundred milliseconds on sparcstation 1 workstations to perform a remote exec, while evictions typically occur in a few seconds. the pmake program uses remote invocation to invoke tasks concurrently. compilations commonly obtain speedup factors in the range of three to six; they are limited primarily by contention for centralized resources such as file servers. cpu-bound tasks such as simulations can make more effective use of idle hosts, obtaining as much as eight-fold speedup over a period of hours. process migration has been in regular service for over two years. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_1917",
        "graph": {
            "node_idx": 1917,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    4,
                    5
                ]
            ],
            "node_list": [
                1917,
                9238,
                11543,
                11542,
                12081,
                10006,
                23018,
                7318,
                20608,
                21944,
                19000
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the augmint multiprocessor simulation toolkit for intel x86 architecturesmost publicly-available simulation tools only simulate risc architectures. these tools cannot capture the instruction mix and memory reference patterns of cisc architectures. in this paper, we present an overview of augmint, an execution-driven multiprocessor simulation toolkit that fills this gap by supporting intel x86 architectures. augmint also supports trace-driven simulation for uniprocessors as well as multiprocessors, with minor effort on the part of simulator developers. augmint runs m4-macro-extended c and c++ applications such as those in the splash and splash-2 benchmark suites. augmint supports a thread-based programming model with shared global address space and private stack space. augmint supports a simulator interface compatible with that of the mint simulation toolkit for mips architectures, thus allowing the reuse of most architecture simulators written for mint. augmint simulations run on x86-based uniprocessor systems under unix or windows nt 2 . the source code of augmint is publicly available from http://www.csrd.uiuc.edu/iacoma/augmint. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_1926",
        "graph": {
            "node_idx": 1926,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                1926,
                3026,
                16428,
                16709,
                18225,
                19075,
                8079,
                10640,
                7793
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a \"speech acts\" approach to grounding in conversationwe propose that grounding, the process of achieving mutual understanding between participants in a conversation, be analyzed in terms of the actions performed by the conversants which contribute to achieving this mutual understanding. we propose a set of grounding acts which facilitate this analysis. this paper describes grounding acts, and a \"grammar\" stipulating which series of performance of grounding acts result in grounded content. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_1927",
        "graph": {
            "node_idx": 1927,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    3,
                    4,
                    9,
                    3,
                    4,
                    9,
                    6,
                    1,
                    3,
                    9,
                    6,
                    4,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    3,
                    1,
                    3,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                1927,
                1629,
                16711,
                5498,
                1928,
                924,
                5500,
                1929,
                16551,
                5499,
                4916,
                3284,
                16986,
                17249,
                8726,
                721,
                18007,
                9172,
                2980,
                20733
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: preferential partner selection in an evolutionary study of prisoner's dilemmaapril 1995 economic report series, no. 35 iowa state university abstract partner selection is an important process in many social interactions, permitting individuals to decrease the risks associated with cooperation. in large populations, defectors may escape punishment by roving from partner to partner, but defectors in smaller populations risk social isolation. we investigate these possibilities for an evolutionary prisoner's dilemma in which agents use expected payoffs to choose and refuse partners. in comparison to random or round-robin partner matching, we find that the average payoffs attained with preferential partner selection tend to be more narrowly confined to a few isolated payoff regions. most ecologies evolve to essentially full cooperative behavior, but when agents are intolerant of defections, or when the costs of refusal and social isolation are small, we also see the emergence of wallflower ecologies in which all agents are socially isolated. between these two extremes, we see the emergence of ecologies whose agents tend to engage in a small number of defections followed by cooperation thereafter. the latter ecologies exhibit a plethora of interesting social interaction patterns. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_1955",
        "graph": {
            "node_idx": 1955,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    3,
                    4,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                1955,
                16823,
                6915,
                4927,
                20063,
                2033,
                19231,
                19457,
                19474,
                17048,
                4929,
                5007,
                4928
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an optimizing compiler for clp(r)the considerable expressive power and flexibility gained by combining constraint programming with logic programming is not without cost. implementations of constraint logic programming (clp) languages must include expensive constraint solving algorithms tailored to specific domains, such as trees, booleans, or real numbers. the performance of many current clp compilers and interpreters does not encourage the widespread use of clp. we outline an optimizing compiler for clp(r), a clp language which extends prolog by allowing linear arithmetic constraints. the compiler uses sophisticated global analyses to determine the applicability of different program transformations. two important components of the compiler, the analyzer and the optimizer, work in continual interaction in order to apply semantics-preserving transformations to the source program. a large suite of transformations are planned. currently the compiler applies three powerful transformations, namely \"solver bypass\", \"dead variable elimination\" and \"nofail constraint detection\". we explain these optimizations and their place in the overall compiler design and show how they lead to performance improvements on a set of benchmark programs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_1982",
        "graph": {
            "node_idx": 1982,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    2,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                1982,
                16583,
                4831,
                13346,
                4832,
                13352
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: references 1994 benchmark tests for the arpa spoken language program, this volume. genones: optimizing the5. m. ostendorf, a. kannan, s. austin, o. kimball, r. schwartz, and j. rohlicek, integration of diverse recognition methodologies through reevaluation of n-best sentence hypotheses, in proceedings of the darp a speech and natural language workshop, pacific grove, ca, mor-gan kaufmann publishers, february 1991. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_1995",
        "graph": {
            "node_idx": 1995,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    6,
                    24,
                    25,
                    8,
                    26,
                    10,
                    27,
                    28,
                    29,
                    30,
                    4,
                    25,
                    31,
                    32,
                    33,
                    22,
                    34,
                    23,
                    10,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    1,
                    43,
                    44,
                    45,
                    46
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                1995,
                17479,
                4329,
                1745,
                1998,
                4835,
                1997,
                8664,
                24017,
                2992,
                24020,
                6732,
                6710,
                3166,
                6709,
                5554,
                17429,
                6730,
                19434,
                193,
                8059,
                21395,
                16586,
                3871,
                2926,
                16348,
                3112,
                2595,
                4385,
                22756,
                2558,
                18494,
                16931,
                20134,
                9445,
                18201,
                8324,
                4575,
                4574,
                2877,
                3448,
                21629,
                13887,
                17712,
                10234,
                24652,
                24936
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: refining algorithms with knowledge-based neural networks: improving the chou-fasman algorithm for protein foldingwe describe a method for using machine learning to refine algorithms represented as generalized finite-state automata. the knowledge in an automaton is translated into a corresponding artificial neural network, and then refined by applying backpropagation to a set of examples. our technique for translating an automaton into a network extends the kbann algorithm, a system that translates a set of propositional, non-recursive rules into a corresponding neural network. the topology and weights of the neural network are set by kbann so that the network represents the knowledge in the rules. we present the extended system, fskbann, which augments the kbann algorithm to handle finite-state automata. we employ fskbann to refine the chou-fasman algorithm, a method for predicting how globular proteins fold. the chou-fasman algorithm cannot be elegantly formalized using non-recursive rules, but can be concisely described as a finite-state automaton. empirical evidence shows that the refined algorithm fskbann produces is statistically significantly more accurate than both the original chou-fasman algorithm and a neural network trained using the standard approach. we also provide extensive statistics on the type of errors each of the three approaches makes and discuss the need for better definitions of solution quality for the protein-folding problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_1996",
        "graph": {
            "node_idx": 1996,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4
                ]
            ],
            "node_list": [
                1996,
                16586,
                23948,
                5002,
                16348,
                24020,
                8974,
                10956,
                12763,
                16286,
                23975,
                3112
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: refining domain theories expressed as finite-state automatathe kbann system uses neural networks to refine domain theories. currently, domain knowledge in kbann is expressed as non-recursive, propositional rules. we extend kbann to domain theories expressed as finite-state automata. we apply finite-state kbann to the task of predicting how proteins fold, producing a small but statistically significant gain in accuracy over both a standard neural network approach and a non-learning algorithm from the biological literature. our method shows promise at solving this and other real-world problems that can be described in terms of state-dependent decisions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_2011",
        "graph": {
            "node_idx": 2011,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    2,
                    1,
                    4,
                    2,
                    9,
                    2,
                    11,
                    12,
                    9,
                    1,
                    2,
                    4,
                    13,
                    12,
                    5,
                    2,
                    3,
                    11,
                    10,
                    4,
                    12,
                    14,
                    5,
                    6,
                    7,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9
                ]
            ],
            "node_list": [
                2011,
                388,
                386,
                387,
                18160,
                3981,
                18864,
                390,
                3982,
                8583,
                389,
                5317,
                24580,
                18236,
                2010
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: visualization and verification ofautomatic target recognition results abstract the rangeview software system presented here addresses two significant issues in the development and deployment of an automatic target recognizer: visualization of progress of the recognizer in finding a target, and verification by an operator of the correctness of the match. the system combines range imagery from a ladar device with optical imagery from a color ccd camera and/or flir sensor to display a three-dimensional representation of the scene and the target model. range imagery creates a partial three-dimensional representation of the scene. optical imagery is mapped onto this partial three-dimensional representation. output from the atr is registered in three dimensions with the scene. recognized targets are displayed in correct spatial relation to the scene, and the registered scene and target may be visually inspected from any viewpoint. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_2016",
        "graph": {
            "node_idx": 2016,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    8,
                    1,
                    1,
                    0,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    7,
                    25,
                    26,
                    27,
                    28,
                    29,
                    1,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                2016,
                14493,
                14491,
                18190,
                6846,
                752,
                16003,
                24332,
                22368,
                15329,
                2017,
                15662,
                22370,
                9734,
                16762,
                7787,
                16871,
                9938,
                16795,
                3462,
                17411,
                14500,
                18491,
                23042,
                17283,
                24212,
                17863,
                24605,
                18948,
                24714
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a formal basis for architectural connectionthis research was sponsored by the national science foundation under grant number ccr-9357792, by the wright laboratory, aeronautical systems center, air force materiel command, usaf, and the advanced research projects agency (arpa) under grant number f33615-93-1-1330, and by siemens corporate research. the views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of wright laboratory, the u.s. government, or siemens corporation. the u.s. government is authorized to reproduce and distribute reprints for government purposes notwithstanding any copyright notation thereon. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_2030",
        "graph": {
            "node_idx": 2030,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7,
                    3,
                    8,
                    4,
                    9,
                    10,
                    7,
                    3,
                    11,
                    9,
                    9,
                    5,
                    0,
                    12,
                    13,
                    14,
                    15,
                    16,
                    4,
                    17,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                2030,
                4025,
                10109,
                12403,
                1860,
                3026,
                14502,
                8079,
                19170,
                20784,
                3838,
                19780,
                9852,
                17115,
                11037,
                11118,
                9802,
                516
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: statistical language modeling for speech disfluenciesspeech disfluencies (such as filled pauses, repetitions, restarts) are among the characteristics distinguishing spontaneous speech from planned or read speech. we introduce a language model that predicts disfluencies probabilistically and uses an edited, fluent context to predict following words. the model is based on a generalization of the standard n-gram language model. it uses dynamic programming to compute the probability of a word sequence, taking into account possible hidden disfluency events. we analyze the model's performance for various disfluency types on the switchboard corpus. we find that the model reduces word perplexity in the neighborhood of disfluency events; however, overall differences are small and have no significant impact on recognition accuracy. we also note that for modeling of the most frequent type of dis-fluency, filled pauses, a segmentation of utterances into linguistic (rather than acoustic) units is required. our analysis illustrates a generally useful technique for language model evaluation based on local perplexity comparisons. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_2055",
        "graph": {
            "node_idx": 2055,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    0,
                    8,
                    9,
                    10,
                    11,
                    9,
                    12,
                    13,
                    13,
                    14,
                    6,
                    1,
                    15,
                    16,
                    9,
                    17,
                    13,
                    18,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    8,
                    8
                ]
            ],
            "node_list": [
                2055,
                11149,
                2557,
                10410,
                14807,
                5216,
                17118,
                17359,
                12244,
                17682,
                1697,
                16653,
                10407,
                19308,
                22611,
                10408,
                17610,
                18181,
                3278,
                6371,
                16299
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: robot navigation with markov models: a framework for path planning and learning with limited computational resourcesnavigation methods for mobile robots need to take various sources of uncertainty into account in order to get robust performance. the ability to improve performance with experience and to adapt to new circumstances is equally important for long-term operation. real-time constraints, limited computation and memory, as well as the cost of collecting training data also need to be accounted for. in this paper, we discuss our evolving architecture for mobile robot navigation that we use as a test-bed for evaluating methods for dealing with uncertainty in the face of real-time constraints and limited computational resources. the architecture is based on pomdp models that explicitly represent actuator uncertainty, sensor uncertainty, and approximate knowledge of the environment (such as uncertain metric information). using this model, the robot is able to track its likely location as it navigates through a building. here, we discuss additions to the architecture: a learning component that allows the robot to improve the pomdp model from experience, and a decision-theoretic path planner that takes into account the expected performance of the robot as well as probabilistic information about the state of the world. a key aspect of both additions is the efficient allocation of computational resources and their practical application to real-world robots. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_2058",
        "graph": {
            "node_idx": 2058,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    1,
                    12,
                    13,
                    2,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    3,
                    21,
                    22,
                    18,
                    23,
                    24,
                    11,
                    20,
                    25,
                    26,
                    27,
                    28,
                    5,
                    9,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    5,
                    40
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    8,
                    9,
                    9
                ]
            ],
            "node_list": [
                2058,
                2909,
                10630,
                1836,
                453,
                424,
                8917,
                3653,
                14679,
                1835,
                22501,
                2559,
                8809,
                3105,
                6531,
                20995,
                24165,
                6119,
                545,
                6196,
                544,
                15413,
                8908,
                2911,
                17242,
                19694,
                1924,
                21373,
                24216,
                14647,
                22494,
                7579,
                1733,
                1134,
                4414,
                15350,
                8751,
                18317,
                14775,
                14680,
                18801
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: distributed memory compiler design for sparse problems 4this paper addresses the issue of compiling concurrent loop nests in the presence of complicated array references and irregularly distributed arrays. arrays accessed within loops may contain accesses that make it impossible to precisely determine the reference pattern at compile time. this paper proposes a run time support mechanism that is used effectively by a compiler to generate efficient code in these situations. the compiler accepts as input a fortran 77 program enhanced with specifications for distributing data, and outputs a message passing program that runs on the nodes of a distributed memory machine. the runtime support for the compiler consists of a library of primitives designed to support irregular patterns of distributed array accesses and irregularly distributed array partitions. a variety of performance results on the intel ipsc/860 are presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_2060",
        "graph": {
            "node_idx": 2060,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    2,
                    3,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                2060,
                9499,
                18248,
                9501,
                8778,
                19935,
                20759
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: detecting features in spatial point processes with clutter via model-based clusteringtechnical report no. 295 department of statistics, university of washington october, 1995 1 abhijit dasgupta is a graduate student at the department of biostatistics, university of washington, box 357232, seattle, wa 98195-7232, and his e-mail address is dasgupta@biostat.washington.edu. adrian e. raftery is professor of statistics and sociology, department of statistics, university of washington, box 354322, seattle, wa 98195-4322, and his e-mail address is raftery@stat.washington.edu. this research was supported by office of naval research grant no. n-00014-91-j-1074. the authors are grateful to peter guttorp, girardeau henderson and robert muise for helpful discussions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_2082",
        "graph": {
            "node_idx": 2082,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    14,
                    17,
                    2,
                    18,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                2082,
                2577,
                6855,
                14858,
                20978,
                12627,
                14525,
                5573,
                12542,
                17570,
                17847,
                7724,
                9511,
                22506,
                22654,
                22397,
                7502,
                17216,
                17969,
                20219,
                14509
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: predictability of load/store instruction latenciesdue to increasing cache-miss latencies, cache control instructions are being implemented for future systems. we study the memory referencing behavior of individual machine-level instructions using simulations of fully-associative caches under min replacement. our objective is to obtain a deeper understanding of useful program behavior that can be eventually employed at optimizing programs and to motivate architectural features aimed at improving the efficacy of memory hierarchies. our simulation results show that a very small number of load/store instructions account for a majority of data cache misses. specifically, fewer than 10 instructions account for half the misses for six out of nine spec89 benchmarks. selectively prefetching data referenced by a small number of instructions identified through profiling can reduce overall miss ratio significantly while only incurring a small number of unnecessary prefetches. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_2108",
        "graph": {
            "node_idx": 2108,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                2108,
                24154,
                24356
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: rational partial state-graph searchthe ai technique of searching through trees or graphs of neighboring states in a state-space has been used for many years in game-playing and problem-solving domains. for many of these domains, the state-spaces are too large to search completely; there is only time for a partial state-space search. any partial search technique must address two issues: what part of the space do we search, and how do we obtain useful information from a partially-searched space? recently, a number of research groups have developed rational techniques, by which i mean ones based on decision theoretic principles, that answer one or both of these questions. these researchers have argued convincingly that their rational approaches improve on the non-decision-theoretic techniques previously used for partial state-space search. in this paper, i will survey work in this area by researchers such hansson & mayer, russell & wefald, and baum & smith, with an emphasis on the latter, since it subsumes much of the earlier work. i will conclude with some speculations on how to apply the principles learned from rational state-space search to do abstract reasoning that transcends the state-space paradigm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_2111",
        "graph": {
            "node_idx": 2111,
            "edge_index": [
                [
                    0,
                    1
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                2111,
                22080
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on local register allocationdimacs technical report 97-33 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_2133",
        "graph": {
            "node_idx": 2133,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    4,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    4
                ]
            ],
            "node_list": [
                2133,
                3279,
                17184,
                9305,
                10410,
                18391,
                2558,
                2557,
                3468,
                14794,
                19308,
                19501,
                22611,
                6449,
                18974
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: case-based acquisition of place knowledgein this paper we define the task of place learning and describe one approach to this problem. the framework represents distinct places using evidence grids, a probabilistic description of occupancy. place recognition relies on case-based classification, augmented by a registration process to correct for translations. the learning mechanism is also similar to that in case-based systems, involving the simple storage of inferred evidence grids. experimental studies with both physical and simulated robots suggest that this approach improves place recognition with experience, that it can handle significant sensor noise, and that it scales well to increasing numbers of places. previous researchers have studied evidence grids and place learning, but they have not combined these two powerful concepts, nor have they used the experimental methods of machine learning to evaluate their methods' abilities. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_2143",
        "graph": {
            "node_idx": 2143,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    5,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                2143,
                14678,
                4126,
                6213,
                14342,
                14693,
                22508,
                23395,
                16890,
                10978,
                1036,
                24834,
                21953,
                2745,
                22420,
                22863,
                14687,
                22519,
                15218,
                15217,
                22960,
                14688
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the architectural design of globe: a wide-area distributed systemdeveloping large-scale wide-area applications requires an infrastructure that is presently lacking entirely. currently, applications have to be built on top of raw communication services, such as tcp connections. all additional services, including those for naming, replication, migration, persistence, fault tolerance, and security, have to be implemented for each application anew. not only is this a waste of effort, it also makes interoperability between different applications difficult or even impossible. we present a novel, object-based framework for developing wide-area distributed applications. the framework is based on the concept of a distributed shared object, which has the characteristic feature that its state can be physically distributed across multiple machines at the same time. all implementation aspects, including communication protocols, replication strategies, and distribution and migration of state, are part of an object and are hidden behind its interface. the current performance problems of the world-wide web are taken as an example to illustrate the benefit of encapsulating state, operations, and implementation strategies on a per-object basis. we describe how distributed objects can be used to implement worldwide scalable web objects. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_2177",
        "graph": {
            "node_idx": 2177,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    3,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    4,
                    22,
                    23,
                    13,
                    24,
                    16,
                    25,
                    26,
                    27,
                    28,
                    23,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                2177,
                7639,
                17537,
                24399,
                5944,
                8261,
                24440,
                2175,
                16839,
                745,
                24773,
                7640,
                5781,
                18460,
                19046,
                20354,
                11846,
                23215,
                8263,
                1293,
                9257,
                14420,
                2173,
                698,
                15368,
                15608,
                12555,
                23385,
                14095,
                16477,
                8191,
                24852,
                17404,
                17957,
                2176,
                8345,
                1290,
                20358
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: heterogeneous uncertainty sampling for supervised learninguncertainty sampling methods iteratively request class labels for training instances whose classes are uncertain despite the previous labeled instances. these methods can greatly reduce the number of instances that an expert need label. one problem with this approach is that the classifier best suited for an application may be too expensive to train or use during the selection of instances. we test the use of one classifier (a highly efficient probabilistic one) to select examples for training another (the c4.5 rule induction program). despite being chosen by this heterogeneous approach, the uncertainty samples yielded classifiers with lower error rates than random samples ten times larger. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_2178",
        "graph": {
            "node_idx": 2178,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                2178,
                16604,
                7220
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: data structures in prologupmail technical report no. 42 abstract.computer science has produced several data structures and algorithms on them to efficiently solve computational problems. some algorithms require destructive operations for their efficient implementation or have other properties which make them difficult to implement efficiently in prolog. if they are to be introduced in prolog, these data structures and algorithms must be implemented at a lower level. we investigate how such data structures, possibly with a complicated internal representation, can be naturally incorporated as first class terms in prolog. implementation problems are discussed for a number of alternative solutions. four examples of data structures: (hash) tables, arrays, characters, and strings are examined individually. an earlier version of this paper was presented at the 1987 symposium on logic programming in san francisco. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_2189",
        "graph": {
            "node_idx": 2189,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    10,
                    31,
                    5,
                    32,
                    33,
                    2,
                    34,
                    35,
                    36,
                    37,
                    38,
                    11,
                    39,
                    40
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                2189,
                16607,
                5945,
                17565,
                18364,
                694,
                2381,
                5782,
                511,
                7854,
                3152,
                2904,
                7982,
                18460,
                3307,
                17321,
                7267,
                15370,
                5558,
                9834,
                6734,
                23216,
                14420,
                10370,
                15574,
                7332,
                9305,
                18144,
                18391,
                2204,
                1673,
                5781,
                15372,
                3168,
                5780,
                17825,
                18518,
                4022,
                4934,
                13222,
                13223
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: building classifiers using bayesian networksrecent work in supervised learning has shown that a surprisingly simple bayesian classifier with strong assumptions of independence among features, called naive bayes, is competitive with state of the art classifiers such as c4.5. this fact raises the question of whether a classifier with less restrictive assumptions can perform even better. in this paper we examine and evaluate approaches for inducing classifiers from data, based on recent results in the theory of learning bayesian networks. bayesian networks are factored representations of probability distributions that generalize the naive bayes classifier and explicitly represent statements about independence. among these approaches we single out a method we call tree augmented naive bayes (tan), which outperforms naive bayes, yet at the same time maintains the computational simplicity (no search involved) and robustness which are characteristic of naive bayes. we experimentally tested these approaches using benchmark problems from the u. c. irvine repository, and compared them against c4.5, naive bayes, and wrapper-based feature selection methods. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_2227",
        "graph": {
            "node_idx": 2227,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    7,
                    11,
                    12,
                    13,
                    6,
                    7,
                    1,
                    13,
                    14,
                    15,
                    11,
                    16,
                    17,
                    12,
                    18,
                    5,
                    19,
                    20,
                    18,
                    3,
                    4,
                    5,
                    20,
                    19,
                    20,
                    11,
                    13,
                    11,
                    13,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    11,
                    8,
                    28,
                    15,
                    0,
                    29,
                    30,
                    31,
                    13,
                    9,
                    32,
                    33
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                2227,
                5155,
                3767,
                11955,
                11954,
                11976,
                11962,
                11961,
                7238,
                11764,
                2229,
                8059,
                23190,
                5753,
                10986,
                19938,
                5967,
                12105,
                9310,
                4980,
                20464,
                7432,
                17740,
                10099,
                11776,
                6009,
                7433,
                11988,
                8124,
                9282,
                7239,
                23937,
                23938,
                6268
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolution of a 60 decibel op amp using genetic programminggenetic programming was used to evolve both the topology and sizing (numerical values) for each component of a low-distortion, low \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_2237",
        "graph": {
            "node_idx": 2237,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                2237,
                8636,
                24861,
                18186
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: default logic and autoepistemic logic: fixed points and common semantic frameworkwhen we work with information from multiple sources, the formats of the knowledge bases may not be uniform. it would be desirable to be able to combine a knowledge base of default rules with one containing autoepistemic formulas. previous works on relating default logic and autoepistemic logic mostly impose some constraints on autoepistemic logic, and thus are not suitable for combining the two logics. we first present a fixed point formulation of autoepistemic logic analogous to that of default logic. then we introduce a possible world framework with a partition structure, which corresponds to our intuitive notion of accessibility as linking alternate \"possible\" worlds. we show that both default logic and au-toepistemic logic can be characterized using this framework, and the constraints imposed on the possible world structures correspond to the requirements in the fixed point formulations. casting both default logic and autoepistemic logic in a common framework is important for developing a semantics applicable to the two logics, both separately and combined. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_2248",
        "graph": {
            "node_idx": 2248,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    1,
                    0,
                    4,
                    6,
                    1,
                    0,
                    2,
                    3,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                2248,
                16612,
                4175,
                2245,
                2249,
                23703,
                22690,
                7155
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: safety property verification of esterel programs and applications to telecommunications software versions of two featureswe present a technique for automatically verifying linear-time temporal logic safety properties of programs written in esterel, a formally-defined language for programming reactive systems. in our approach, linear-time temporal logic safety properties are first translated into esterel programs that model these properties. using the esterel compiler, the translations are compiled in parallel with the esterel program to be verified. a trivial reachability analysis of the output of the compiler then indicates whether or not the safety property is satisfied by the program. we describe two real-world software problems es that we have verified using our technique and associated tool set. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_2283",
        "graph": {
            "node_idx": 2283,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                2283,
                2606,
                2688,
                3114,
                7162,
                25105,
                2608,
                759,
                24439,
                24482,
                24842,
                25116,
                7467,
                23285,
                10003,
                10788,
                1980,
                23178,
                23179,
                23872,
                4576,
                5208,
                10920,
                5211,
                10153,
                1042,
                24839,
                6442,
                7419,
                7606,
                13632,
                21638
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: agent amplified communicationwe propose an agent-based framework for assisting and simplifying person-to-person communication for information gathering tasks. as an example, we focus on expertise location within a large organization. in our approach, the informal person-to-person networks that exist within an organization are used to referral chain requests for expertise. user-agents are employed to automate the referral chaining process. we also present simulation results demonstrating the effectiveness of our approach. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_2290",
        "graph": {
            "node_idx": 2290,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    10,
                    2,
                    12,
                    13,
                    14,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    4,
                    4,
                    6,
                    6,
                    7,
                    7,
                    8
                ]
            ],
            "node_list": [
                2290,
                16620,
                18318,
                10544,
                7544,
                19228,
                8919,
                12247,
                10827,
                23104,
                19419,
                8207,
                19242,
                20656,
                20658
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: towards a reference framework for process conceptsthis paper discusses the importance of process support for business activities. a reference framework for process concepts and technology support is sought. the general requirements and properties of the process domain are first discussed. then, four process sub-models are presented to describe activities, products, tools and organisations, respectively. five process model phases are also introduced, as well as meta-processes and related human roles to handle process models and their transformations. the process concepts are applied to a bank example. keywords: (software) process, process modeling, process improvement, meta-process, roles. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_2297",
        "graph": {
            "node_idx": 2297,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    3,
                    6,
                    1,
                    7,
                    3,
                    4,
                    8,
                    9,
                    5,
                    10,
                    6,
                    11,
                    10,
                    12,
                    1,
                    13,
                    3,
                    5,
                    10,
                    6,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                2297,
                8404,
                2296,
                10625,
                2298,
                19113,
                8405,
                17003,
                18122,
                4665,
                19472,
                19985,
                21527,
                17462
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: perception level control for uncalibrated hand-eye coordination and motor actionsrobot arm manipulators, some thirty years after their commercial introduction, have found widespread application in structured industrial environments, performing, for instance, repetitive tasks in a mass production line. successful application in unstructured environments however has proven much harder. yet there are many such tasks where robots would be useful. we present a promising approach to visual (and more general sensing) robot control, that does not require modeling of robot transfer functions or the use of absolute world coordinate systems, and thus is suitable for use in unstructured environments. our approach codes actions and tasks in terms of desired general perceptions rather than motor sequences. we argue that our vision space approach is particularly suited for easy teaching/programming of a robot. for instance a task can be taught by supplying an image sequence illustrating it. the resulting robot behavior is robust to changes in the environment, dynamically adjusting the motor control rules in response to environmental variation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_2324",
        "graph": {
            "node_idx": 2324,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                2324,
                10322,
                3492,
                11738,
                2323,
                11002,
                9383,
                8776,
                20299
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: low latency workstation cluster communications using sender-based protocolsthe use of workstations on a local area network to form scalable multicomputers has become quite common. a serious performance bottleneck in such \"carpet clusters\" is the communication protocol that is used to send data between nodes. we report on the design and implementation of a class of communication protocols, known as sender-based, in which the sender specifies the locations at which messages are placed in the receiver's address space. the protocols are shown to deliver near-link latency and near-link bandwidth using medusa fddi controllers, within the bsd 4.3 and hp-ux 9.01 operating systems. the protocols are also shown to be flexible and powerful enough to support common distributed programming models, including but not limited to rpc, while maintaining expected standards of system and application security and integrity. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_2330",
        "graph": {
            "node_idx": 2330,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                2330,
                16628,
                6973,
                17611,
                5175,
                3193
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: zero-cost range splittingthis paper presents a new optimization technique that uses empty delay slots to improve code scheduling. we are able to split live ranges for free, by inserting spill code into empty delay slots. splitting a live range can reduce interferences with other live ranges and can sometimes free registers. live ranges no longer interfering with the split live range can sometimes make use of the extra register. our algorithm, as a final pass over the code, exploits empty delay slots that would remain unused if spill code was not inserted. this paper proposes a variety of optimizations that use the extra registers generated from live range splitting, including coalescing live ranges and improving code scheduling. we present an algorithm for improving code scheduling and present implementation results. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_2357",
        "graph": {
            "node_idx": 2357,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    10,
                    19,
                    20,
                    21,
                    22,
                    6,
                    23,
                    24,
                    25,
                    13,
                    6,
                    1,
                    26,
                    16,
                    27
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    5,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                2357,
                1598,
                3819,
                18863,
                19838,
                9954,
                16057,
                9362,
                1608,
                24082,
                2898,
                1606,
                5921,
                1595,
                2899,
                18661,
                10400,
                7266,
                3820,
                8759,
                19992,
                5731,
                9156,
                1601,
                5991,
                7440,
                17817,
                19302
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning read-once formulas with queriesa read-once formula is a boolean formula in which each variable occurs at most once. such formulas are also called -formulas or boolean trees. this paper treats the problem of exactly identifying an unknown read-once formula using specific kinds of queries. the main results are a polynomial time algorithm for exact identification of monotone read-once formulas using only membership queries, and a polynomial time algorithm for exact identification of general read-once formulas using equivalence and membership queries (a protocol based on the notion of a minimally adequate teacher [1]). our results improve on valiant's previous results for read-once formulas [26]. we also show that no polynomial time algorithm using only membership queries or only equivalence queries can exactly identify all read-once formulas. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_2381",
        "graph": {
            "node_idx": 2381,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    5,
                    8,
                    9,
                    10,
                    11,
                    6,
                    12,
                    3,
                    13,
                    0,
                    1,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                2381,
                7332,
                9305,
                18144,
                18391,
                2204,
                17709,
                18276,
                6449,
                18974,
                2378,
                16857,
                17924,
                2202,
                2203,
                20515
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a bayesian framework for case-based reasoningin this paper we present a probabilistic framework for case-based reasoning in data-intensive domains, where only weak prior knowledge is available. in such a probabilistic viewpoint the attributes are interpreted as random variables, and the case base is used to approximate the underlying joint probability distribution of the attributes. consequently structural case adaptation (and parameter adjustment in particular) can be viewed as prediction based on the full probability model constructed from the case history. the methodology addresses several problems encountered in building case-based reasoning systems. it provides a computationally efficient structural adaptation algorithm, avoids over-fitting by using bayesian model selection and uses directly probabilities as measures of similarity. the methodology described has been implemented in the d-side software package, and the approach is validated by presenting empirical results of the method's classification prediction performance for a set of public domain data sets. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_2385",
        "graph": {
            "node_idx": 2385,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    5,
                    2,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    20,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6
                ]
            ],
            "node_list": [
                2385,
                128,
                2106,
                2242,
                8797,
                19129,
                11854,
                12278,
                16444,
                9606,
                129,
                130,
                131,
                2989,
                24154,
                16912,
                24356,
                2108,
                3089,
                4307,
                20275,
                12105,
                8912,
                2994,
                1263,
                19579,
                19903
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: game tree searching by min/max approximationwe present an iterative method for searching min/max game trees based on the idea of approximating the \"min\" and \"max\" operators by generalized mean-valued operators. this approximation is used to guide the selection of the next leaf node to expand, since the approximations allow one to select efficiently that leaf node upon whose value the (approximate) value at the root most highly depends. experimental results from almost 1; 000 games of connect-four 1 suggest that our scheme is superior to minimax search with alpha-beta pruning, for the same number of calls to the move routine. however, our scheme has higher overhead, so that further work is needed before it becomes competitive when cpu time per turn is the limiting resource. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_2386",
        "graph": {
            "node_idx": 2386,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                2386,
                2388,
                215,
                2387,
                18984,
                8283,
                17438,
                10530,
                1890,
                20588,
                11530,
                5608,
                13224,
                21399
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: approximation schemes for euclidean k-medians and related problemsin the k-median problem we are given a set s of n points in a metric space and a positive integer k. we desire to locate k medians in space, such that the sum of the distances from each of the points of s to the nearest median is minimized. this paper gives an approximation scheme for the plane that for any c &gt; 0 produces a solution of cost at most 1 + 1=c times the optimum and runs in time o(n o(c+1) ): the approximation scheme also generalizes to some problems related to k-median. our methodology is to extend arora's [1, 2] techniques for the tsp, which hitherto seemed inapplicable to problems such as the k-median problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_2409",
        "graph": {
            "node_idx": 2409,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    11,
                    12,
                    3,
                    2,
                    13,
                    8,
                    14,
                    15,
                    16,
                    4,
                    13,
                    1,
                    12,
                    17,
                    6,
                    18,
                    19,
                    5,
                    0,
                    9,
                    20,
                    21,
                    22,
                    10,
                    23,
                    3,
                    24,
                    25,
                    15,
                    26,
                    16,
                    27,
                    28,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                2409,
                7521,
                2407,
                17191,
                15547,
                17858,
                2420,
                1607,
                4413,
                22533,
                23248,
                17509,
                2421,
                4888,
                15318,
                8452,
                12954,
                17625,
                21269,
                13218,
                23244,
                19571,
                6286,
                15545,
                6934,
                15546,
                6802,
                21113,
                23235
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: distributed robotic manipulation: experiments in minimalismthis paper describes research done in the robotics and vision laboratory at cornell university. support for our robotics research was provided in part by the national science foundation under grants no. iri-8802390, iri-9000532, iri-9201699, by a presidential young investigator award to bruce donald, by an nsf/arpa s.g.e.r. in mems, and in part by the air force office of sponsored research, the mathematical sciences institute, intel corporation, and at&t bell laboratories. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_2410",
        "graph": {
            "node_idx": 2410,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    2,
                    12,
                    13,
                    3,
                    14,
                    15,
                    16,
                    4,
                    17,
                    1,
                    18,
                    19,
                    8,
                    20,
                    20,
                    11,
                    2,
                    12,
                    18,
                    5,
                    3,
                    9,
                    21,
                    5,
                    22,
                    23,
                    24,
                    7,
                    8,
                    20,
                    17,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    7,
                    7,
                    7,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                2410,
                15547,
                7521,
                2420,
                4889,
                17191,
                17972,
                6802,
                12954,
                2424,
                4413,
                4888,
                2421,
                17625,
                21269,
                13218,
                5496,
                23235,
                2407,
                6800,
                21113,
                15545,
                6934,
                15546,
                8452
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: sensorless manipulation using transverse vibrations of a platethe existing industrial parts feeders move the parts through a sequence of mechanical filters that reject parts in unwanted orientations. in this paper we develop a new setup that uses a different vibratory mechanism to systematically manipulate parts, by actively orienting and localizing them. the idea is to generate and change dynamic modes for a plate by varying the applied frequency of oscillation. depending on the node shapes of the plate for these frequencies, the position and orientation of the parts can be controlled. we develop an analysis of the underlying dynamics, and show that it can be used to predict the behavior of objects placed on the vibrating plate. using this analysis, we propose that the applied frequencies can be automatically sequenced to obtain a \"sensorless\" strategy for manipulating a given object. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_2411",
        "graph": {
            "node_idx": 2411,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    11,
                    12,
                    10,
                    2,
                    13,
                    14,
                    3,
                    5,
                    4,
                    15,
                    16,
                    17,
                    10,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                2411,
                6934,
                15547,
                4888,
                7523,
                2415,
                8452,
                17972,
                17191,
                21906,
                23235,
                4889,
                4413,
                6800,
                17985,
                3698,
                2420,
                15546
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: sensorless manipulation using massively parallel microfabricated actuator arraysthis paper investigates manipulation tasks with arrays of microelectromechanical structures (mems). we develop a geometric model for the mechanics of microactuators and a theory of sensorless, parallel manipulation, and we describe efficient algorithms for their evaluation. the theory of limit surfaces offers a purely geometric characterization of microscale contacts between actuator and moving object, which can be used to efficiently predict the motion of the object on an actuator array. it is shown how simple actuator control strategies can be used to uniquely align a part up to symmetry without sensor feedback. this theory is applicable to a wide range of microactuator arrays. our actuators are oscillating structures of single-crystal silicon fabricated in a ic-compatible process. calculations show that these actuators are strong enough to levitate and move e.g. a piece of paper. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_2412",
        "graph": {
            "node_idx": 2412,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    4,
                    12,
                    6,
                    12,
                    13,
                    14,
                    15,
                    4,
                    1,
                    16,
                    17,
                    18,
                    8,
                    19,
                    20,
                    21,
                    11,
                    4,
                    18,
                    11,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                2412,
                15545,
                19571,
                14722,
                15547,
                4413,
                22532,
                22533,
                8452,
                17858,
                23248,
                23235,
                23244,
                23246,
                15319,
                15557,
                17191,
                6934,
                15546,
                6802,
                12954,
                21113
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: information invariants for distributed manipulationin [don4], we described a manipulation task for cooperating mobile robots that can push large, heavy objects. there, we asked whether explicit local and global communication between the agents can be removed from a family of pushing protocols. in this paper, we answer in the affirmative. we do so by using the general methods of [don4] analyzing information invariants. we discuss several measures for the information complexity of the task: (a) how much internal state should the robot retain? (b) how many cooperating agents are required, and how much communication between them is necessary? (c) how can the robot change (side-effect) the environment in order to record state or sensory information to perform a task? (d) how much information is provided by sensors? and (e) how much computation is required by the robot? to answer these questions, we develop a notion of information invariants. we develop a technique whereby one sensor can be constructed from others by adding, deleting, and reallocating (a) - (e) among collaborating autonomous agents. we add a resource to (a) - (e) and ask: (f ) how much information is provided by the task mechanics? by answering this question, we hope to develop information invariants that explicitly trade-off resource (f ) with resources (a) - (e). the protocols we describe here have been implemented in several differ 1 this paper describes research done in the robotics and vision laboratory at cornell university. support for our robotics research is provided in part by the national science foundation under grants no. iri-8802390, iri-9000532, and by a presidential young investigator award, and in part by the air force office of sponsored research, the mathematical sciences institute, intel corporation, and at&t bell laboratories. the third author has been supported by the advanced research projects agency of the defense department under onr contract n00014-92-j-1989, by onr contract n00014-92-j-39, and by nsf contract iri-9006137. this paper is a revised version of a paper presented at the international symposium on robotics research in hidden valley, pa (1993). ent forms, and report on experiments to measure and analyze information invariants using a pair of cooperating mobile robots for manipulation experiments in our laboratory. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_2443",
        "graph": {
            "node_idx": 2443,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    7,
                    11,
                    12,
                    6,
                    13,
                    5,
                    14,
                    15,
                    4,
                    6,
                    3,
                    4,
                    16,
                    17,
                    18,
                    19,
                    20,
                    5,
                    7,
                    21,
                    22,
                    0,
                    6,
                    7,
                    23,
                    1,
                    6,
                    5,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                2443,
                2441,
                9112,
                2439,
                9110,
                7065,
                6432,
                853,
                22220,
                8196,
                8172,
                5887,
                21003,
                21245,
                21718,
                10563,
                14369,
                23697,
                1049,
                8231,
                18030,
                21285,
                22471,
                852,
                24225,
                8792,
                6889,
                18458,
                23391,
                8680,
                7516,
                1038
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: program decomposition for pointer aliasing: a step toward practical analysespointer aliasing analysis is crucial to compile-time analyses for languages with general-purpose pointer usage (such as c), but many aliasing methods have proven quite costly. we present a technique that partitions the statements of a program to allow separate, and therefore possibly different, pointer aliasing analysis methods to be used on independent parts of the program. this decomposition enables exploration of tradeoff between algorithm efficiency and precision. we also present a new, efficient flow-insensitive pointer aliasing algorithm, which is used together with an existing flow-sensitive aliasing algorithm in our experiments. we demonstrate our technique in the context of determining side effects and variable fetches through names containing pointer dereferences (thru-deref mod/ref). initial empirical results using a combination of a flow-sensitive and a flow-insensitive aliasing analysis on the same program, demonstrate that the resulting analysis is much faster than solely using the flow-sensitive method, and obtains similar precision for the thru-deref mod/ref problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_2484",
        "graph": {
            "node_idx": 2484,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    2,
                    1,
                    10,
                    7,
                    11,
                    12,
                    13,
                    10,
                    7,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    6,
                    10,
                    11,
                    12,
                    13,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                2484,
                8270,
                9285,
                9700,
                11043,
                18311,
                11944,
                9286,
                5967,
                10439,
                6733,
                15570,
                23254,
                15574,
                6009,
                24680,
                19855,
                11955,
                11954,
                20444,
                20452,
                4803,
                10441,
                20456,
                7293,
                11950,
                11971,
                11951,
                11967,
                8059,
                11970,
                11804,
                11980,
                11963,
                25052
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the automatic programming of agents that learn mental models and create simple plans of actionan essential component of an intelligent agent is the ability to notice, encode, store, and utilize information about its environment. traditional approaches to program induction have focused on evolving functional or reactive programs. this paper presents mapmaker, an approach to the automatic generation of agents that discover information about their environment, encode this information for later use, and create simple plans utilizing the stored mental models. in this approach, agents are multipart computer programs that communicate through a shared memory. both the programs and the representation scheme are evolved using genetic programming. an illustrative problem of 'gold' collection is used to demonstrate the approach in which one part of a program makes a map of the world and stores it in memory, and the other part uses this map to find the gold the results indicate that the approach can evolve programs that store simple representations of their environments and use these representations to produce simple plans. 1. introduction \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_2494",
        "graph": {
            "node_idx": 2494,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    9,
                    36,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    8,
                    8,
                    9,
                    9
                ]
            ],
            "node_list": [
                2494,
                17698,
                17100,
                3453,
                5954,
                984,
                19570,
                19921,
                6364,
                10548,
                16642,
                4045,
                4865,
                6523,
                2904,
                2906,
                10203,
                6295,
                3435,
                23283,
                9964,
                8523,
                10774,
                18138,
                8522,
                19797,
                17744,
                18624,
                17197,
                18272,
                19438,
                2531,
                913,
                7327,
                20844,
                18391,
                6365
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a comparative study of id3 and backpropagation for english text-to-speech mappingthe performance of the error backpropagation (bp) and id3 learning algorithms was compared on the task of mapping english text to phonemes and stresses. under the distributed output code developed by sejnowski and rosenberg, it is shown that bp consistently out-performs id3 on this task by several percentage points. three hypotheses explaining this difference were explored: (a) id3 is overfitting the training data, (b) bp is able to share hidden units across several output units and hence can learn the output units better, and (c) bp captures statistical information that id3 does not. we conclude that only hypothesis (c) is correct. by augmenting id3 with a simple statistical learning procedure, the performance of bp can be approached but not matched. more complex statistical procedures can improve the performance of both bp and id3 substantially. a study of the residual errors suggests that there is still substantial room for improvement in learning methods for text-to-speech mapping. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_2495",
        "graph": {
            "node_idx": 2495,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                2495,
                16642
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a comparison of anapron with seven other name-pronunciation systemsthis paper presents an experiment comparing a new name-pronunciation system, anapron, with seven existing systems: three state-of-the-art commercial systems (from bellcore, bell labs, and dec), two variants of a machine-learning system (nettalk), and two humans. anapron works by combining rule-based and case-based reasoning. it is based on the idea that it is much easier to improve a rule-based system by adding case-based reasoning to it than by tuning the rules to deal with every exception. in the experiment described here, anapron used a set of rules adapted from mitalk and elementary foreign-language textbooks, and a case library of 5000 names. with these components | which required relatively little knowledge engineering | anapron was found to perform almost at the level of the commercial systems, and significantly better than the two versions of nettalk. this work may not be copied or reproduced in whole or in part for any commercial purpose. permission to copy in whole or in part without payment of fee is granted for nonprofit educational and research purposes provided that all such whole or partial copies include the following: a notice that such copying is by permission of mitsubishi electric research laboratories of cambridge, massachusetts; an acknowledgment of the authors and individual contributions to the work; and all applicable portions of the copyright notice. copying, reproduction, or republishing for any other purpose shall require a license with payment of fee to mitsubishi electric research laboratories. all rights reserved. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_2551",
        "graph": {
            "node_idx": 2551,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    7,
                    18,
                    19,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8
                ]
            ],
            "node_list": [
                2551,
                1958,
                24319,
                24534,
                4282,
                16871,
                8171,
                14987,
                2195,
                23093,
                24465,
                21002,
                8178,
                24517,
                18609,
                15535,
                18012,
                7404,
                22763,
                12574
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: achieving reuse with software system generatorsa key problem in software engineering is building complex software systems economically. we believe that domain-specific software system generators is a promising technology for attacking this problem. generators are realizations of domain models that explain how software systems in a target domain can be assembled from previously written components. thus, generators require significant problems in software reuse to be solved. in this paper, we review a related set of projects that we have undertaken to understand better the unusual software design techniques that are required and to evaluate the productivity and performance potentials of software system generators. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_2563",
        "graph": {
            "node_idx": 2563,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                2563,
                24164,
                25116
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a periodic object model for real-time systemstechnical report 93-05-02 may 1993 abstract we introduce time-sensitive objects (tso's), a data-oriented model for real-time systems. the tso model imposes time constraints on object values through validity intervals and object histories. periodic objects, a class of objects within the tso model, are described in detail and compared with more traditional periodic processes. we identify advantages of periodic objects including greater scheduling independence, more opportunity for concurrency, and tolerance of timing faults. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_2628",
        "graph": {
            "node_idx": 2628,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    5,
                    6,
                    8,
                    6,
                    12,
                    7,
                    13,
                    14,
                    15,
                    16,
                    17,
                    11,
                    18,
                    19,
                    6,
                    20,
                    21,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                2628,
                24167,
                17006,
                24301,
                2844,
                10430,
                19329,
                9711,
                856,
                599,
                6908,
                17847,
                18820,
                9710,
                15359,
                855,
                4416,
                10876,
                2627,
                851,
                20234,
                7340,
                21545
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improving the performance of dsm systems via compiler involvementdistributed shared memory (dsm) systems provide an illusion of shared memory on distributed memory systems such as workstation networks and some parallel computers such as the cray t3d and convex spp-1. this illusion is provided either by enhancements to hardware, software, or a combination thereof. on these systems, users can write programs using a shared memory style of programming instead of message passing which is tedious and error prone. our experience with one such system, treadmarks, has shown that a large class of applications do not perform well on these systems. treadmarks is a software distributed shared memory system designed by rice university researchers to run on networks of workstations and massively parallel computers. due to the distributed nature of the memory system, shared memory synchronization primitives such as locks and barriers often cause significant amounts of communication. we have provided a set of powerful primitives that will alleviate the problems with locks and barriers on such systems. we have designed two sets of primitives, the first set maintains coherence and is easy to use by a programmer, the second set does not maintain coherence and is best used by a compiler. these primitives require that the underlying dsm be enhanced. we have implemented some of our primitives on the treadmarks dsm system and obtained reasonable performance improvements on application kernels from molecular dynamics and numerical analysis. furthermore, we have identified key compiler optimizations that use the non-coherent primitives to reduce synchronization overhead and improve the performance of dsm systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_2633",
        "graph": {
            "node_idx": 2633,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    0,
                    2,
                    3,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                2633,
                2631,
                7229,
                18470
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a binocular, foveated active vision systemthis report documents the design and implementation of a binocular, foveated active vision system as part of the cog project at the mit artificial intelligence laboratory. the active vision system features a 3 degree of freedom mechanical platform that supports four color cameras, a motion control system, and a parallel network of digital signal processors for image processing. to demonstrate the capabilities of the system, we present re sults from four sample visual-motor tasks. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_2652",
        "graph": {
            "node_idx": 2652,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    5,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    5,
                    19,
                    24,
                    25,
                    26,
                    27,
                    28
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                2652,
                3243,
                17091,
                5058,
                6884,
                3678,
                16738,
                10296,
                18117,
                5748,
                22545,
                23598,
                10026,
                11029,
                14688,
                14574,
                2183,
                22547,
                3814,
                22557,
                14747,
                1639,
                22835,
                821,
                13748,
                4684,
                15241,
                22979,
                22980
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: spiffi a scalable parallel file system for the intel paragonthis paper presents the design and performance of spiffi, a scalable high-performance parallel file system intended for use by extremely i/o intensive applications including grand challenge scientific applications and multimedia systems. this paper contains experimental results from a spiffi prototype on a 64 node/64 disk intel paragon. the results show that spiffi provides high performance and linear scaleup on real hardware. the paper also explains how shared file pointers (i.e., file pointers that are shared by multiple processes) can simplify the design of a parallel application. by sequentializing i/o accesses and by providing dynamic i/o load balancing, a shared file pointer may even improve an application's performance. this paper also presents the predictions of a spiffi simulator that we validated using the prototype. the simulator results show that spiffi continues to provide high performance even when it is scaled to configurations with as many as 128 disks or 256 compute nodes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_2689",
        "graph": {
            "node_idx": 2689,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    4,
                    6,
                    2,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    4
                ]
            ],
            "node_list": [
                2689,
                10003,
                4914,
                18456,
                10788,
                21169,
                19633
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: negotiation on data allocation in multi-agent environments example of a distributed knowledge system is thewe propose a strategic negotiation model that takes into account the passage of time during the negotiation process itself in order to solve the problem of data allocation in environments with self-motivated servers which have no common interest and no central controller. the model considers situations characterized by complete, as well as incomplete, information. using this negotiation mechanism, the servers have simple and stable negotiation strategies that result in efficient agreements without delays. we provide heuristics for finding the details of the strategies which depend on the specific settings of the environment, and demonstrate the quality of the heuristics, using simulations. we prove that our methods yield better results than the static allocation policy currently used for data allocation for servers in distributed systems. negotiation is proposed in distributed artificial intelligence (dai) as a means for agents to communicate and compromise to reach mutually beneficial agreements. negotiation is especially beneficial in multi-agent systems (ma), where the agents are self-motivated, and where there is no central controller (rosenschein & zlotkin 1994). in (kraus, wilkenfeld, & zlotkin 1995), a strategic model of negotiation (os-borne & rubinstein 1990) was developed that takes the passage of time during the negotiation itself into consideration. it provides simple, efficient, and stable strategies for automated negotiators in a broad range of situations. in this paper, we apply and extend the strategic model of negotiation to the problem of data allocation in multi-agent environments. in our application, there are several information servers which are self-motivated but share data, and they negotiate on the allocation of data items. (nasa 1997). it is a distributed system which supports archival data and distribution of data at multiple and independent data centers (called daacs). the current policy for data allocation in nasa is static: each daac specializes in some topics. when new data arrives at a daac, the daac checks if the data is relevant to one of its topics, and, if so, it uses other criteria, such as storage cost, to decide whether to accept the data and store it in its database. if the data is not relevant to the daac, it may forward it to another daac whose topics seem more relevant. previous work on file (data) allocation in distributed systems (e.g., (dowdy & foster 1982; du & maryanski 1988)) considers systems in which a central decision maker exists, who tries to maximize the performance of the overall system. this assumption is not valid in many cases today, when trying to distribute information among self-motivated servers. we propose the use of negotiation as a solution method for environments with self-motivated servers which have no common interest and no central controller. we applied the strategic model of negotiation to such environments and provided utility functions for the agents. as it turns out, some of the assumptions made in previous negotiation models, e.g., (kraus, wilkenfeld, & zlotkin 1995), are not valid in our situations. this required the adaptation of the negotiation model and finding new stable strategies. using these strategies, the agents reach efficient agreements without delay. we provide heuristics for finding the details of the strategies, which depend on the specific setting of the environment, and we also demonstrate the heuristics' quality, using simulations. we deal with cases of complete information systems, as well as that of incomplete information. we proved that our methods yield better results than the static allocation policy currently used in such systems. using negotiation efficiency by self-motivated servers demonstrates the benefits of using a negotiation mechanism in real world, multi-agent environments. in the environment which we consider, there is a set of several (more than two) information servers, denoted \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_2740",
        "graph": {
            "node_idx": 2740,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                2740
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: portable checkpointing for heterogeneous architecturescurrent approaches for checkpointing assume system homogeneity, where checkpointing and recovery are both performed on the same processor architecture and operating system configuration. sometimes it is desirable or necessary to recover a failed computation on a different processor architecture. for such situations checkpointing and recovery must be portable. in this paper, we argue that source-to-source compilation is an appropriate concept for this purpose. we describe the compilation techniques that we developed for the design of the c2ftc prototype. the c2ftc compiler enables machine-independent checkpoints by automatic generation of checkpointing and recovery code. sequential c programs are compiled into fault tolerant c programs, whose checkpoints can be migrated across heterogeneous networks, and restarted on binary incompatible architectures. experimental results on several systems provide evidence that the performance penalty of portable checkpointing is negligible for realistic checkpointing frequencies. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_2774",
        "graph": {
            "node_idx": 2774,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                2774,
                4041,
                9954,
                4426,
                17049,
                7828,
                430,
                12575,
                9156
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: simple learning algorithms for decision trees and multivariate polynomialsthere were two techniques in the literature for learning multivariate polynomials and decision trees. these are learning decision trees under the uniform distribution via the fourier spectrum [kushilevitz, mansour 93 and jackson 94] and learning decision trees and multivariate polynomials under any distribution via lattice theory [bshouty 94, schapire and sellie 93]. these two approaches are used for proving the learnability of many other interesting classes such as cdnf (poly size dnf and cnf) under any distribution and dnf and ac 0 under the uniform distribution. in this paper we develop a new approach. learning decision trees and multivari-ate polynomials via multivariate interpolation. this is an algebraic approach that is a modification of the approaches used in [roth, benedek 89 and bshouty 95] and is based on the divide and conquer technique for learning [bshouty 95]. this new approach yelds simple learning algorithms for multivariate polynomials and decision trees over fields under any constant bounded product distribution. the output hypothesis is a (single) multivariate polynomial that is an *-approximation of the target under any constant bounded product distribution. previous approaches do not achieve this property. the new approach also solves learnability of many other problems that cannot be solved using previous approaches. problems include pac-learning with membership queries of j-disjoint dnf (intersection of any j terms is empty) under any constant bounded product distribution, pac-learning with membership queries of multivari-ate polynomial with bounded degree over any field under the constant bounded product distribution. learning multivariate polynomials with bounded term size. this in particular gives a learning algorithm for o(log n)-depth decision tree from membership queries only and a new learning algorithm of any multivariate polynomial over sufficiently large fields from membership queries only. we also show that all the results we have for learning from membership queries only are the best that can be achieved. we also prove learnability of xor of decision trees and sum of decision trees with leaves that contain values from some field. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_2776",
        "graph": {
            "node_idx": 2776,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    2,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    6,
                    18,
                    19,
                    20,
                    2,
                    21,
                    12,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    2,
                    28
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    9
                ]
            ],
            "node_list": [
                2776,
                1787,
                3462,
                19057,
                17411,
                19064,
                932,
                17502,
                6294,
                10317,
                23737,
                9734,
                16689,
                16003,
                24212,
                1789,
                11567,
                14698,
                2016,
                2836,
                24423,
                930,
                10591,
                7062,
                20044,
                24975,
                19962,
                18899,
                19220
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an introduction to software architecturealso appears as cmu software engineering institute technical report cmu/sei-94-tr-21, esc-tr-94-21. this work was funded in part by the department of defense advanced research project agency under grant mda972-92-j-1002, by national science foundation grants ccr-9109469 and ccr-9112880, and by a grant from siemens corporate research. it was also funded in part by the carnegie mellon university school of computer science and software engineering institute (which is sponsored by the u.s. department of defense). the views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the u.s. government, the department of defense, the national science foundation, siemens corporation, or carnegie mellon university. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_2791",
        "graph": {
            "node_idx": 2791,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    2,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    9,
                    33,
                    34,
                    26,
                    35,
                    20,
                    27,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                2791,
                21443,
                8088,
                2792,
                14025,
                14643,
                13412,
                8941,
                13675,
                5559,
                23043,
                8433,
                8087,
                9178,
                24766,
                14144,
                22081,
                9982,
                9919,
                12644,
                23042,
                4761,
                14647,
                22488,
                2787,
                2790,
                22500,
                2782,
                21421,
                1188,
                21673,
                14662,
                14649,
                3942,
                14648,
                22578,
                23044
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient support of location transparency in concurrent object-oriented programming languageswe describe the design of a runtime system for a fine-grained concurrent object-oriented (actor) language and its performance. the runtime system provides considerable flexibility to users; specifically, it supports location transparency, actor creation and dynamic placement, and migration. the runtime system includes an efficient distributed name server, a latency hiding scheme for remote actor creation, and a compiler-controlled intra-node scheduling mechanism for local messages and dynamic load balancing. our preliminary evaluation results suggest that the efficiency that is lost by the greater flexibility of actors can be restored by an efficient runtime system which provides an open interface that can be used by a compiler to allow optimizations. on several standard algorithms, the performance results for our system are comparable to efficient c implementations. key words: concurrent object-oriented programming, actors, location transparency, mi gration \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_2792",
        "graph": {
            "node_idx": 2792,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                2792,
                23042
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient compilation of concurrent call/return communication in actor-based programming languagesconcurrent call/return communication (ccrc) allows programmers to conveniently express a communication pattern where a sender invokes a remote operation and uses the result to continue its computation. the blocking semantics requires context switching for efficient utilization of computation resource. we present a compilation technique which allows programmers to use ccrc with the cost of non-blocking asynchronous communication plus minimum context switch cost. the technique transforms ccrcs into non-blocking asynchronous sends and encapsulates continuations into separate objects. a data flow analysis is used to guarantee that only necessary context is cached in continuation objects. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_2799",
        "graph": {
            "node_idx": 2799,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    3,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                2799,
                16685,
                18606,
                19198,
                19199,
                1390,
                2730,
                16034,
                10292
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: skyblue: a multi-way local propagation constraint solver for user interface constructionmany user interface toolkits use constraint solvers to maintain geometric relationships between graphic objects, or to connect the graphics to the application data structures. one efficient and flexible technique for maintaining constraints is multi-way local propagation, where constraints are represented by sets of method procedures. to satisfy a set of constraints, a local propagation solver executes one method from each constraint. skyblue is an incremental constraint solver that uses local propagation to maintain a set of constraints as individual constraints are added and removed. if all of the constraints cannot be satisfied, skyblue leaves weaker constraints unsatisfied in order to satisfy stronger constraints (maintaining a constraint hierarchy). skyblue is a more general successor to the deltablue algorithm that satisfies cycles of methods by calling external cycle solvers and supports multi-output methods. these features make skyblue more useful for constructing user in terfaces, since cycles of constraints can occur frequently in user interface applications and multi-output methods are necessary to represent some useful constraints. this paper discusses some of the applications that use sky-blue, presents times for some user interface benchmarks and describes the skyblue algorithm in detail. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_2807",
        "graph": {
            "node_idx": 2807,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    6,
                    7,
                    8,
                    0,
                    9,
                    10,
                    11,
                    12,
                    13,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                2807,
                8817,
                2806,
                16733,
                606,
                5970,
                18264,
                8816,
                8819,
                22045,
                22349,
                6872,
                11724,
                3307
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hub4 language modeling using domain interpolation and data clustering adapting language models to the speechin sri's language modeling experiments for the hub4 domain, three basic approaches were pursued: interpolating multiple models estimated from hub4 and non-hub4 training data, adapting the language model (lm) to the focus conditions, and adapting the lm to different topic types. in the first approach, we built separate lms for the closely transcribed hub4 material (acoustic training transcripts) and the loosely transcribed hub4 material (lm training data), as well as the north-american business news (nabn) and switchboard training data, projected onto the hub4 vocabulary. by interpolating the probabilities obtained from these models, we obtained a 20% reduction in perplexity and a 1.8% reduction in word error rate, compared to a baseline hub4-only language model. finally, we identify the problems and future directions of our work. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_2810",
        "graph": {
            "node_idx": 2810,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    6,
                    19,
                    27,
                    6,
                    19,
                    28,
                    29,
                    10,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                2810,
                6809,
                1443,
                20160,
                8568,
                12096,
                20564,
                2259,
                22887,
                21807,
                24054,
                13698,
                11620,
                21750,
                5408,
                24400,
                21666,
                17914,
                5345,
                13658,
                4534,
                7965,
                11602,
                11604,
                9873,
                9992,
                8567,
                13742,
                21723,
                13657,
                6394,
                10216,
                24537,
                24954,
                24955,
                10220,
                14916,
                9197,
                22691,
                24953
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiresolution analysis of arbitrary meshesin computer graphics and geometric modeling, shapes are often represented by triangular meshes. with the advent of laser scanning systems, meshes of extreme complexity are rapidly becoming commonplace. such meshes are notoriously expensive to store, transmit, render, and are awkward to edit. multiresolu-tion analysis offers a simple, unified, and theoretically sound approach to dealing with these problems. a multiresolution representation of a mesh consists of a simple base mesh together with a sequence of local corrections of decreasing magnitude. by omitting small correction terms we can efficiently construct approximations with fewer triangles for compact storage and fast transmission and rendering. when editing meshes it is often desirable to modify the gross shape without affecting surface details. we can accomplish this by modifying terms in the approximation with large spatial extent. lounsbery et al. have recently developed a technique for creating multiresolution representations for a restricted class of meshes with subdivision connectivity. unfortunately, meshes encountered in practice typically do not meet this requirement. in this paper we present a method for overcoming the subdivision connectivity restriction, meaning that completely arbitrary meshes can now be converted to multiresolution form. the method is based on the approximation of an arbitrary initial mesh m by a mesh m j that has subdivision connectivity and is guaranteed to be within a specified tolerance. multiresolution approximation of an arbitrary mesh thus proceeds in two steps: in the first step we approximate m by m j , and in the second step we convert m j to a multiresolution representation using the methods of lounsbery et al. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_2824",
        "graph": {
            "node_idx": 2824,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    8,
                    9,
                    10,
                    11,
                    1,
                    12,
                    3,
                    9,
                    5,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    5,
                    21,
                    1,
                    3,
                    0,
                    4,
                    9,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                2824,
                5423,
                2823,
                2564,
                18870,
                19193,
                2821,
                141,
                3782,
                3783,
                23425,
                24031,
                1832,
                24164,
                6307,
                7718,
                10777,
                7799,
                2376,
                17435,
                19156,
                9895
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a practical technique for bounding the time between events in concurrent real-time systemsshowing that concurrent systems satisfy timing constraints on their behavior is difficult, but may be essential for critical applications. most methods are based on some form of reachability analysis and require construction of a state space of size that is, in general, exponential in the number of components in the concurrent system. in an earlier paper with l. k. dillon and j. c. wileden, we described a technique for finding bounds on the time between events without enumerating the state space, but the technique applies chiefly to the case of logically concurrent systems executing on a uniprocessor, in which events do not overlap in time. in this paper, we extend that technique to obtain upper bounds on the time between events in maximally parallel concurrent systems. our method does not require construction of the state space and the results of preliminary experiments show that, for at least some systems with large state spaces, it is quite tractable. we also briefly describe the application of our method to the case in which there are multiple processors, but several processes run on each processor. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_2827",
        "graph": {
            "node_idx": 2827,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    5,
                    16,
                    1,
                    12,
                    5,
                    17,
                    18,
                    19,
                    20,
                    12,
                    21,
                    14,
                    22,
                    23,
                    24,
                    10,
                    8,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    5,
                    5,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    10,
                    10
                ]
            ],
            "node_list": [
                2827,
                2341,
                19466,
                11937,
                17804,
                2831,
                21501,
                11863,
                2826,
                16749,
                11869,
                16629,
                15806,
                3093,
                2829,
                20362,
                25036,
                11856,
                10413,
                3523,
                3304,
                4907,
                20365,
                11868,
                11870
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: planning as refinement search: a unified framework for evaluating design tradeoffs in partial-order planningdespite the long history of classical planning, there has been very little comparative analysis of the performance tradeoffs offered by the multitude of existing planning algorithms. this is partly due to the many different vocabularies within which planning algorithms are usually expressed. in this paper we show that refinement search provides a unifying framework within which various planning algorithms can be cast and compared. specifically, we will develop refinement search semantics for planning, provide a generalized algorithm for refinement planning, and show that planners that search in the space of (partial) plans are specific instantiations of this algorithm. the different design choices in partial order planning correspond to the different ways of instantiating the generalized algorithm. we will analyze how these choices affect the search-space size and refinement cost of the resultant planner, and show that in most cases they trade one for the other. finally, we will concentrate on two specific design choices, viz., protection strategies and tractability refinements, and develop some hypotheses regarding the effect of these choices on the performance on practical problems. we will support these hypotheses with a series of focused empirical studies. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_2828",
        "graph": {
            "node_idx": 2828,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2,
                    7,
                    8,
                    4,
                    6,
                    9,
                    10,
                    11,
                    12,
                    2,
                    13,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                2828,
                15806,
                14844,
                2951,
                2950,
                4616,
                16087,
                2953,
                7623,
                23705,
                23707,
                23709,
                14845,
                24285
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: understanding and extending graphplanwe provide a reconstruction of blum and fursts graphplan algorithm, and use the reconstruction to extend and improve the original algorithm in several ways. in our reco n-struction, the process of growing the planning-graph and inferring mutex relations corr e-sponds to doing forward statespace refinement over disjunctively represented plans. the backward search phase of graphplan corresponds to solving a binary dynamic constraint satisfaction problem. our reconstruction sheds light on the sources of strength of graph-plan. we also use the reconstruction to explain how graphplan can be made goal-directed, how it can be extended to handle actions with conditional effects, and how backward statespace refinement can be generalized to apply to disjunctive plans. finally, we discuss how the backward search phase of graphplan can be improved by applying techniques from csp literature, and by teasing apart planning and scheduling (resource allocation) phases in graphplan. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_2830",
        "graph": {
            "node_idx": 2830,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    1,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5
                ]
            ],
            "node_list": [
                2830,
                15806,
                17036,
                6076,
                19577,
                2831,
                23710,
                4616,
                24878,
                22035,
                14100,
                14516
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automatically configuring constraint satisfaction programs: a case studymulti-tac is a learning system that synthesizes heuristic constraint satisfaction programs. the system takes a library of generic algorithms and heuristics and specializes them for a particular application. we present a detailed case study with three different distributions of a single combinatorial problem, \"minimum maximal matching\", and show that multi-tac can synthesize programs for these different distributions that perform on par with hand-coded programs and that exceed the performance of some well-known satisfiability algorithms. in synthesizing a program, multi-tac bases its choice of heuristics on an instance distribution, and we demonstrate that this capability has a significant impact on the results. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_2843",
        "graph": {
            "node_idx": 2843,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                2843,
                599,
                17595,
                2846,
                2845,
                18669,
                19226,
                19329,
                10430,
                12162,
                7984
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: compiler and run-time support for adaptive load balancing in software distributed shared memory systemsnetworks of workstations offer inexpensive and highly available high performance computing environments. a critical issue for achieving good performance in any parallel system is load balancing, even more so in workstation environments where the machines might be shared among many users. in this paper, we present and evaluate a system that combines compiler and run-time support to achieve load balancing dynamically on software distributed shared memory programs. we use information provided by the compiler to help the run-time system distribute the work of the parallel loops, not only according to the relative power of the processors, but also in such a way as to minimize communication and page sharing. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_2858",
        "graph": {
            "node_idx": 2858,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                2858,
                8426,
                2857
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: type graphs in practice proposed as a domain suitable for inferring disjunctive and recursive typesupmail technical report no. 141 april 7, 1997 issn 1100-0686 abstract of central importance are the operations used to ensure termination of the analysis, i.e., the methods used to introduce recursiveness in the inferred types. we evaluate performance of several such methods on some prolog programs of realistic size. we show that none of the methods previously proposed in the literature are, in fact, feasible as described. we also show that the problems are not primarily dependent on the size of the analysed program, but instead on the complexity, and thus size, of the intermediate types. we propose and evaluate some methods to overcome these problems. we conclude that using the upper bound operation on type graphs will, in practice, make the analysis infeasible for many typical pro grams. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_2877",
        "graph": {
            "node_idx": 2877,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                2877,
                3860,
                24638,
                24679,
                19159,
                12302,
                16844,
                16992,
                15670,
                17962,
                1871,
                13887,
                12303,
                22105,
                23167,
                15461
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: of models for video and image librariesm.i.t media laboratory perceptual computing section technical report no. 360 submitted to ibm systems journal; revised 4/23/96 abstract the average person with a computer will soon have access to the world's collections of digital video and images. however, unlike text which can be alphabetized or numbers which can be ordered, image and video has no general language to aid in its organization. although tools which can \"see\" and \"understand\" the content of imagery are still in their infancy, they are now at the point where they can provide substantial assistance to users in navigating through visual media. this paper describes new tools based on \"vision texture\" for modeling image and video. the focus of this research is the use of a society of low-level models for performing relatively high-level tasks, such as retrieval and annotation of image and video libraries. this paper surveys our recent and present research in this fast-growing area. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_2925",
        "graph": {
            "node_idx": 2925,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    12,
                    13,
                    14,
                    15,
                    2,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    3,
                    23,
                    24,
                    25,
                    23,
                    2,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    17,
                    33,
                    34
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    9,
                    10
                ]
            ],
            "node_list": [
                2925,
                2926,
                5554,
                17303,
                3403,
                7983,
                1745,
                2772,
                18176,
                8522,
                9790,
                17292,
                5127,
                2924,
                3164,
                21398,
                3027,
                17712,
                9634,
                1033,
                5553,
                9035,
                3161,
                7982,
                6710,
                2530,
                17429,
                6730,
                19434,
                193,
                8059,
                21395,
                4267,
                18138,
                18863
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: combining connectionist and symbolic learning to refine certainty-factor rule basesthis paper describes rapture | a system for revising probabilistic knowledge bases that combines connectionist and symbolic learning methods. rapture uses a modified version of backpropagation to refine the certainty factors of a probabilistic rule base and it uses id3's information-gain heuristic to add new rules. results on refining three actual expert knowledge bases demonstrate that this combined approach generally performs better than previous methods. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_2927",
        "graph": {
            "node_idx": 2927,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    3,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                2927,
                16699,
                19440,
                11529,
                20588,
                5087,
                11530
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the loading time scheduling problem1 an extended abstract of this paper appeared in the proceedings of the 36th ieee conference on foun dations of computer science, milwaukee, wisconsin, (1995), pp. 72-81. 4 department of computer science, technion, haifa 32000, israel. research supported in part by grant no. 92-00225 from the united states-israel binational science foundation (bsf), jerusalem. research also supported by the technion v.p.r. fund no. 120-882. israel. e-mail : naor@cs.technion.ac.il. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_2930",
        "graph": {
            "node_idx": 2930,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    2,
                    3,
                    6,
                    8,
                    13,
                    9,
                    14,
                    15,
                    6,
                    10,
                    16,
                    3,
                    17,
                    3,
                    18,
                    8,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    18,
                    12,
                    5,
                    2,
                    10,
                    2,
                    6,
                    29
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                2930,
                4662,
                9184,
                5921,
                17817,
                17085,
                7051,
                502,
                8017,
                4879,
                6508,
                874,
                15322,
                6208,
                8715,
                6861,
                1598,
                9156,
                9726,
                7639,
                5313,
                15608,
                3168,
                18259,
                9013,
                6453,
                4934,
                4426,
                19890,
                1980
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: statistical queries and faulty pac oraclesin this paper we study learning in the pac model of valiant [18] in which the example oracle used for learning may be faulty in one of two ways: either by misclassifying the example or by distorting the distribution of examples. we first consider models in which examples are misclassified. kearns [12] recently showed that efficient learning in a new model using statistical queries is a sufficient condition for pac learning with classification noise. we show that efficient learning with statistical queries is sufficient for learning in the pac model with malicious error rate proportional to the required statistical query accuracy. one application of this result is a new lower bound for tolerable malicious error in learning monomials of k literals. this is the first such bound which is independent of the number of irrelevant attributes n. we also use the statistical query model to give sufficient conditions for using distribution specific algorithms on distributions outside their prescribed domains. a corollary of this result expands the class of distributions on which we can weakly learn monotone boolean formulae. we also consider new models of learning in which examples are not chosen according to the distribution on which the learner will be tested. we examine three variations of distribution noise and give necessary and sufficient conditions for polynomial time learning with such noise. we show containments and separations between the various models of faulty oracles. finally, we examine hypothesis boosting algorithms in the context of learning with distribution noise, and show that schapire's result regarding the strength of weak learnabil-ity [17] is in some sense tight in requiring the weak learner to be nearly distribution free. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_2940",
        "graph": {
            "node_idx": 2940,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                2940,
                16700,
                3578,
                23043,
                16051
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: providing for an open, real-time corbawhile corba provides an infrastructure which allows objects to communicate, independent of the specific techniques, languages, and platforms used to implement the objects, it is not yet suited for real-time applications since corba lacks essential quality-of-service (qos) features. current work on real-time corba includes an off-line scheduled, hard, real-time system based on rate-monotonic scheduling and an on-line scheduled, best-effort, real-time system based on the earliest-deadline-first algorithm. the former provides qos guarantees at the expense of run-time scheduling flexibility while the latter provides the complement. in this paper, we propose an approach which provides the advantages of both, that is, qos guarantees and run-time scheduling flexibility. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_2968",
        "graph": {
            "node_idx": 2968,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    6,
                    7,
                    13,
                    20,
                    21,
                    22,
                    4,
                    23,
                    19,
                    24,
                    25,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                2968,
                11112,
                9305,
                18391,
                4907,
                3522,
                2826,
                14151,
                24885,
                22282,
                6449,
                18974,
                17043,
                10413,
                10668,
                10414,
                19065,
                19322,
                7184,
                20365,
                3523,
                3304,
                3286,
                2829,
                11868,
                11870,
                11869
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: lazy incremental learning of control knowledge for efficiently obtaining quality plansgeneral-purpose generative planners use domain-independent search heuristics to generate solutions for problems in a variety of domains. however, in some situations these heuristics force the planner to perform inefficiently or obtain solutions of poor quality. learning from experience can help to identify the particular situations for which the domain-independent heuristics need to be overridden. most of the past learning approaches are fully deductive and eagerly acquire correct control knowledge from a necessarily complete domain theory and a few examples to focus their scope. these learning strategies are hard to generalize in the case of nonlinear planning, where it is difficult to capture correct explanations of the interactions among goals, multiple planning operator choices, and situational data. in this article, we present a lazy learning method that combines a deductive and an inductive strategy to efficiently learn control knowledge incrementally with experience. we present hamlet, a system we developed that learns control knowledge to improve both search efficiency and the quality of the solutions generated by a nonlinear planner, namely prodigy4.0. we have identified three lazy aspects of our approach from which we believe hamlet greatly benefits: lazy explanation of successes, incremental refinement of acquired knowledge, and lazy learning to override only the default behavior of the problem solver. we show empirical results that support the effectiveness of this overall lazy learning approach, in terms of improving the efficiency of the problem solver, and the quality of the solutions produced. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_2985",
        "graph": {
            "node_idx": 2985,
            "edge_index": [
                [
                    1,
                    1
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                2985,
                2987
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: finding mixed strategies with small supports in extensive form gamesthe complexity of algorithms that compute strategies or operate on them typically depends on the representation length of the strategies involved. one measure for the size of a mixed strategy is the number of strategies in its support|the set of pure strategies to which it gives positive probability. this paper investigates the existence of \"small\" mixed strategies in extensive form games, and how such strategies can be used to create more efficient algorithms. the basic idea is that, in an extensive form game, a mixed strategy induces a small set of realization weights that completely describe its observable behavior. this fact can be used to show that for any mixed strategy , there exists a realization-equivalent mixed strategy 0 whose size is at most the size of the game tree. for a player with imperfect recall, the problem of finding such a strategy 0 (given the realization weights) is np-hard. on the other hand, if is a behavior strategy, 0 can be constructed from in time polynomial in the size of the game tree. in either case, we can use the fact that mixed strategies need never be too large for constructing efficient algorithms that search for equilibria. in particular, we construct the first exponential-time algorithm for finding all equilibria of an arbitrary two-person game in extensive form. fl research supported in part by onr contract n00014-91-c-0026, by the air force office of scientific research (afsc) under contract f49620-91-c-0080, and by a university of california president's postdoctoral fellowship. some of this work was done while daphne koller was at stanford university. the united states government is authorized to reproduce and distribute reprints for governmental purposes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_2987",
        "graph": {
            "node_idx": 2987,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                2987
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient computation of equilibria for extensive two-person gamesthe nash equilibria of a two-person, non-zero-sum game are the solutions of a certain linear complementarity problem (lcp). in order to use this for solving a game in extensive form, it is first necessary to convert the game to a strategic description such as the normal form. the classical normal form, however, is often exponentially large in the size of the game tree. in this paper we suggest an alternative approach, based on the sequence form of the game. for a game with perfect recall, the sequence form is a linear sized strategic description, which results in an lcp of linear size. for this lcp, we show that an equilibrium is found by lemke's algorithm, a generalization of the lemke-howson method. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_3022",
        "graph": {
            "node_idx": 3022,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    3,
                    5,
                    8,
                    10,
                    21,
                    22,
                    3,
                    2,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    1,
                    32,
                    33,
                    34,
                    35,
                    21,
                    27,
                    36,
                    37,
                    8,
                    2,
                    38,
                    39,
                    25,
                    40,
                    28,
                    4,
                    41,
                    42,
                    21,
                    43,
                    31,
                    5,
                    44,
                    45,
                    4,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    21
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                3022,
                6645,
                7599,
                7600,
                1596,
                981,
                3232,
                22677,
                980,
                2374,
                16154,
                17825,
                18731,
                18355,
                17612,
                20439,
                20757,
                3198,
                19167,
                3197,
                22877,
                1937,
                23825,
                7652,
                24564,
                429,
                1604,
                24860,
                737,
                4663,
                8759,
                8364,
                24193,
                18859,
                24831,
                17574,
                4246,
                11724,
                3234,
                16733,
                3020,
                7668,
                3017,
                3820,
                24269,
                19659,
                2250,
                16634,
                7669,
                22229,
                24795,
                9553,
                6396
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on-line learning of linear functionswe present an algorithm for the on-line learning of linear functions which is optimal to within a constant factor with respect to bounds on the sum of squared errors for a worst case sequence of trials. the bounds are logarithmic in the number of variables. furthermore, the algorithm is shown to be optimally robust with respect to noise in the data (again to within a constant factor). key words. machine learning; computational learning theory; on-line learning; linear functions; worst-case loss bounds; adaptive filter theory. subject classifications. 68t05. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_3033",
        "graph": {
            "node_idx": 3033,
            "edge_index": [
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                3033,
                6434,
                17458
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: gaze tracking for multimodal human-computer interactionthis paper discusses the problem of gaze tracking and its applications to multimodal human-computer interaction. the function of a gaze tracking system can be either passive or active. for example, a system can identify user's message target by monitoring the user's gaze, or the user could use his gaze to directly control an application or launch actions. we have developed a real-time gaze tracking system that estimates the 3d position and rotation (pose) of a user's head. we demonstrate the applications of the gaze tracker to human-computer interaction by two examples. the first example shows that gaze tracker can help speech recognition systems by switching language model and grammar based on user's gaze information. the second example illustrates the combination of the gaze tracker and a speech recognizer to view a panorama image. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_3057",
        "graph": {
            "node_idx": 3057,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                3057,
                16713
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: design of representation-changing algorithmsthis research is supported by the wright laboratory, aeronautical systems center, air force materiel command, usaf, and the advanced research projects agency (arpa) under grant number f33615-93-1-1330. the views and conclusions contained in this document are those of the author and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of wright laboratory or the u. s. government. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_3080",
        "graph": {
            "node_idx": 3080,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                3080,
                16719,
                17308,
                17377,
                23419
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: informed prefetching and cachingthis research was supported in part by advanced research projects agency contracts dabt63-93-c-0054 and n00174-96-0002, in part by the data storage systems center under national science foundation grant number ecd-8907068, in part by an ibm graduate fellowship, and in part by generous contributions from the member companies of the parallel data consortium: hewlett-packard laboratories, symbios logic, data general, compaq, ibm corporation, seagate technology, emc corporation, storage technology corporation, and digital equipment corporation. the views and conclusions contained in this document are my own and should not be interpreted as representing the official policies, either expressed or implied, of any supporting organization or the u.s. government. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_3085",
        "graph": {
            "node_idx": 3085,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    5,
                    11,
                    12,
                    13,
                    14,
                    15,
                    0,
                    16,
                    5,
                    17,
                    18,
                    7,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    3,
                    27,
                    28,
                    29,
                    7,
                    21,
                    30,
                    23,
                    7,
                    31,
                    28,
                    4,
                    32,
                    33,
                    3,
                    34,
                    19,
                    24,
                    23,
                    35,
                    36,
                    5,
                    37,
                    38,
                    31,
                    39
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                3085,
                7037,
                3440,
                996,
                3296,
                10956,
                997,
                9691,
                10705,
                17900,
                5082,
                9700,
                10713,
                23947,
                24186,
                24257,
                24646,
                9610,
                1273,
                10559,
                20082,
                9609,
                20135,
                4638,
                3555,
                17882,
                16793,
                8974,
                18036,
                9876,
                21032,
                9943,
                4242,
                17072,
                19547,
                20353,
                18812,
                13577,
                9693,
                24019
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: boltzmann chains and hidden markov modelswe propose a statistical mechanical framework for the modeling of discrete time series. maximum likelihood estimation is done via boltzmann learning in one-dimensional networks with tied weights. we call these networks boltzmann chains and show that they contain hidden markov models (hmms) as a special case. our framework also motivates new architectures that address particular shortcomings of hmms. we look at two such architectures: parallel chains that model feature sets with disparate time scales, and looped networks that model long-term dependencies between hidden states. for these networks, we show how to implement the boltzmann learning rule exactly, in polynomial time, without resort to simulated or mean-field annealing. the necessary computations are done by exact decimation procedures from statistical mechanics. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_3088",
        "graph": {
            "node_idx": 3088,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    12,
                    13,
                    14,
                    15,
                    6,
                    16,
                    4,
                    5,
                    12,
                    15,
                    17,
                    18,
                    19,
                    20,
                    21,
                    12,
                    22,
                    23,
                    24,
                    25,
                    26,
                    7,
                    17,
                    27,
                    28,
                    3,
                    29,
                    30,
                    31,
                    9,
                    12,
                    9,
                    9,
                    5,
                    32,
                    33,
                    34,
                    26,
                    35,
                    36,
                    37,
                    38,
                    39,
                    17,
                    40,
                    41,
                    42,
                    43,
                    44,
                    8,
                    6,
                    4,
                    3,
                    5,
                    19,
                    12,
                    45
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                3088,
                3394,
                17929,
                6347,
                718,
                717,
                9806,
                221,
                5835,
                6348,
                23429,
                6755,
                920,
                12650,
                6484,
                23869,
                17440,
                175,
                7707,
                1003,
                7742,
                7241,
                16935,
                24648,
                9427,
                919,
                222,
                5865,
                16974,
                3473,
                3472,
                17269,
                3002,
                3837,
                716,
                4916,
                12059,
                12364,
                13843,
                17286,
                721,
                19099,
                7825,
                1001,
                12060,
                24876
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: extending a blackboard architecture for approximate processingcoins technical report 89-115 april 21, 1994 abstract approximate processing is an approach to real-time ai problem solving systems in domains where there are a range of acceptable answers in terms of certainty, accuracy, and completeness. such a system needs to evaluate the current situation, make time predictions about the likelihood of achieving current objectives, monitor the processing and pursuit of those objectives, and if necessary choose new objectives and associated processing strategies that are achievable in the available time. in this approach, the system is performing satisficing problem solving, in that it is attempting to generate the best possible solutions within available time and computational resource constraints. previously published work[1] has dealt with this approach to real-time; however, an important aspect was not fully developed: the problem solver must be very flexible in its ability to represent and efficiently implement a variety of processing strategies. extensions to the blackboard model of problem solving that facilitate approximate processing are demonstrated for the task of knowledge-based signal interpretation. this is accomplished by extending the blackboard model of problem solving to include data, knowledge, and control approximations. with minimal overhead, the problem solver dynamically responds to the current situation by altering its operators and state space abstraction to produce a range of acceptable answers. initial experiments with this approach show promising results in both providing a range of processing algorithms and in controlling this dynamic system with low overhead. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_3094",
        "graph": {
            "node_idx": 3094,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    1,
                    13,
                    14,
                    15,
                    0,
                    16,
                    17,
                    18,
                    6,
                    19,
                    8,
                    4,
                    10,
                    11,
                    20,
                    21,
                    22,
                    3,
                    4,
                    23,
                    24,
                    25,
                    26,
                    9,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                3094,
                7070,
                3093,
                3306,
                8288,
                3305,
                5617,
                17684,
                18229,
                16086,
                16087,
                4472,
                14845,
                3523,
                17391,
                17915,
                7623,
                19777,
                16749,
                17804,
                9688,
                3287,
                3286,
                2829,
                11225,
                2341,
                20366
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: accelerating partial order planners by improving plan and goal choiceswe describe some simple domain-independent improvements to plan-refinement strategies for well-founded partial order planning that promise to bring this style of planning closer to practicality. one suggestion concerns the strategy for selecting plans for refinement among the current (incomplete) candidate plans. we propose an a* heuristic that counts only steps and open conditions, while ignoring \"unsafe conditions\" (threats). a second suggestion concerns the strategy for selecting open conditions (goals) to be established next in a selected incomplete plan. here we propose a variant of a strategy suggested by peot & smith and studied by joslin & pollack; the variant gives top priority to unmatchable open conditions (enabling the elimination of the plan), second-highest priority to goals that can only be achieved uniquely, and otherwise uses lifo prioritization. the preference for uniquely achievable goals is a \"zero-commitment\" strategy in the sense that the corresponding plan refinements are a matter of deductive certainty, involving no guesswork. in experiments based on modifications of ucpop, we have obtained improvements by factors ranging from 5 to several hundred for a variety of problems that are nontrivial for the unmodified version. crucially, the hardest problems give the greatest improvements. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_3106",
        "graph": {
            "node_idx": 3106,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    3,
                    27,
                    28
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                3106,
                3439,
                10652,
                17847,
                109,
                9511,
                456,
                5594,
                14848,
                10323,
                24799,
                22651,
                22652,
                5490,
                19495,
                14499,
                3035,
                17388,
                10876,
                4583,
                3786,
                16826,
                9711,
                1566,
                106,
                24869,
                23891,
                12620,
                21690
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fusion of loops for parallelism and localityloop fusion improves data locality and reduces synchronization in data-parallel applications. however, loop fusion is not always legal. even when legal, fusion may introduce loop-carried dependences which reduce parallelism. in addition, performance losses result from cache conflicts in fused loops. we present new, systematic techniques which: (1) allow fusion of loop nests in the presence of fusion-preventing dependences, (2) allow parallel execution of fused loops with minimal synchronization, and (3) eliminate cache conflicts in fused loops. we evaluate our techniques on a 56-processor ksr2 multiprocessor, and show improvements of up to 20% for representative loop nest sequences. the results also indicate a performance tradeoff as more processors are used, suggesting careful evaluation of the profitability of fusion. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_3155",
        "graph": {
            "node_idx": 3155,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7,
                    3,
                    8,
                    9,
                    4,
                    10,
                    11,
                    7,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4
                ]
            ],
            "node_list": [
                3155,
                1364,
                9890,
                9150,
                3494,
                16523,
                9204,
                9887,
                9888,
                18906,
                19293,
                10257,
                16778
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: spoken language translation with mid-90's technology: a case studywe describe 1 the architecture of the spoken language translator (slt), a prototype speech translation system which can translate queries from spoken english to spoken swedish in the domain of air travel information systems. though the performance given the level of effort so far has been extremely encouraging, more work is needed to provide a technology that will support widespread applications. with this goal, we have developed techniques for rapid development and for evaluation. these techniques allow us to estimate the level of effort required to achieve higher levels of performance. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_3161",
        "graph": {
            "node_idx": 3161,
            "edge_index": [
                [
                    1,
                    1
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                3161,
                3167
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fonn: combining first order logic with connectionist learningthis paper presents a neural network architecture that can manage structured data and refine knowledge bases expressed in a first order logic language. the presented framework is well suited to classification problems in which concept de scriptions depend upon numerical features of the data. in fact, the main goal of the neural architecture is that of refining the numerical part of the knowledge base, without changing its structure. in particular, we discuss a method to translate a set of classification rules into neural computation units. here, we focus our attention on the translation method and on algorithms to refine network weights on struc tured data. the classification theory to be refined can be manually handcrafted or automatically acquired by a symbolic relational learning system able to deal with numerical features. as a matter of fact, the primary goal is to bring into a neural network architecture the capability of dealing with structured data of unrestricted size, by allowing to dynamically bind the classification rules to different items occur ring in the input data. an extensive experimentation on a challenging artificial case study shows that the network converges quite fastly and generalizes much better than propositional learners on an equivalent task definition. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3190",
        "graph": {
            "node_idx": 3190,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    4,
                    1,
                    2,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                3190,
                12851,
                18386,
                3189,
                23820
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the use of receiver operating characteristic (roc) analysis to evaluate sequence matchingin this paper, we borrow the idea of the receiver operating characteristic (roc) from clinical medicine and demonstrate its application to sequence comparison. the roc includes elements of both sensitivity and specificity, and is a quantitative measure of the usefulness of a diagnostic. the roc is used in this work to investigate the effects of scoring table and gap penalties on database searches. studies on three families of proteins, 4fe-4s ferredoxins, lysr bacterial regulatory proteins, and bacterial rna polymerase sigma factors lead to the following conclusions: sequence families are quite idiosyncratic, but the best pam distance for database searches using the smith-waterman method is somewhat larger than predicted by theoretical methods, about 200 pam. the length independent gap penalty (gap initiation penalty) is quite important, but shows a broad peak at values of about 20 - 24. the length dependent gap penalty (gap extension penalty) is almost irrelevant suggesting that successful database searches rely only to a limited degree on gapped alignments. taken together, these observations lead to the conclusion that the optimal conditions for alignments and database searches are not, and should not be expected to be, the same. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3194",
        "graph": {
            "node_idx": 3194,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    9,
                    10,
                    11,
                    12,
                    5,
                    13,
                    14,
                    1,
                    2,
                    0,
                    3,
                    5,
                    15,
                    16,
                    6,
                    17,
                    18,
                    1,
                    2,
                    0,
                    19,
                    5,
                    15,
                    16,
                    20,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                3194,
                16728,
                6222,
                18203,
                4988,
                3193,
                3195,
                23180,
                14760,
                631,
                17066,
                407,
                18849,
                22373,
                9084,
                19600,
                20021,
                3658,
                22671,
                12187,
                3196
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evicted variables and the interaction of global register allocation and symbolic debugging approaches to determinea symbolic debugger allows a user to display the values of program variables at a breakpoint. however, problems arise if the program is translated by an optimizing compiler. this paper addresses the effects of global register allocation and assignment: a register assigned to a variable v may not be holding v 's value at a breakpoint since the register can also be assigned to other variables. we define the problem of determining whether a variable is in its assigned register as the residence problem. prior work on debugging of optimized code has focused on the currency problem; detecting whether a variable's run-time value is the expected value. determining residence is a more serious problem than currency detection. we present a data flow algorithm that accurately computes a variable's residency, by determining when a variable becomes evicted from its register. we measure the effectiveness of differ supported in part by the defense advanced research projects agency, information science and technology office, under the title research on parallel computing, arpa order no. 7330. work furnished in connection with this research is provided under prime contract mda972-90-c-0035 issued by darpa/cmo to carnegie mellon university. the views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the u.s. government. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_3206",
        "graph": {
            "node_idx": 3206,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    0,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                3206,
                5012,
                5013
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: visual schemas in neural networks for object recognition and scene analysisvisor is a large connectionist system that shows how visual schemas can be learned, represented, and used through mechanisms natural to neural networks. processing in visor is based on cooperation, competition, and parallel bottom-up and top-down activation of schema representations. simulations show that visor is robust against noise and variations in the inputs and parameters. it can indicate the confidence of its analysis, pay attention to important minor differences, and use context to recognize ambiguous objects. experiments also suggest that the representation and learning are stable, and its behavior is consistent with human processes such as priming, perceptual reversal, and circular reaction in learning. the schema mechanisms of visor can serve as a starting point for building robust high-level vision systems, and perhaps for schema-based motor control and natural language processing systems as well. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3217",
        "graph": {
            "node_idx": 3217,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                3217,
                8338,
                8694,
                20036
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a decision tree system for finding genes in dnamorgan is an integrated system for finding genes in vertebrate dna sequences. morgan uses a variety of techniques to accomplish this task, the most distinctive of which is a decision tree classifier. the decision tree system is combined with new methods for identifying start codons, donor sites, and acceptor sites, and these are brought together in a frame-sensitive dynamic programming algorithm that finds the optimal segmentation of a dna sequence into coding and noncoding regions (exons and introns). the optimal segmentation is dependent on a separate scoring function that takes a subsequence and assigns to it a score reflecting the probability that the sequence is an exon. the scoring functions in morgan are sets of decision trees that are combined to give a probability estimate. experimental results on a database of 570 vertebrate dna sequences show that morgan has excellent performance by many different measures. on a separate test set, it achieves an overall accuracy of 95%, with a correlation coefficient of 0.78 and a sensitivity and specificity for coding bases of 83% and 79%. in addition, morgan identifies 58% of coding exons exactly; i.e., both the beginning and end of the coding regions are predicted correctly. this paper describes the morgan system, including its decision tree routines and the algorithms for site recognition, and its performance on a benchmark database of vertebrate dna. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3224",
        "graph": {
            "node_idx": 3224,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    1,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                3224,
                3206,
                985,
                8455,
                18481,
                8651,
                12863,
                1273,
                19502,
                25064,
                24081,
                5012,
                5013,
                7573,
                4147,
                3152,
                2904,
                18731,
                4934,
                17795,
                12087,
                3307,
                23216,
                12438,
                16513,
                16695,
                16767,
                13994,
                1275,
                7203,
                20076,
                21116
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: back propagation is sensitive to initial conditionsthis paper explores the effect of initial weight selection on feed-forward networks learning simple functions with the back-propagation technique. we first demonstrate, through the use of monte carlo techniques, that the magnitude of the initial condition vector (in weight space) is a very significant parameter in convergence time variability. in order to further understand this result, additional deterministic experiments were performed. the results of these experiments demonstrate the extreme sensitivity of back propagation to initial weight configuration. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3246",
        "graph": {
            "node_idx": 3246,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                3246,
                16739
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: flexible histograms: a multiresolution target discrimination modelin previous work we have developed a methodology for texture recognition and synthesis that estimates and exploits the dependencies across scale that occur within images. 1,2 in this paper we discuss the application of this technique to synthetic aperture radar (sar) vehicle classification. our approach measures characteristic cross-scale dependencies in training imagery; targets are recognized when these characteristic dependencies are detected. we present classification results over a large public database containing sar images of vehicles. classification performance is compared to the wright patterson baseline classifier. 3 these preliminary experiments indicate that this approach has sufficient discrimination power to perform target detection/classification in sar. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_3261",
        "graph": {
            "node_idx": 3261,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                3261,
                4638,
                10139,
                16997,
                15422,
                23501,
                24680,
                9610,
                24061
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: ensemble learning for hidden markov modelsthe standard method for training hidden markov models optimizes a point estimate of the model parameters. this estimate, which can be viewed as the maximum of a posterior probability density over the model parameters, may be susceptible to over-fitting, and contains no indication of parameter uncertainty. also, this maximum may be unrepresentative of the posterior probability distribution. in this paper we study a method in which we optimize an ensemble which approximates the entire posterior probability distribution. the ensemble learning algorithm requires the same the traditional training algorithm for hidden markov models is an expectation-maximization (em) algorithm (dempster et al. 1977) known as the baum-welch algorithm. it is a maximum likelihood method, or, with a simple modification, a penalized maximum likelihood method, which can be viewed as maximizing a posterior probability density over the model parameters. recently, hinton and van camp (1993) developed a technique known as ensemble learning (see also mackay (1995) for a review). whereas maximum a posteriori methods optimize a point estimate of the parameters, in ensemble learning an ensemble is optimized, so that it approximates the entire posterior probability distribution over the parameters. the objective function that is optimized is a variational free energy (feynman 1972) which measures the relative entropy between the approximating ensemble and the true distribution. in this paper we derive and test an ensemble learning algorithm for hidden markov models, building on neal resources as the traditional baum-welch algorithm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_3267",
        "graph": {
            "node_idx": 3267,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    4,
                    5,
                    15,
                    16,
                    17,
                    18,
                    4,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    4,
                    25,
                    26,
                    27,
                    14,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                3267,
                17078,
                4642,
                18645,
                11538,
                2093,
                11782,
                11539,
                14671,
                22526,
                216,
                8024,
                12592,
                11228,
                299,
                4641,
                1688,
                22034,
                22103,
                7071,
                15175,
                13138,
                13139,
                13211,
                6327,
                22049,
                14673,
                22505,
                13365,
                21399,
                17313,
                13366,
                14174,
                14173,
                13378,
                13377,
                14175
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programmingwe present randomized approximation algorithms for the maximum cut (max cut) and maximum 2-satisfiability (max 2sat) problems that always deliver solutions of expected value at least .87856 times the optimal value. these algorithms use a simple and elegant technique that randomly rounds the solution to a nonlinear programming relaxation. this relaxation can be interpreted both as a semidefinite program and as an eigenvalue minimization problem. the best previously known approximation algorithms for these problems had performance guarantees of 1 2 for max cut and 3 4 for max 2sat. slight extensions of our analysis lead to a .79607-approximation algorithm for the maximum directed cut problem (max dicut) and a .758-approximation algorithm for max sat, where the best previously known approximation algorithms had performance guarantees of 1 4 respectively. our algorithm gives the first substantial progress in approximating max cut in nearly twenty years, and represents the \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_3319",
        "graph": {
            "node_idx": 3319,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                3319,
                16751
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experiments on (intelligent) brute force methods for appearance-based object recognitionit has long been recognized that, in principle object recognition problems can be solved by simple, brute force methods. however, the approach has generally been held to be completely impractical. we argue that by combining a few more or less standard tricks with computational resources that are historically large, but completely feasible by recent standards, dramatic results can be achieved for a number of recognition problems. in particular, we describe a resource-intensive, appearance-based method that utilizes intermediate-level features to provide normalized keys into a large, memorized feature database, and bayesian evidence combination coupled with a hough-like indexing scheme to assemble object hypotheses from the memory. this system demonstrates robust recognition of a variety of 3-d shapes, ranging from sports cars and fighter planes to snakes and lizards over full spherical or hemispherical ranges (and planar scale, translation and rotation). we report the results of various large-scale performance tests, involving, altogether, over 2000 separate test images. these include performance scaling with database size, robustness against clutter, and generic ability. the result of 97% forced choice accuracy with full orthographic invariance for 24 complex curved 3-d objects over full viewing spheres or hemispheres is the best we are aware of for this type of problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_3345",
        "graph": {
            "node_idx": 3345,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    0,
                    9,
                    10,
                    11,
                    12,
                    13,
                    2,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    4,
                    22,
                    23,
                    24,
                    25,
                    26,
                    7,
                    27,
                    28
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                3345,
                5402,
                2689,
                16752,
                8275,
                14966,
                21243,
                8059,
                11949,
                23551,
                14928,
                6327,
                10003,
                4914,
                18456,
                10788,
                21169,
                1521,
                3837,
                3145,
                2076,
                1520,
                9718,
                16045,
                14962,
                17961,
                5088,
                23037,
                23038
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: abstract a parallel genetic algorithm for the graph partitioning problem 1 parallel algorithm shows agenetic algorithms are stochastic search and optimization techniques which can be used for a wide range of applications. this paper addresses the application of genetic algorithms to the graph partitioning problem. standard genetic algorithms with large populations suffer from lack of efficiency (quite high execution time). a massively parallel genetic algorithm is proposed, an implementation on a supernode of transputers and results of various benchmarks are given. a comparative analysis of our approach with hill-climbing algorithms and simulated annealing is also presented. the experimental measures show that our algorithm gives better results concerning both the quality of the solution and the time needed to reach it. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_3353",
        "graph": {
            "node_idx": 3353,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    7,
                    14,
                    15,
                    4,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                3353,
                17560,
                9106,
                8350,
                903,
                10011,
                24659,
                3896,
                16879,
                8572,
                6136,
                10265,
                9105,
                5936,
                8076,
                16738,
                18065,
                18117,
                18377,
                26,
                21217,
                19006,
                29,
                10651,
                10587,
                28,
                7471,
                19954,
                20374,
                23523,
                32,
                9209,
                8240
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an optimal nonblocking multicast virtual circuit switchthis paper describes an architecture for a multicast virtual circuit switch using cell recycling. this is the first nonblocking switch architecture that is optimal in both the switching network complexity and the amount of memory required for multicast address translation. furthermore, it is optimal in the amount of effort required for multicast connection modification. this architecture makes it both technically and economically feasible to construct the large switching systems that will ultimately be needed for wide scale deployment of broadband isdn to residential users. in particular, we estimate that systems with tens of thousands of of 620 mb/s ports can be produced for a per port cost of under $500. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_3355",
        "graph": {
            "node_idx": 3355,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                3355,
                16754,
                19266
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reference classes and multiple inheritancesthe reference class problem in probability theory and the multiple inheritances (extensions) problem in non-monotonic logics can be referred to as special cases of conflicting beliefs. the current solution accepted in the two domains is the specificity priority principle. by analyzing an example, several factors (ignored by the principle) are found to be relevant to the priority of a reference class. a new approach, non-axiomatic reasoning system (nars), is discussed, where these factors are all taken into account. it is argued that the solution provided by nars is better than the solutions provided by probability theory and non-monotonic logics. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_3366",
        "graph": {
            "node_idx": 3366,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    0,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                3366,
                5850,
                5762,
                19741,
                3367
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: word perfect corp. an efficient transformation for implementing two-layer feedforward neural networksmost artificial neural networks (anns) have a fixed topology during learning, and often suffer from a number of shortcomings as a result. variations of anns that use dynamic topologies have shown ability to overcome many of these problems. this paper introduces location-independent transformations (lits) as a general strategy for implementing distributed feedforward networks that use dynamic topologies (dynamic anns) efficiently in parallel hardware. a lit creates a set of location-independent nodes, where each node computes its part of the network output independent of other nodes, using local information. this type of transformation allows efficient support for adding and deleting nodes dynamically during learning. in particular, this paper presents an lit for dynamic backpropagation networks with a single hidden layer. the complexity of both learning and execution algorithms is o(n+p+logm) for a single pattern, where nis the number of inputs, p is the number of outputs, and m is the number of hidden nodes in the original network. keywords: neural networks, backpropagation, implementation design, dynamic topologies, reconfigurable architectures. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3367",
        "graph": {
            "node_idx": 3367,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2,
                    3,
                    1,
                    2,
                    4,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                3367,
                5850,
                3366,
                19741,
                5762
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a vlsi implementation of a parallel, self-organizing learning modelthis paper presents a vlsi implementation of the priority adaptive self-organizing concurrent system (pasocs) learning model that is built using a multi-chip module (mcm) substrate. many current hardware implementations of neural network learning models are direct implementations of classical neural network structures|a large number of simple computing nodes connected by a dense number of weighted links. pasocs is one of a class of asocs (adaptive self-organizing concurrent system) connectionist models whose overall goal is the same as classical neural networks models, but whose functional mechanisms differ significantly. this model has potential application in areas such as pattern recognition, robotics, logical inference, and dynamic control. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3371",
        "graph": {
            "node_idx": 3371,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    3,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                3371,
                16757,
                17697,
                9405,
                3693,
                8501,
                16812
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: gaussian processes for bayesian classification via hybrid monte carlothe full bayesian method for applying neural networks to a prediction problem is to set up the prior/hyperprior structure for the net and then perform the necessary integrals. however, these integrals are not tractable analytically, and markov chain monte carlo (mcmc) methods are slow, especially if the parameter space is high-dimensional. using gaussian processes we can approximate the weight space integral analytically, so that only a small number of hyperparameters need be integrated over by mcmc methods. we have applied this idea to classification problems, obtaining ex cellent results on the real-world problems investigated so far. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3373",
        "graph": {
            "node_idx": 3373,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    5,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    10,
                    32
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                3373,
                9175,
                9178,
                18405,
                19298,
                8230,
                8120,
                7555,
                14076,
                230,
                21979,
                5209,
                9382,
                6162,
                10364,
                21724,
                13737,
                21727,
                13739,
                13736,
                6388,
                22129,
                17986,
                19830,
                11331,
                22934,
                15186,
                22011,
                4621,
                19897,
                21296,
                21978,
                10393
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: tcp vegas: end to end congestion avoidance on a global internetvegas is an implementation of tcp that achieves between 37 and 71% better throughput on the internet, with one-fifth to one-half the losses, as compared to the implementation of tcp in the reno distribution of bsd unix. this paper motivates and describes the three key techniques employed by vegas, and presents the results of a comprehensive experimental performance studyusing both simulations and measurements on the internetof the vegas and reno implementations of tcp. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_3391",
        "graph": {
            "node_idx": 3391,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                3391,
                16762
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: formal modeling and analysis of the hla component integration standardan increasingly important trend in the engineering of complex systems is the design of component integration standards. such standards define rules of interaction and shared communication infrastructure that permit composition of systems out of independently-developed parts. a problem with these standards is that it is often difficult to understand exactly what they require and provide, and to analyze them in order to understand their deeper properties. in this paper we use our experience in modeling the high level architecture (hla) for distributed simulation to show how one can capture the structured protocol inherent in an integration standard as a formal architectural model that can be analyzed to detect anomalies, race conditions, and deadlocks. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_3405",
        "graph": {
            "node_idx": 3405,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                3405,
                4704,
                732,
                1143,
                18720,
                118
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: error bounds for inconsistent linear inequalities and programsfor any system of linear inequalities, consistent or not, the norm of the violations of the inequalities by a given point, multiplied by a condition constant that is independent of the point, bounds the distance between the point and the nonempty set of points that minimize these violations. similarly, for a dual pair of possibly infeasible linear programs, the norm of violations of primal-dual feasibility and primal-dual objective equality, when multiplied by a condition constant, bounds the distance between a given point and the nonempty set of minimizers of these violations. these results extend error bounds for consistent linear inequalities and linear programs to inconsistent systems. error bounds are playing an increasingly important role in mathematical programming. beginning with hoffman's classical error bound for linear inequalities [3], many papers have examined error bounds for linear and convex inequalities, linear and nonlinear programs, as well as linear and nonlinear complementarity problems and affine variational inequalities [28, 29, 17, 26, 24, 23, 20, 14, 18, 8, 10, 11, 22, 8, 21, 16, 9, 19, 5, 2]. these error bounds can be traced to the following classical elementary error bound for an arbitrary point in the n-dimensional real space relative to a nonsingular system of equations bx = c with solution x = b 1 c: here kk denotes some norm, and the residual kbxck, when multiplied by the \"condition constant\" kb 1 k, bounds the distance between x and the solution x. in a similar, but considerably more general manner, mathematical programming research has concentrated on establishing bounds for computable residuals for various problems. such residuals evaluated at an arbitrary point, bound a \"distance\" to the solution set from the given point. essentially all such research has assumed that the underlying mathematical programming problem, just like bx = c with nonsingular b, is solvable. in this work we shall not make this rather restrictive assumption, because we want to handle more general situations that correspond to a singular or even rectangular matrix b, for which no exact solution may exist. in line with this objective, we will begin by showing, for the possibly inconsistent system of linear inequalities ax 5 b; (1) kx xk = kx b 1 ck = kb 1 (bx c)k 5 kb 1 k kbx ck \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_3419",
        "graph": {
            "node_idx": 3419,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    5,
                    10,
                    11,
                    12,
                    2,
                    9,
                    13,
                    14,
                    7,
                    15,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    4,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                3419,
                17593,
                9274,
                1191,
                3405,
                7879,
                3424,
                15063,
                23980,
                2726,
                7878,
                16507,
                4704,
                9518,
                6031,
                8902,
                9847
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: weak sharp minima in mathematical programmingthe notion of a sharp, or strongly unique, minimum is extended to include the possibility of a nonunique solution set. these minima will be called weak sharp minima. conditions necessary for the solution set of a minimization problem to be a set of weak sharp minima are developed in both the unconstrained and constrained cases. these conditions are also shown to be sufficient under the appropriate convexity hypotheses. the existence of weak sharp minima is characterized in the cases of linear and quadratic convex programming and for the linear complementarity problem. in particular, we reproduce a result of mangasarian and meyer that shows that the solution set of a linear program is always a set of weak sharp minima whenever it is nonempty. consequences for the convergence theory of algorithms is also examined, especially conditions yielding finite termination. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_3420",
        "graph": {
            "node_idx": 3420,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    0,
                    11,
                    12,
                    9,
                    13,
                    14,
                    2,
                    15,
                    4,
                    16,
                    7,
                    8,
                    9,
                    17,
                    0,
                    6,
                    18,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    3,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    9
                ]
            ],
            "node_list": [
                3420,
                7343,
                7879,
                5197,
                24624,
                10442,
                3421,
                4673,
                19946,
                9518,
                7977,
                9274,
                2726,
                18468,
                19346,
                24603,
                3422,
                515,
                20478
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: parallel constraint distributionconstraints of a mathematical program are distributed among parallel processors together with an appropriately constructed augmented lagrangian for each processor, which contains lagrangian information on the constraints handled by the other processors. lagrange multiplier information is then exchanged between processors. convergence is established under suitable conditions for strongly convex quadratic programs and for general convex programs. 1. introduction. we are concerned with the problem \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_3430",
        "graph": {
            "node_idx": 3430,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    1,
                    14,
                    15,
                    3,
                    5,
                    1,
                    16,
                    17,
                    18,
                    19,
                    9,
                    20,
                    21,
                    4,
                    0,
                    22,
                    2,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    10,
                    30,
                    31,
                    32,
                    33,
                    8,
                    34,
                    35,
                    36,
                    37
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                3430,
                2420,
                17191,
                15547,
                2800,
                9283,
                18085,
                4413,
                2417,
                23034,
                4888,
                7521,
                2421,
                17625,
                21269,
                13218,
                16989,
                16686,
                15377,
                22253,
                23080,
                19571,
                15545,
                6934,
                15546,
                8452,
                6802,
                12954,
                21113,
                23235,
                1155,
                1382,
                1383,
                11506,
                23031,
                23033,
                15317,
                15316
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: provably good approximation algorithms for optimal kinodynamic planning for cartesian robots and open chain manipulators 1in optimal kinodynamic planning, given a robot system, we must find a minimal-time trajectory that goes from a start state to a goal state while avoiding obstacles by a speed-dependent safety-margin and respecting dynamics bounds. with canny and reif [1], we approached this problem from an *-approximation standpoint and introduced a provably-good approximation algorithm for optimal kinodynamic planning for a robot obeying particle dynamics. if a solution exists, this algorithm returns a trajectory *-close to optimal in time polynomial in both ( 1 we extend [1, 2] to d-link 3d robots with full rigid-body dynamics amidst obstacles. specifically, we describe polynomial-time approximation algorithms for cartesian robots obeying l 2 dynamics bounds and for open-kinematic-chain manipulators with revolute and prismatic joints. the latter class includes many industrial manipulators. the correctness and complexity of these 1 this paper describes research done at the computer science robotics laboratory at cornell university. algorithms rely on new trajectory tracking lemmas for robots with coupled dynamics bounds. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_3456",
        "graph": {
            "node_idx": 3456,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                3456,
                1273,
                16513,
                16695,
                16767,
                13994,
                1275,
                7203,
                20076,
                21116
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: ensemble learning using decorrelated neural networkswe describe a decorrelation network training method for improving the quality of regression learning in \"ensemble\" neural networks that are composed of linear combinations of individual neural networks. in this method, individual networks are trained by backpropagation to not only reproduce a desired output, but also to have their errors be linearly decorrelated with the other networks. outputs from the individual networks are then linearly combined to produce the output of the ensemble network. we demonstrate the performances of decorrelated network training on learning the \"3 parity\" logic function, a noisy sine function, and a one dimensional nonlinear function, and compare the results with the ensemble networks composed of independently trained individual networks (without decorrelation training). empirical results show that when individual networks are forced to be decorrelated with one another the resulting ensemble neural networks have lower mean squared errors than the ensemble networks having independently trained individual networks. this method is particularly applicable when there is insufficient data to train each individual network on disjoint subsets of training patterns. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3457",
        "graph": {
            "node_idx": 3457,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    4,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    17,
                    26,
                    20,
                    27,
                    28,
                    29,
                    30,
                    31,
                    3,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    34,
                    48,
                    49,
                    50,
                    51,
                    52
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                3457,
                2350,
                2993,
                3407,
                18193,
                24697,
                1794,
                24367,
                4036,
                21025,
                8393,
                16631,
                16869,
                17357,
                17380,
                19926,
                9577,
                3408,
                17447,
                2205,
                8538,
                2934,
                2972,
                894,
                3272,
                895,
                17312,
                915,
                20116,
                16564,
                1810,
                5648,
                7633,
                8868,
                20147,
                21626,
                13579,
                7309,
                17698,
                18259,
                18391,
                18853,
                19570,
                12543,
                7308,
                10947,
                20873,
                12375,
                64,
                21469,
                13440,
                4863,
                3074
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: bumptrees for efficient function, constraint, and classification learninga new class of data structures called bumptrees is described. these structures are useful for efficiently implementing a number of neural network related operations. an empirical comparison with radial basis functions is presented on a robot arm mapping learning task. applications to density estimation, classification, and constraint representation and learning are also outlined. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_3469",
        "graph": {
            "node_idx": 3469,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    4,
                    14,
                    15,
                    9,
                    10,
                    13,
                    16,
                    7,
                    17,
                    8,
                    12,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    5,
                    5,
                    6,
                    8,
                    8,
                    9,
                    9
                ]
            ],
            "node_list": [
                3469,
                18621,
                3275,
                19144,
                19148,
                10192,
                3470,
                16773,
                13852,
                7506,
                23009,
                2558,
                3468,
                14794,
                19308,
                19501,
                22611,
                21801
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mapbuilding using self-organising networks in \"really useful robots\"the really useful robots (rur) project is seeking to understand how robots can be built that develop and maintain the task achieving compe-tences they require for flexible and robust be-haviour in variable and unforeseen situations, as opposed to these being installed by their designers. in this paper we present an experimental autonomous robot with a map building competence which uses a self-organising network. map building forms a necessary step on the way to development of a navigational competence. some encouraging initial test results are also presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_3478",
        "graph": {
            "node_idx": 3478,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                3478,
                13345,
                21378
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a domain-specific software architecture engineering process outlineone of the dilemmas that has prevented software developers from reusing software is the lack of software artifacts to use or the existence of artifacts that are difficult to integrate. domain-specific software architectures (dssas) have been proposed[4] in order to address these issues. a dssa not only provides a framework for reusable software components to fit into, but captures the design rationale and provides for a degree of adaptability. this paper 1 presents an outline for a domain-specific software architecture engineering process. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_3490",
        "graph": {
            "node_idx": 3490,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                3490,
                11002,
                9604
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: optimistic simulation of parallel architectures using program executablesa key tool of computer architects is computer simulation at the level of detail that can execute program executables. the time and memory requirements of such simulations can be enormous, especially when the machine under design|the target|is a parallel machine. thus, it is attractive to use parallel simulation, as successfully demonstrated by the wisconsin wind tunnel (wwt). wwt uses a conservative simulation algorithm and eschews network simulation to make looka-head adequate. nevertheless, we find most of wwt's slowdown to be due to the synchronization overhead in the conservative simulation algorithm. this paper examines the use of optimistic algorithms to perform parallel simulations of parallel machines. we first show that we can make optimistic algorithms work correctly even with wwt's direct execution of program executables. we checkpoint processor registers (integer, floating-point, and condition codes) and use executable editing to log the value of memory words just before they are overwritten by stores. second, we consider the performance of two optimistic algorithms. the first executes programs optimistically, but performs protocol events (e.g., sending messages) conservatively. the second executes everything optimistically and is similar to time warp with lazy message cancellation. unfortunately, both approaches make parallel simulation performance worse for the default wwt assumptions. we conclude by speculating on the performance of optimistic simulation when simulating (1) target network details, and fl this work is supported in part by nsf grant mip-9225097, wright laboratory avionics directorate, air force material command, usaf, under grant #f33615-94-1-1525 and arpa order no. b550, sun microsystems and thinking machines corporation, our thinking machines cm-5 was purchased through nsf institutional infrastructure grant no. cda-9024618 with matching funding from the university of wisconsin graduate school. the u.s. government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. the views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the wright laboratory avionics directorate or the u.s. government. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_3497",
        "graph": {
            "node_idx": 3497,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    11,
                    5,
                    12,
                    13,
                    14,
                    9,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                3497,
                16779,
                1619,
                9920,
                9681,
                5133,
                3496,
                3186,
                3184,
                18263,
                18936,
                14958,
                9179,
                17300,
                17811,
                8323
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: janus ii advances in spontaneous speech translationjanus ii is a research system to design and test components of speech to speech translation systems as well as a research prototype for such a system. we will focus on two aspects of the system: 1) new features and recognition performance of the speech recognition component janus-sr and 2) the end-to-end performance of janus ii, including a comparison of two machine translation strategies used for janus-mt (phoenix and glr*). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_3498",
        "graph": {
            "node_idx": 3498,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    0,
                    10,
                    11,
                    12,
                    13,
                    14,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    5
                ]
            ],
            "node_list": [
                3498,
                16780,
                1473,
                17196,
                20242,
                9814,
                18336,
                9819,
                6487,
                24158,
                22726,
                16548,
                7292,
                10233,
                24978
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a hierarchical multiprocessor scheduling framework for synchronous dataflow graphs a clustering algorithm that reduces thethis research was partially funded as part of the ptolemy project, which is supported by the advanced research projects agency and the u.s. air force (under the rassp program, contract f33615-93-c-1317), the semiconductor research corporation (project 94-dc-008), the national science foundation (mip-9201605), the state of california micro program, and the following companies: bellcore, bell northern research, dolby laboratories, hitachi, mentor graphics, mitsubishi, nec, pacific bell, philips, and rockwell. jos luis pino is also supported by at&t bell laboratories as part of the cooperative research fellowship program. abstract this paper discusses a hierarchical scheduling framework to reduce the complexity of scheduling synchronous dataow (sdf) graphs onto multiple processors. the core of this frame \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_3510",
        "graph": {
            "node_idx": 3510,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    1,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                3510,
                5016,
                10576,
                14960,
                17153,
                10257,
                19437,
                10972,
                22352,
                22739
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automatic language identification using a segment-based approacha segment-based automatic language identification (ali) system has been developed. the system was designed around a formal probabilistic framework. this framework forms the basis for investigating the ali approach proposed by house and neuburg which utilizes phonotactic constraints of languages. the system incorporates different components which model the phonotactic, prosodic, and acoustic properties of the different languages used in the system. the system was trained and tested using the ogi multi-language telephone speech corpus. an overall system performance of 47.7% was achieved in identifying the language of test utterances. keywords: automatic language identification. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_3512",
        "graph": {
            "node_idx": 3512,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    4,
                    5,
                    7,
                    8,
                    5,
                    9,
                    7,
                    10,
                    5,
                    11,
                    12,
                    6,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                3512,
                16785,
                17470,
                10189,
                12186,
                12184,
                5371,
                14348,
                14339,
                14316,
                14342,
                22272,
                17170,
                24126,
                16441
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: deadline assignment in a distributed soft real-time systemin a distributed environment, tasks often have processing demands on multiple different sites. a distributed task is usually divided up into several subtasks, each one to be executed at some site in order. in a real-time system, an overall deadline is usually specified by an application designer indicating when a distributed task is to be finished. however, the problem of how a global deadline is automatically translated to the deadline of each individual subtask has not been well studied. this paper examines (through simulations) four strategies for subtask deadline assignment in a distributed soft real-time environment. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_3520",
        "graph": {
            "node_idx": 3520,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                3520,
                10413,
                9912
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: why real-world planning is difficult: a tale of two applicationsin this paper we describe a number of obstacles hampering the application of planning technology to real-world problems, as encountered in two real-world planning projects at jpl: mvp a planning system for automated generation of image processing procedures; and lmcoa an intelligent system for assistance in antenna operations. first, we describe how existing planning representation must be enhanced to represent and reason about aspects of plans besides goal achievement resource usage, quality, execution time, flexibility, and generality. second, planning systems must be able to fit into a wide range of operational contexts most planning tasks cannot be completely automated, therefore at a minimum the plans produced must be easily understandable and modifiable by the users. in some cases the user must be intimately involved in the plan construction process itself. third, planning systems must be able to compare favorably in terms of software lifecycle costs to other means of automation such as scripts or rule-based expert systems. this means that development of intelligent tools and environments to facilitate knowledge acquisition, validation, and maintenance are of prime importance. we hope that our description and elucidation of these issues will lead to increased work in these areas. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_3525",
        "graph": {
            "node_idx": 3525,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                3525,
                10413,
                5428,
                9912,
                6527,
                5429,
                18881,
                20437,
                9828,
                13975,
                22035,
                14100,
                23872
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: representing and learning quality-improving search control knowledgegenerating good, production-quality plans is an essential element in transforming planners from research tools into real-world applications, but one that has been frequently overlooked in research on machine learning for planning. this paper describes quality, an architecture that automatically acquires operational quality-improving control knowledge given a domain theory, a domain-specific metric of plan quality, and problems which provide planning experience. the framework includes two distinct domain-independent learning mechanisms which differ in the language used to represent the learned knowledge, namely control rules and control knowledge trees, and in the kinds of quality metrics for which they are best suited. quality is fully implemented on top of the prodigy4.0 nonlinear planner and its empirical evaluation has shown that the learned knowledge is able to substantially improve plan quality. although the learning mechanisms have been developed for prodigy4.0, the framework is general and addresses a problem confronted by any planner that treats planning as a constructive decision-making process. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_3532",
        "graph": {
            "node_idx": 3532,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                3532,
                9304,
                19251,
                18543
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: parity: the problem that won't go awayit is well-known that certain learning methods (e.g., the perceptron learning algorithm) cannot acquire complete, parity mappings. but it is often overlooked that state-of-the-art learning methods such as c4.5 and backpropagation cannot generalise from incomplete parity mappings. the failure of such methods to generalise on parity mappings may be sometimes dismissed on the grounds that it is `impossible' to generalise over such mappings, or that parity problems are mathematical constructs having little to do with real-world learning. however, this paper argues that such a dismissal is unwarranted. it shows that parity mappings are hard to learn because they are statistically neutral and that statistical neutrality is a property which we should expect to encounter frequently in real-world contexts. it also shows that the generalization failure on parity mappings occurs even when large, minimally incomplete mappings are used for training purposes, i.e., when claims about the impossibility of generalization are particularly suspect. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_3556",
        "graph": {
            "node_idx": 3556,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    6,
                    14,
                    15,
                    16,
                    17,
                    18,
                    0,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    13,
                    30,
                    31
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    10,
                    10
                ]
            ],
            "node_list": [
                3556,
                18771,
                17615,
                5394,
                4638,
                24721,
                24925,
                18036,
                1273,
                11435,
                10956,
                24878,
                24442,
                9609,
                11911,
                11912,
                20419,
                11003,
                21589,
                16997,
                15422,
                23501,
                16513,
                16695,
                16767,
                13994,
                1275,
                7203,
                20076,
                21116,
                9691,
                9943
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: stochastic simulation algorithms for dynamic probabilistic networksstochastic simulation algorithms such as likelihood weighting often give fast, accurate approximations to posterior probabilities in probabilistic networks, and are the methods of choice for very large networks. unfortunately, the special characteristics of dynamic probabilistic networks (dpns), which are used to represent stochastic temporal processes, mean that standard simulation algorithms perform very poorly. in essence, the simulation trials diverge further and further from reality as the process is observed over time. in this paper, we present simulation algorithms that use the evidence observed at each time step to push the set of trials back towards reality. the first algorithm, \"evidence reversal\" (er) restructures each time slice of the dpn so that the evidence nodes for the slice become ancestors of the state variables. the second algorithm, called \"survival of the fittest\" sampling (sof), \"repopulates\" the set of trials at each time step using a stochastic reproduction rate weighted by the likelihood of the evidence according to each trial. we compare the performance of each algorithm with likelihood weighting on the original network, and also investigate the benefits of combining the er and sof methods. the er/sof combination appears to maintain bounded error independent of the number of time steps in the simulation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_3558",
        "graph": {
            "node_idx": 3558,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    4,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                3558,
                16793,
                13885,
                996,
                23947,
                7203,
                1273,
                10956,
                9610,
                17610,
                10559,
                19001,
                9609,
                20135
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning fine motion by markov mixtures of expertscompliant control is a standard method for performing fine manipulation tasks, like grasping and assembly, but it requires estimation of the state of contact between the robot arm and the objects involved. here we present a method to learn a model of the movement from measured data. the method requires little or no prior knowledge and the resulting model explicitly estimates the state of contact . the current state of contact is viewed as the hidden state variable of a discrete hmm. the control dependent transition probabilities between states are modeled as parametrized functions of the measurement. we show that their parameters can be estimated from measurements concurrently with the estimation of the parameters of the movement in each state of contact . the learning algorithm is a variant of the em procedure. the e step is computed exactly; solving the m step exactly would require solving a set of coupled nonlinear algebraic equations in the parameters. instead, gradient ascent is used to produce an increase in likelihood. this report describes research done at the dept. of electrical engineering and computer science, the dept. of brain and cognitive sciences, the center for biological and computational learning and the artificial intelligence laboratory of the massachusetts institute of technology. support for the artificial intelligence research is provided in part by the advanced research projects agency of the dept. of defense and by the office of naval research. michael i. jordan is a nsf presidential young investigator. the authors can be reached at m.i.t., dept. of brain and cognitive sciences, 79 amherst st., cambridge ma 02139, usa. e-mail: mmp@psyche.mit.edu, jordan@psyche.mit.edu \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3572",
        "graph": {
            "node_idx": 3572,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                3572,
                11112,
                24885,
                22282
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: contingency selection in plan generationa key question in conditional planning is: how many, and which of the possible execution failures should be planned for? one cannot, in general, plan for all the failures that can be anticipated: there are simply too many. but neither can one ignore all the possible failures, or one will fail to produce sufficiently flexible plans. we describe a planning system that attempts to identify the contingencies that contribute the most to a plan's overall value. plan generation proceeds by extending the plan to include actions that will be taken in case the identified contingencies fail, iterating until either a given expected value threshold is reached or planning time is exhausted. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_3630",
        "graph": {
            "node_idx": 3630,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    9,
                    18,
                    19,
                    20,
                    21,
                    5,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    29,
                    3,
                    40,
                    41,
                    42,
                    43,
                    30,
                    44,
                    41,
                    33,
                    45,
                    46,
                    47,
                    25,
                    48,
                    21,
                    3,
                    13,
                    49,
                    2,
                    1,
                    7,
                    8,
                    17,
                    50,
                    0,
                    51,
                    52,
                    53,
                    50,
                    3,
                    54,
                    55,
                    56,
                    57,
                    58,
                    6,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                3630,
                6645,
                3625,
                3152,
                5245,
                694,
                3198,
                6705,
                20783,
                3197,
                18355,
                24399,
                513,
                17825,
                20439,
                20757,
                6706,
                5899,
                17942,
                15371,
                1293,
                15372,
                17612,
                10442,
                6733,
                6734,
                22877,
                5782,
                7267,
                1673,
                17321,
                10688,
                5780,
                1675,
                9435,
                3307,
                1674,
                9257,
                17127,
                17194,
                9834,
                5781,
                17882,
                20081,
                2878,
                16716,
                5558,
                10370,
                15574,
                2189,
                5945,
                17537,
                4146,
                9579,
                6574,
                2355,
                505,
                8483,
                20078
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient learning of selective bayesian network classifiersin this paper, we present a computation-ally efficient method for inducing selective bayesian network classifiers. our approach is to use information-theoretic metrics to efficiently select a subset of attributes from which to learn the classifier. we explore three conditional, information-theoretic met-rics that are extensions of metrics used extensively in decision tree learning, namely quin-lan's gain and gain ratio metrics and man-taras's distance metric. we experimentally show that the algorithms based on gain ratio and distance metric learn selective bayesian networks that have predictive accuracies as good as or better than those learned by existing selective bayesian network induction approaches (k2-as), but at a significantly lower computational cost. we prove that the subset-selection phase of these information-based algorithms has polynomial complexity, as compared to the worst-case exponential time complexity of the corresponding phase in k2-as. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_3635",
        "graph": {
            "node_idx": 3635,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                3635,
                10317,
                17283,
                24465,
                23962,
                19220
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: scenario-based analysis of software architecturesoftware architecture is one of the most important tools for designing and understanding a system, whether that system is in preliminary design, active deployment, or maintenance. scenarios are important tools for exercising an architecture in order to gain information about a systems fitness with respect to a set of desired quality attributes. this paper presents a set of experiential case studies illustrating the methodological use of scenarios to gain architecture-level understanding and predictive insight into large, real-world systems in various domains. a structured method for scenario-based architectural analysis is presented, using scenarios to analyze architectures with respect to achieving quality attributes. finally, lessons and morals are presented, drawn from the growing body of experience in applying scenario-based architectural analysis techniques. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_3641",
        "graph": {
            "node_idx": 3641,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    1,
                    0,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    18
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                3641,
                632,
                3642,
                17681,
                761,
                4824,
                15396,
                6984,
                628,
                6738,
                5670,
                18799,
                19124,
                9671,
                8917,
                4826,
                19431,
                19539,
                8547,
                5153,
                16809,
                10535,
                18421,
                8291,
                10426,
                11010,
                22950
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experimentation with configurable, lightweight threads on a ksr multiprocessorthe implementation of operating system functions can significantly affect the performance of parallel programs. our research concerns the customization of operating system functionality for different target hardware to improve the performance of application programs. in this paper, we describe our experience with a reconfigurable, multiprocessor mach cthreads package on a 32-node ksr-1 supercomputer. sample static \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_3651",
        "graph": {
            "node_idx": 3651,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    12,
                    5,
                    22,
                    23,
                    24,
                    15,
                    6,
                    25,
                    0,
                    26,
                    3,
                    16,
                    27,
                    28,
                    29,
                    30,
                    31,
                    9,
                    32,
                    10,
                    33,
                    33
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                3651,
                18231,
                1568,
                11224,
                17041,
                3288,
                9392,
                9252,
                253,
                12486,
                12493,
                1564,
                11864,
                10606,
                17804,
                24544,
                10627,
                16037,
                20438,
                16087,
                9546,
                11865,
                20087,
                11496,
                3286,
                10397,
                9782,
                20223,
                6437,
                11953,
                13686,
                23869,
                20836,
                12487
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: domain-independent extensions to gsat: solving large structured satisfiability problemsgsat is a randomized local search procedure for solving propositional satisfiability problems (selman et al. 1992). gsat can solve hard, randomly generated problems that are an order of magnitude larger than those that can be handled by more traditional approaches such as the davis-putnam procedure. gsat also efficiently solves encodings of graph coloring problems, n-queens, and boolean induction. however, gsat does not perform as well on handcrafted encodings of blocks-world planning problems and formulas with a high degree of asymmetry. we present three strategies that dramatically improve gsat's performance on such formulas. these strategies, in effect, manage to uncover hidden structure in the formula under considerations, thereby significantly extending the applicability of the gsat algorithm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_3661",
        "graph": {
            "node_idx": 3661,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                3661,
                16809,
                1295,
                18912
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the performance of work stealing in multiprogrammed environmentswe study the performance of user-level thread schedulers in multiprogrammed environments. our goal is a user-level thread scheduler that delivers efficient performance under multiprogramming without any need for kernel-level resource management, such as coscheduling or process control. we show that a non-blocking implementation of the work-stealing algorithm achieves this goal. with this implementation, the execution time of a computation running with arbitrarily many processes on arbitrarily many processors can be modeled as a simple function of work and critical-path length. this model holds even when the processes run on a set of processors that arbitrarily grows and shrinks over time. we observe linear speedup whenever the number of processes is small relative to the average parallelism. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_3665",
        "graph": {
            "node_idx": 3665,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                3665,
                16809,
                1295,
                3661,
                18912
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a framework for space and time efficient scheduling of parallelismmany of today's high level parallel languages support dynamic, fine-grained parallelism. these languages allow the user to expose all the parallelism in the program, which is typically of a much higher degree than the number of processors. hence an efficient scheduling algorithm is required to assign computations to processors at runtime. besides having low overheads and good load balancing, it is important for the scheduling algorithm to minimize the space usage of the parallel program. in this paper, we first present a general framework to model non-preemptive parallel computations based on task graphs, in which schedules of the graphs represent executions of the computations. we then prove bounds on the space and time requirements of certain classes of schedules that can be generated by an offline scheduler. next, we present an online scheduling algorithm that is provably space-efficient and time-efficient for multithreaded computations with nested parallelism. if a serial execution requires s 1 units of memory for a computation of depth d and work w , our algorithm results in an execution on p processors that requires s 1 + o(pd log p) units of memory, and o(w=p + d log p) time, including scheduling overheads. finally, we demonstrate that our scheduling algorithm is efficient in practice. we have implemented a runtime system that uses our algorithm to schedule parallel threads. the results of executing parallel programs on this system show that our scheduling algorithm significantly reduces memory usage compared to previous techniques, without compromising performance. this research is sponsored by the wright laboratory, aeronautical systems center, air force materiel command, usaf, and the advanced research projects agency (arpa) under grant f33615-93-1-1330. the u.s. government is authorized to reproduce and distribute reprints for government purposes, notwithstanding any copyright notation thereon. views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of arpa or the u.s. government. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_3667",
        "graph": {
            "node_idx": 3667,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7,
                    8,
                    3,
                    9,
                    10,
                    11,
                    5,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                3667,
                16809,
                5109,
                12168,
                10582,
                12644,
                11522,
                4682,
                20609,
                19442,
                14144,
                8088,
                23070
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: thread scheduling for cache localitythis paper describes a method to improve the cache locality of sequential programs by scheduling fine-grained threads. the algorithm relies upon hints provided at the time of thread creation to determine a thread execution order likely to reduce cache misses. this technique may be particularly valuable when compiler-directed tiling is not feasible. experiments with several application programs, on two systems with different cache structures, show that our thread scheduling method can improve program performance by reducing second-level cache misses. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_3671",
        "graph": {
            "node_idx": 3671,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    5,
                    6
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                3671,
                841,
                135,
                2639,
                2638,
                8471,
                25021
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: generalization to novel images in upright and inverted facesan image of a face depends not only on its shape, but also on the viewpoint, illumination conditions, and facial expression. a face recognition system must overcome the changes in face appearance induced by these factors. this paper investigate two related questions: the capacity of the human visual system to generalize the recognition of faces to novel images, and the level at which this generalization occurs. we approach this problems by comparing the identification and generalization capacity for upright and inverted faces. for upright faces, we found remarkably good generalization to novel conditions. for inverted faces, the generalization to novel views was significantly worse for both new illumination and viewpoint, although the performance on the training images was similar to the upright condition. our results indicate that at least some of the processes that support generalization across viewpoint and illumination are neither universal (because subjects did not generalize as easily for inverted faces as for upright ones), nor strictly object-specific (because in upright faces nearly perfect generalization was possible from a single view, by itself insufficient for building a complete object-specific model). we propose that generalization in face recognition occurs at an intermediate level that is applicable to a class of objects, and that at this level upright and inverted faces initially constitute distinct object classes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_3674",
        "graph": {
            "node_idx": 3674,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                3674,
                16810,
                16981
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: performance prediction of large mimd systems for par- allel neural network simulationsin this paper, we present a performance prediction model for indicating the performance range of mimd parallel processor systems for neural network simulations. the model expresses the total execution time of a simulation as a function of the execution times of a small number of kernel functions, which have to be measured on only one processor and one physical communication link. the functions depend on the type of neural network, its geometry, decomposition and the connection structure of the mimd machine. using the model, the execution time, speedup, scalability and efficiency of large mimd systems can be predicted. the model is validated quantitatively by applying it to two popular neural networks, backpropagation and the kohonen self-organizing feature map, decomposed on a gcel-512 1 , a 512 transputer system. measurements are taken from network simulations decomposed via dataset and network decomposition techniques. agreement of the model with the measurements is within 1%-14%. estimates are given for the performances that can be expected for the new t9000 transputer systems. the presented method can also be used for other application areas such as image processing. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3685",
        "graph": {
            "node_idx": 3685,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    3
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                3685,
                2740,
                3686,
                2741
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: software-based communication latency hiding for commodity workstation networksa variety of latency hiding techniques has been investigated at the hardware level. however, except multithreading, which may require substantial program structuring effort, other software-based latency hiding methods have not been investigated. in this paper, we consider design alternatives for latency hiding other than multithreading. furthermore, we present experimental evidence for the validity of a new technique for software-based communication latency hiding for commodity workstation networks: up to 80 percent of useful computational power can be squeezed out of a workstation cpu while communicating with tcp/ip via an ethernet and almost 90 percent while communicating across the internet. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_3695",
        "graph": {
            "node_idx": 3695,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    8,
                    3,
                    9,
                    5,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5
                ]
            ],
            "node_list": [
                3695,
                6687,
                4329,
                17479,
                1745,
                6710,
                17533,
                6686,
                22380,
                6732,
                3166,
                6709,
                5554,
                17429,
                6730,
                19434,
                193,
                8059,
                21395
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: refining pid controllers using neural networksthe kbann approach uses neural networks to refine knowledge that can be written in the form of simple propositional rules. we extend this idea further by presenting the manncon algorithm by which the mathematical equations governing a pid controller determine the topology and initial weights of a network, which is further trained using backpropagation. we apply this method to the task of controlling the outflow and temperature of a water tank, producing statistically-significant gains in accuracy over both a standard neural network approach and a non-learning pid controller. furthermore, using the pid knowledge to initialize the weights of the network produces statistically less variation in testset accuracy when compared to networks initialized with small random numbers. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3707",
        "graph": {
            "node_idx": 3707,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    8,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                3707,
                24195,
                24199,
                19608,
                10227,
                9433,
                23797,
                6917,
                22201,
                8347,
                19967,
                14257,
                14235,
                22206,
                9434
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: how much does network contention affect distributed shared memory performance?most of recent research on distributed shared memory (dsm) systems have focused on either careful design of node controllers or cache coherence protocols. while evaluating these designs, simplified models of networks (constant latency or average latency based on the network size) are typically used. such models completely ignore network contention. to help network designers to design better networks for dsm systems, in this paper, we focus on two goals: 1) to isolate and quantify the impact of network link contention and network interface contention on the overall performance of dsm applications and 2) to study the impact of critical architectural parameters on these two categories of network contention. we achieve these goals by evaluating a set of splash2 benchmarks on a dsm simulator using three network models. for an 8 fi 8 wormhole system, our results show that network contention can degrade performance up to 59.8%. out of this, up to 7.2% is caused by network interface contention alone. the study indicates that network contention becomes dominant for dsm systems using small caches, wide cache line sizes, low degrees of associativity, high processing node speeds, high memory speeds, low network speeds, or small network link widths. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_3711",
        "graph": {
            "node_idx": 3711,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                3711
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a comparison of novel techniques for instantaneous speaker adaptation 1this paper introduces two novel techniques for instantaneous speaker adaptation, reference speaker weighting and consistency modeling. an approach to hierarchical speaker clustering using gender and speaking rate as the clustering criteria is also presented. all three methods attempt to utilize the underlying within-speaker correlations that are present between the acoustic realizations of different phones. by accounting for these correlations a limited amount of adaptation data can be used to adapt the models of every phonetic acoustic model including those for phones which have not been observed in the adaptation data. in instantaneous adaptation experiments using the darpa resource management corpus, a reduction in word error rate of 20% has been achieved using a combination of these new techniques. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_3715",
        "graph": {
            "node_idx": 3715,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2,
                    7,
                    2,
                    5,
                    8,
                    9,
                    10,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    4,
                    4,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                3715,
                5117,
                13460,
                17541,
                13246,
                21290,
                6962,
                10482,
                13261,
                17605,
                6324
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: intelligent file hoarding for mobile computersmobile computing adds a new wrinkle to the age-old problem of caching. today's wireless links are both slow and expensive, and are not always available to a user. therefore, when a mobile user is disconnected, a cache miss means (at best) a substantial cost in time and money, or (at worst) a complete halt to work if critical information has not been cached. existing solutions to this problem rely on some combination of explicit hoard profiles and spying on a user's file accesses. neither of these approaches is ideal in terms of reliability or user-friendliness. our solution might be called transparent analytical spying. instead of simply recording a list of file accesses, we analyze program executions and tie them to specific files. by observing multiple executions of a program, we are able to build sets of files associated with each program, and can heuristically separate application files from user files. we can then present a high-level view to the user that is similar to loading a briefcase. we have an implementation of our hoarding tool running under os/2. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_3716",
        "graph": {
            "node_idx": 3716,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    3,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    5,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    1,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                3716,
                18174,
                8653,
                1095,
                21120,
                3768,
                9808,
                769,
                3886,
                17302,
                21908,
                24486,
                5218,
                24726,
                10820,
                11342,
                24902,
                9447,
                24837,
                9177,
                1531,
                6036,
                9382,
                12161,
                2069,
                3889,
                20109,
                21852,
                14289,
                12183,
                9810,
                7139,
                13308,
                1325,
                10993,
                2795,
                4088,
                5297,
                4965,
                22949,
                2542,
                599,
                10425,
                1117,
                2869,
                16053
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experiences with the amoeba distributed operating systemthe amoeba distributed operating system has been in development and use for over eight years now. in this paper we describe the present system and our experience with itwhat we did right, but also what we did wrong. among the things done right were basing the system on objects, using a single uniform mechanism (capabilities) for naming and protecting them in a location independent way, and designing a completely new, and very fast file system. among the things done wrong were having threads not be pre-emptable, initially building our own homebrew window system, and not having a multicast facility at the outset. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_3719",
        "graph": {
            "node_idx": 3719,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    0,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    4,
                    21
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    7
                ]
            ],
            "node_list": [
                3719,
                11,
                7681,
                6048,
                18903,
                12870,
                21662,
                9343,
                22198,
                4823,
                9341,
                9342,
                14572,
                22194,
                944,
                8894,
                17714,
                17477,
                8476,
                17834,
                6047,
                18570
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: \"adaptive backoff synchronization techniques\", proceedings of the \"a fine-grained solution to the mutual exclusion problem\",due to the fact that each two-process entry and exit sec-tion of peterson's algorithm requires fewer remote operations outside of busy-waiting loops than does ours. this gives rise to the following open question: how many remote operations outside of busy-waiting loops are required in two-process read/write algorithms based on local spinning? we end the paper with a few observations concerning the time complexity of concurrent algorithms. a natural approach to measuring the time complexity of such an algorithm would be to simply count the number of operations. however, a straightforward application of such an approach does not provide any insight into the behavior of mutual exclusion algorithms under heavy contention. in particular, in any algorithm in which processes busy-wait, the number of operations needed for one process to get to its critical section is unbounded. in order to serve as a measure of time complexity, a measure should be both intuitive and easy to compute. in sequential programming, the usual measure of time complexity, which is obtained by simply counting operations, satisfies these criteria. by contrast, there has been much disagreement on how time complexity should be measured in concurrent programs, and a complexity measure satisfying these criteria has yet to be adopted. we believe that an appropriate time complexity measure for concurrent algorithms is one based on the number of remote memory references. as seen in this paper, such a measure can be used to make meaningful distinctions concerning the performance of concurrent programs. acknowledgement: we would like to thank howard gob-ioff for helping with the performance studies given in section 5. we would also like to acknowledge argonne national laboratories for providing us with access to the machines used in these studies. we are particularly grateful to terry gaaster-land at argonne for her help. we would also like to thank nir shavit and the program committee for their comments on an earlier draft of this paper. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_3727",
        "graph": {
            "node_idx": 3727,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    5,
                    5,
                    6
                ]
            ],
            "node_list": [
                3727,
                16819,
                24266,
                4126,
                19278,
                14897,
                13412,
                21421,
                23932,
                24045,
                16890,
                2678,
                22675
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fragmented objects for distributed abstractions keywords: distributed objects, object oriented programming, distributed abstractions, fragmented objects,fragmented objects (fos) extend the object concept to a distributed environment. the abstract view of a fo is a single, shared object, of which the distribution is hidden to clients. in the concrete view the fo designer controls (if wished) the distribution of data and function and of the communication between fragments. fo programming is supported by the fog language, an extension of c++, and by a toolbox of predefined fos. the fog compiler ensures distributed type-safety of both the external and internal interfaces, verifies the encapsulation of fo instances, and automatically generates whatever coercions are necessary for marshalling/unmarshalling between layers. currently, the toolbox contains mainly classes of primitive fos such as rpc and multicast communication channels. we present the basic fragmented object concepts, the toolbox of predefined fos, the fog language and its compiler. we also present an example of a distributed application, the sos naming service, structured as fos. finally, we point out the benefits of the fo approach. fl this paper is submitted for publication in the ieee software journal. it will also appear in a ieee computer society text. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_3736",
        "graph": {
            "node_idx": 3736,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    5,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    5,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    21,
                    34
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                3736,
                914,
                3407,
                912,
                17872,
                915,
                4720,
                6733,
                18111,
                7308,
                2204,
                20124,
                1273,
                20126,
                20501,
                20647,
                3408,
                17312,
                8538,
                20116,
                24258,
                2369,
                24599,
                24771,
                24267,
                9031,
                19634,
                23280,
                19276,
                916,
                8450,
                18273,
                19051,
                24229,
                19454
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an optimal weighting criterion of case indexing for both numeric and symbolic attributesindexing of cases is an important topic for memory-based reasoning(mbr). one key problem is how to assign weights to attributes of cases. although several weighting methods have been proposed, some methods cannot handle numeric attributes directly, so it is necessary to discretize numeric values by classification. furthermore, existing methods have no theoretical background, so little can be said about optimality. we propose a new weighting method based on a statistical technique called quantification method ii. it can handle both numeric and symbolic attributes in the same framework. generated attribute weights are optimal in the sense that they maximize the ratio of variance between classes to variance of all cases. experiments on several benchmark tests show that in many cases, our method obtains higher accuracies than some other weighting methods. the results also indicate that it can distinguish relevant attributes from irrelevant ones, and can tolerate noisy data. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_3757",
        "graph": {
            "node_idx": 3757,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    3,
                    4,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                3757,
                3755,
                20398,
                3756,
                11263
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: failure detection and randomization: a hybrid approach to solve consensuswe present a consensus algorithm that combines unreliable failure detection and randomization, two well-known techniques for solving consensus in asynchronous systems with crash failures. this hybrid algorithm combines advantages from both approaches: it guarantees deterministic termination if the failure detector is accurate, and probabilistic termination otherwise. in executions with no failures or failure detector mistakes, the most likely ones in practice, consensus is reached in only two asynchronous rounds. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_3758",
        "graph": {
            "node_idx": 3758,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    11,
                    12,
                    2,
                    8,
                    3,
                    13,
                    3,
                    11,
                    14,
                    8,
                    2,
                    15,
                    2,
                    13,
                    16,
                    17,
                    18,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    5,
                    5,
                    6,
                    6,
                    7,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                3758,
                3760,
                3755,
                11263,
                20399,
                6458,
                4200,
                12222,
                3756,
                12519,
                14255,
                7398,
                616,
                3757,
                14557,
                12224,
                6932,
                12518,
                1328,
                3775
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the weakest failure detector for solving consensus asynchronous systems with a majority of correct processes.we determine what information about failures is necessary and sufficient to solve consensus in asynchronous distributed systems subject to crash failures. in [ct91], we proved that 3w, a failure detector that provides surprisingly little information about which processes have crashed, is sufficient to solve consensus in asynchronous systems with a majority of correct processes. in this paper, we prove that to solve consensus, any failure detector has to provide at least as much information as 3w. thus, 3w is indeed the weakest failure detector for solving \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_3787",
        "graph": {
            "node_idx": 3787,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    2,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    4,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    6,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                3787,
                20597,
                4722,
                7314,
                12870,
                16826,
                5988,
                770,
                14415,
                23050,
                4582,
                10001,
                164,
                165,
                17801,
                24522,
                6311,
                24700,
                14619,
                23429,
                17701,
                7318,
                13309,
                20774,
                12874,
                9239,
                12388,
                16010,
                7317,
                10707,
                601,
                214,
                24658,
                19851,
                540,
                7372,
                9404,
                15676,
                1558,
                3109,
                22313,
                15486,
                2627,
                11640,
                21974,
                8859,
                13722,
                23058,
                23064
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: determining average program execution times and their variancethis paper presents a general framework for determining average program execution times and their variance, based on the program's interval structure and control dependence graph. average execution times and variance values are computed using frequency information from an optimized counter-based execution profile of the program. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_3788",
        "graph": {
            "node_idx": 3788,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                3788,
                24221,
                17817,
                24702
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cryptographic limitations on learning one-clause logic programsan active area of research in machine learning is learning logic programs from examples. this paper investigates formally the problem of learning a single horn clause: we focus on generalizations of the language of constant-depth determinate clauses, which is used by several practical learning systems. we show first that determinate clauses of logarithmic depth are not learnable. next we show that learning indeterminate clauses with at most k indeterminate variables is equivalent to learning dnf. finally, we show that recursive constant-depth determinate clauses are not learnable. our primary technical tool is the method of prediction-preserving reducibilities introduced by pitt and war-muth [ 1990 ] ; as a consequence our results are independent of the representations used by the learning system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_3803",
        "graph": {
            "node_idx": 3803,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    2
                ]
            ],
            "node_list": [
                3803,
                7601,
                3804,
                17807
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: joining abstract and concrete computations in constraint logic programmingthe use of standard instances of the clp framework (e.g. clp (bool) and clp (r)) for non-standard (possibly abstract) interpretations, weakens the distinction between concrete and abstract computations in semantics and analysis. we formalize this idea by applying the well known approximation techniques (e.g. the standard theory of closure operators) in conjunction with a generalized notion of constraint system, supporting any program evaluation. the \"generalized semantics\" resulting from this process, abstracts away from standard semantic objects, by focusing on the general properties of any (possibly non-standard) semantic definition. in constraint logic programming, this corresponds to a suitable definition of the constraint system supporting the semantic definition. both top-down and a bottom-up semantics are considered. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_3811",
        "graph": {
            "node_idx": 3811,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    5,
                    2,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                3811,
                17600,
                24616,
                3810,
                19357,
                16831,
                19352,
                23356,
                23369,
                23372,
                23374,
                20066,
                12079
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: sics/r91:08 programming paradigms of the andorra kernel languagesics research report r91:08 swedish institute of computer science box 1263, s-164 28 kista, sweden \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_3819",
        "graph": {
            "node_idx": 3819,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    9,
                    14,
                    6,
                    15,
                    16,
                    17,
                    18,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                3819,
                2898,
                8759,
                19992,
                5731,
                7440,
                1598,
                5921,
                9156,
                3820,
                9726,
                1608,
                7652,
                10400,
                16057,
                1601,
                826,
                19302,
                19838,
                5991
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: asking questions to minimize errorsa number of efficient learning algorithms achieve exact identification of an unknown function from some class using membership and equivalence queries. using a standard transformation such algorithms can easily be converted to on-line learning algorithms that use membership queries. under such a transformation the number of equivalence queries made by the query algorithm directly corresponds to the number of mistakes made by the on-line algorithm. in this paper we consider several of the natural classes known to be learnable in this setting, and investigate the minimum number of equivalence queries with accompanying counterexamples (or equivalently the minimum number of mistakes in the on-line model) that can be made by a learning algorithm that makes a polynomial number of membership queries and uses polynomial computation time. we are able both to reduce the number of equivalence queries used by the previous algorithms and often to prove matching lower bounds. as an example, consider the class of dnf formulas over n variables with at most k = o(log n) terms. previously, the algorithm of blum and rudich [br92] provided the best known upper bound of 2 o(k) log n for the minimum number of equivalence queries needed for exact identification. we greatly improve on this upper bound showing that exactly k counterexamples are needed if the learner knows k a priori and exactly k +1 counterexamples are needed if the learner does not know k a priori. this exactly matches known lower bounds [bc92]. for many of our results we obtain a complete characterization of the tradeoff between the number of membership and equivalence queries needed for exact identification. the classes we consider here are monotone dnf formulas, horn sentences, o(log n)-term dnf formulas, read-k sat-j dnf formulas, read-once formulas over various bases, and deterministic finite automata. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_3835",
        "graph": {
            "node_idx": 3835,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                3835,
                3836,
                20784
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: empirical evaluation of human performance and agreement in parsing discourse constituents in spoken dialogue 1this paper presents an empirical study on the annotation of discourse units in spoken dialogues. the goal of this research is to examine whether task-oriented human-human dialogues can be structured as sequences of a small number of individual discourse segments that can be reliably end-pointed. the data used for this study is a corpus of 18 orthographic transcriptions of actual telephone conversations between customers and travel agents or yellow pages operators. we propose the use of a general agreement metric derived from the kappa coefficient and we apply it to measuring the level of agreement among human coders in bracketing discourse segments. despite the apparent difficulty of this annotation task, we show that a level of agreement around 60% can be reached among at least three out of five coders with variable levels of expertise, using a minimal and theory-neutral set of annotation instructions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_3858",
        "graph": {
            "node_idx": 3858,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    0,
                    7,
                    2,
                    4,
                    8,
                    9,
                    5,
                    10,
                    3,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4
                ]
            ],
            "node_list": [
                3858,
                16844,
                8939,
                13894,
                9299,
                22019,
                5654,
                21996,
                22018,
                8122,
                22102,
                4071
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a theory of pattern rejectioncolumbia univeristy technical report cucs-013-95 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_3872",
        "graph": {
            "node_idx": 3872,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    5,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    16,
                    17,
                    10,
                    24,
                    20,
                    25,
                    26,
                    27,
                    28,
                    25,
                    29,
                    9,
                    30,
                    31,
                    32,
                    33,
                    2,
                    28,
                    6,
                    34,
                    35,
                    36,
                    8,
                    0,
                    29,
                    31,
                    25,
                    28,
                    6,
                    34,
                    35,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                3872,
                3871,
                17187,
                1994,
                7538,
                2587,
                8034,
                5475,
                13368,
                2586,
                7308,
                20801,
                5920,
                16586,
                17090,
                17780,
                9802,
                10414,
                19081,
                2585,
                20540,
                12076,
                16995,
                4627,
                10049,
                21395,
                20499,
                1028,
                13429,
                13440,
                22562,
                22996,
                23012,
                23281,
                5477,
                21457,
                21458
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning feature-based semantics with simple recurrent networksthe paper investigates the possibilities for using simple recurrent networks as transducers which map sequential natural language input into non-sequential feature-based semantics. the networks perform well on sentences containing a single main predicate (encoded by transitive verbs or prepositions) applied to multiple-feature objects (encoded as noun-phrases with adjectival modifiers), and shows robustness against ungrammatical inputs. a second set of experiments deals with sentences containing embedded structures. here the network is able to process multiple levels of sentence-final embeddings but only one level of center-embedding. this turns out to be a consequence of the network's inability to retain information that is not reflected in the outputs over intermediate phases of processing. two extensions to elman's [9] original recurrent network architecture are introduced. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_3890",
        "graph": {
            "node_idx": 3890,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    2,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    3,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    5,
                    37,
                    38,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    10
                ]
            ],
            "node_list": [
                3890,
                4577,
                12210,
                1586,
                3584,
                12183,
                20602,
                22488,
                22844,
                23278,
                15591,
                5183,
                1587,
                20629,
                8848,
                12217,
                12221,
                12224,
                12211,
                6956,
                9023,
                24228,
                5182,
                6442,
                8742,
                20890,
                12970,
                14292,
                7419,
                5208,
                11255,
                12641,
                7194,
                2694,
                8608,
                20964,
                13041,
                14342,
                14289
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: protocol composition in horushorus is a communication architecture that treats a protocol as an abstract data type. protocol layers can be stacked on top of each other in a variety of ways, at run-time. this paper starts out with describing the many classes of protocols that can be supported this way. next, we describe the horus object model that we designed for this technology, and the interface between the layers that makes it all work. we then present an example layer which implements a group membership protocol. then, we look at a example stack of protocols, which provides fault-tolerant, totally ordered communication between a group of processes. we conclude with presenting some remaining challenges in our project. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_3920",
        "graph": {
            "node_idx": 3920,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    5,
                    21,
                    22,
                    23,
                    24,
                    25,
                    4,
                    26,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    8,
                    8
                ]
            ],
            "node_list": [
                3920,
                9692,
                16899,
                19153,
                18278,
                1227,
                19963,
                8842,
                3922,
                21997,
                20147,
                18812,
                1322,
                21522,
                13640,
                21591,
                22622,
                1231,
                17883,
                18185,
                6872,
                19774,
                1909,
                22113,
                22909,
                18448,
                4185
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mixture models for optical flow computationthe computation of optical flow relies on merging information available over an image patch to form an estimate of 2d image velocity at a point. this merging process raises a host of issues, which include the treatment of outliers in component velocity measurements and the modeling of multiple motions within a patch which arise from occlusion boundaries or transparency. we present a new approach which allows us to deal with these issues within a common framework. our approach is based on the use of a probabilistic mixture model to explicitly represent multiple motions within a patch. we use a simple extension of the em-algorithm to compute a maximum likelihood estimate for the various motion parameters. preliminary experiments indicate that this approach is computationally efficient and can provide robust estimates of the optical flow values in the presence of outliers and multiple motions. the basic approach can also be applied to other problems in computational vision, such as the computation of 3d relative motion, which require the integration of several partial constraints to obtain a desired quantity. this paper is the university of toronto, department of computer science, technical report: rbcv-tr-93-44, april 1993. correspondence should be sent to a. jepson, department of computer science, university of toronto, 6 kings college road, toronto, ontario m5s 1a4, or to jepson@cs.toronto.edu \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_3934",
        "graph": {
            "node_idx": 3934,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    3,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    7,
                    20,
                    21,
                    8,
                    22,
                    23,
                    24,
                    25,
                    7,
                    26,
                    27,
                    28,
                    0,
                    29,
                    30,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                3934,
                18372,
                17584,
                6957,
                10533,
                4737,
                3940,
                11703,
                8059,
                3793,
                23188,
                15496,
                25063,
                20563,
                11974,
                23186,
                15495,
                23187,
                25011,
                20565,
                17961,
                5088,
                23037,
                23038,
                147,
                8389,
                6240,
                11973,
                4736,
                8270,
                11776
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolving visually guided robotsa version of this paper appears in: proceedings of sab92, the second international conference on simulation of adaptive behaviour j.-a. meyer, h. roitblat, and s. wilson, editors, mit press bradford books, cambridge, ma, 1993. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_3946",
        "graph": {
            "node_idx": 3946,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    5
                ]
            ],
            "node_list": [
                3946,
                17099,
                5444,
                17545,
                18693,
                7497,
                19668,
                17761
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an instrumented approach to improving software quality through formal technical review research papercsrs is an instrumented, computer-supported cooperative work environment for formal technical review. csrs addresses problems in the practice of ftr by providing computer support for both the process and products of ftr. csrs also addresses problems in research on ftr through instrumentation supporting fine-grained, high quality data collection and analysis. this paper describes csrs, a computer-mediated review method called ftarm, and selected findings from their use to explore issues in formal technical review. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_4000",
        "graph": {
            "node_idx": 4000,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    3,
                    10,
                    11,
                    12,
                    0,
                    1,
                    13,
                    2,
                    14,
                    3,
                    15,
                    2,
                    1,
                    4,
                    16,
                    1,
                    2,
                    3,
                    17,
                    4,
                    16,
                    18,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                4000,
                421,
                4002,
                8092,
                4001,
                14775,
                4414,
                17469,
                10630,
                856,
                9711,
                19694,
                9710,
                2627,
                13361,
                21704,
                19650,
                19102,
                20972,
                10229,
                24004
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: compilation of i/o communications for hpfthe mimd distributed memory architecture is the choice architecture for massively parallel machines. it insures scalability, but at the expense of programming ease. new languages such as hpf were introduced to solve this problem: the user advises the compiler about data distribution and parallel computations through directives. this paper focuses on the compilation of i/o communications for hpf. data must be efficiently collected to or updated from i/o nodes with vectorized messages, for any possible mapping. the problem is solved using standard polyhedron scanning techniques. the code generation issues to handle the different cases are addressed. then the method is improved and extended to parallel i/os. this work suggests new hpf directives for parallel i/os. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_4001",
        "graph": {
            "node_idx": 4001,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    3,
                    14,
                    15,
                    16,
                    17,
                    1,
                    18,
                    2,
                    19,
                    3,
                    20,
                    2,
                    1,
                    0,
                    5,
                    2,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                4001,
                421,
                4002,
                8092,
                19102,
                19650,
                20972,
                10229,
                24004,
                3653,
                14775,
                17469,
                10630,
                856,
                9711,
                19694,
                4414,
                15413,
                2627,
                13361,
                21704,
                13437,
                13719,
                21703,
                13721,
                15885,
                16204
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: in and out array region analysesin order to perform powerful program optimizations, an exact interprocedural analysis of array data flow is needed. for that purpose, two new types of array region are introduced. in and out regions represent the sets of array elements, the values of which are imported to or exported from the current statement or procedure. among the various applications are: compilation of communications for message-passing machines, array privatization, compile-time optimization of local memory or cache behavior in hierarchical memory machines. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_4009",
        "graph": {
            "node_idx": 4009,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    4,
                    6,
                    7,
                    11,
                    3,
                    5,
                    12,
                    4,
                    7,
                    11,
                    3,
                    13,
                    14,
                    5,
                    7,
                    3,
                    5,
                    12,
                    15,
                    16,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9
                ]
            ],
            "node_list": [
                4009,
                18131,
                11184,
                5879,
                5878,
                6016,
                10770,
                6017,
                6019,
                14557,
                22441,
                8973,
                8972,
                24776,
                24802,
                10313,
                6018
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the asynchronous computability theorem for t-resilient tasks (preliminary version)we give necessary and sufficient combinatorial conditions characterizing the computational tasks that can be solved by n asynchronous processes, up to t of which can fail by halting. the range of possible input and output values for an asynchronous task can be associated with a high-dimensional geometric structure called a simplicial complex. our main theorem characterizes computability in terms of the topological properties of this complex. most notably, a given task is computable only if it can be associated with a complex that is simply connected with trivial homology groups. in other words, the complex has \"no holes!\" applications of this characterization include the first impossibility results for several long-standing open problems in distributed computing, such as the \"renaming\" problem of attiya et. al., the \"k-set agreement\" problem of chaudhuri, and a generalization of the approximate agreement problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_4029",
        "graph": {
            "node_idx": 4029,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                4029,
                6564,
                17500,
                19529,
                19606,
                6565
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cellflow: a parallel rendering scheme for distributed memory architectureswe present the cellflow method for object space subdivision that exploits frame coherency to implement a look-ahead scheme of object dataow. the implementation of this scheme exploits the communication features of modern scalable multicomput-ers to achieve near linear speedup by means of latency hiding. we demonstrate the performance of our approach in the field of volume rendering by implementing incremental rotation of the volumetric object about its center. the simplicity of the algorithm, its optimal embedding in popular network topologies, and minimal congestion-free communication among processors are its main advantages. results are shown for implementation on the cray t3d, a distributed memory 3d torus architecture. computation and communication load balancing issues among processors are also addressed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_4051",
        "graph": {
            "node_idx": 4051,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8,
                    9,
                    10,
                    4,
                    5,
                    11,
                    12,
                    13,
                    6,
                    14,
                    15,
                    6,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                4051,
                7030,
                18806,
                2323,
                13513,
                13474,
                2335,
                22428,
                10322,
                6521,
                13512,
                13515,
                13514,
                13516,
                21606,
                11266,
                2337,
                18834,
                9769,
                9976,
                2336,
                13865,
                7412,
                11582
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: beowulf: a parallel workstation for scientific computationnetwork-of-workstations technology is applied to the challenge of implementing very high performance workstations for earth and space science applications. the beowulf parallel workstation employs 16 pc-based processing modules integrated with multiple ethernet networks. large disk capacity and high disk to memory bandwidth is achieved through the use of a hard disk and controller for each processing module supporting up to 16 way concurrent accesses. the paper presents results from a series of experiments that measure the scaling characteristics of beowulf in terms of communication bandwidth, file transfer rates, and processing performance. the evaluation includes a computational fluid dynamics code and an n-body gravitational simulation program. it is shown that the beowulf architecture provides a new operating point in performance to cost for high performance workstations, especially for file transfers under favorable conditions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4053",
        "graph": {
            "node_idx": 4053,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    5,
                    5,
                    22,
                    23,
                    24,
                    0,
                    22,
                    25,
                    7,
                    10,
                    26,
                    27,
                    28,
                    29,
                    30
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    6,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                4053,
                413,
                4870,
                17793,
                19814,
                19250,
                10340,
                21724,
                23420,
                4054,
                4052,
                18173,
                3414,
                412,
                18065,
                12641,
                14410,
                15327,
                15192,
                14663,
                22947,
                4868,
                16872,
                24740,
                12935,
                21362,
                6843,
                22935,
                23450,
                15740,
                16211
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: start-time fair queuing: a scheduling algorithm for integrated services packet switching networkswe present start-time fair queuing (sfq) algorithm that is com-putationally efficient, achieves fairness regardless of variation in a server capacity, and has the smallest fairness measure among all known fair scheduling algorithms. we analyze its throughput, single server delay, and end-to-end delay guarantee for variable rate fluctuation constrained (fc) and exponentially bounded fluctuation (ebf) servers. we show that sfq is better suited than weighted fair queuing for integrated services networks and it is strictly better than self clocked fair queuing. to support heterogeneous services and multiple protocol families in integrated services networks, we present a hierarchical sfq scheduler and derive its performance bounds. our analysis demonstrates that sfq is suitable for integrated services networks since it: (1) achieves low average as well as maximum delay for low-throughput applications (e.g., interactive audio, telnet, etc.); (2) provides fairness which is desirable for vbr video; (3) provides fairness, regardless of variation in a server capacity, for throughput-intensive, flow-controlled data applications; (4) enables hierarchical link sharing which is desirable for managing heterogeneity; and (5) is computationally efficient. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_4066",
        "graph": {
            "node_idx": 4066,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                4066,
                18824,
                5314,
                10287,
                18102
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning novel domains through curiosity and conjecture constraints: the domain is very large and thethis paper describes dido, a system we have developed to carry out exploratory learning of unfamiliar domains without assistance from an external teacher. the program incorporates novel approaches to experience generation and representation generation. the experience generator uses a heuristic based on shannon's uncertainty function to find informative examples. the representation generator makes conjectures on the basis of small amounts of evidence and retracts them if they prove to be wrong or useless. a number of experiments are described which demonstrate that the system can distribute its learning resources to steadily acquire a good representation of the whole of a domain, and that the system can readily acquire both disjunctive and this paper gives an account of dido, a learning system we have developed to carry out exploratory learning of unfamiliar domains * . we define the exploratory learning problem as follows: situation: an intelligent agent is placed in a novel domain comprised of a large number of entities. the agent has two types of interaction with the domain. it is equipped with a finite set of motor operations which can be applied to entities in the domain. it is also equipped with a finite set of perceptual operations which enable it to perceive the current state of any entities present in its locality. the agent has no prior knowledge of the effect of any of its motor operations on any entity. task: the agent knows that it may eventually have to solve problems in the domain but does not have any prior knowledge of what those problems might be. the agent must try to discover what effect its possible actions will have in any circumstances. more specifically, its task is to build a representation of the domain which will enable it to predict the outcomes of each of its motor operations in any situation. this is the basic knowledge the agent would need to engage in problem solving. * the work reported in this paper was supported by nsf grant# mcs-8203956. this problem is significantly different from those addressed by other machine learning programs. the absence of prior knowledge means that deductive learning methods cannot be applied. any solution must be based on inductive inference. the most widely studied type of inductive inference problem is that of learning concepts from sets of classified examples (eg.winston, 1975; michalski & dietterich, 1983; quinlan, 1983, 1986). the problem stated above differs from this type of problem in two respects: there is no external agent to supply classifications of examples, and there is no predefined classification scheme that the agent is trying to discover. a number of learning programs have been written which do not require such a predefined classification scheme (eg. michalski & stepp, 1983; fisher & langley, 1986). the task performed by such systems, which is commonly termed 'conceptual clustering', involves developing a classification scheme for a set of examples. such programs attempt to construct a parsimonious taxonomy to cover the example set on the basis of similarity between examples. the learning problem considered here resembles conceptual clustering in that the learning system must develop its own classification scheme. on the other hand it differs significantly in that the basis for forming classes is not similarity between examples but rather similarity of their behavior when subject to the agent's motor operations. thus the classification scheme developed is determined both by characteristics of the domain and by characteristics of the agent. in this sense the agent's task is to build an egocentric representation of its world. learning involves two distinct but interrelated search processes (shalin et al, 1987): a search for a good representation in the space of possible representations (simon & lea, 1974; mitchell, 1977, 1979), and a search for informative examples in the space of possible experiences (scott & vogt 1983). the information obtained from the experiences is used to guide the search for a better representation, while the current state of the representation may be used to guide the search for informative experiences. conjunctive concepts even in the presence of noise. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_4071",
        "graph": {
            "node_idx": 4071,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    4
                ]
            ],
            "node_list": [
                4071,
                16878,
                7858,
                17110,
                11028,
                19844
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: histogram refinement for content-based image retrievalcolor histograms are widely used for content-based image retrieval. their advantages are efficiency, and insensitivity to small changes in camera viewpoint. however, a histogram is a coarse characterization of an image, and so images with very different appearances can have similar histograms. we describe a technique for comparing images called histogram refinement, which imposes additional constraints on histogram based matching. histogram refinement splits the pixels in a given bucket into several classes, based upon some local property. within a given bucket, only pixels in the same class are compared. we describe a split histogram called a color coherence vector (ccv), which partitions each histogram bucket based on spatial coherence. ccv's can be computed at over 8 images per second on a standard workstation. a database with 60,000 images can be queried using ccv's in under 6 seconds. we demonstrate that histogram refinement can be used to distinguish images whose color histograms are indistinguishable. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4088",
        "graph": {
            "node_idx": 4088,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    7,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                4088,
                5235,
                409,
                2141,
                2661,
                1133,
                24431,
                19917,
                17108,
                20630,
                11459,
                24597,
                17132,
                24730,
                1198,
                22618,
                3080,
                333,
                575,
                24149,
                11522,
                20754,
                5114,
                14550,
                16859,
                21816,
                9010,
                19592,
                22481,
                3040,
                23533,
                493,
                20637,
                495,
                3384,
                9345,
                5265,
                8413,
                13844,
                489,
                24278,
                17453,
                10043,
                2563,
                5294,
                19068,
                6079,
                813,
                5295,
                814,
                4595,
                14074,
                9999
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: references the file system as a parallel program 23 of 23 plementation of the sunscal94] d. j. scales and m. s. lam. the design and evaludation of a shared object system for distributed memory machines. in proc. of the first symposium on operating systems design and implementation, pages 101114, novem-ber 1994. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4095",
        "graph": {
            "node_idx": 4095,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    5,
                    6,
                    7,
                    8,
                    9,
                    0,
                    10,
                    11,
                    12,
                    13,
                    3,
                    14,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    4,
                    4
                ]
            ],
            "node_list": [
                4095,
                4094,
                7535,
                16073,
                16074,
                4093,
                17823,
                4096,
                4092,
                4097,
                8776,
                5533,
                13039,
                688,
                16211
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic bandwidth allocation for atm switches 1we explore a dynamic approach to the problems of call admission and resource allocation for communication networks with connections that are differentiated by their quality of service requirements. in a dynamic approach, the amount of spare resources is estimated on-line based on feedbacks from the network's quality of service monitoring mechanism. the schemes we propose remove the dependence on accurate traffic models and thus simplify the tasks of supplying traffic statistics required of network users. in this paper we present two dynamic algorithms. the objective of these algorithms is to find the minimum bandwidth necessary to satisfy a cell loss probability constraint at an asynchronous transfer mode (atm) switch. we show that in both schemes the bandwidth chosen by the algorithm approaches the optimal value almost surely. furthermore, in the second scheme, which determines the point closest to the optimal bandwidth from a finite number of choices, the expected learning time is finite. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_4100",
        "graph": {
            "node_idx": 4100,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    1,
                    3,
                    4,
                    5,
                    13,
                    14,
                    15,
                    2,
                    11,
                    12,
                    1,
                    16,
                    3,
                    4,
                    5,
                    13,
                    14,
                    17,
                    11,
                    12,
                    1,
                    3,
                    18,
                    13,
                    19,
                    20,
                    1,
                    12,
                    11,
                    21,
                    22,
                    18,
                    13,
                    23,
                    19,
                    20,
                    24,
                    25,
                    26,
                    6,
                    13,
                    27,
                    28,
                    14,
                    29,
                    30,
                    31,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                4100,
                5606,
                4382,
                5607,
                5609,
                19440,
                24993,
                4154,
                4099,
                11148,
                11892,
                17222,
                17438,
                20394,
                6782,
                11330,
                215,
                13224,
                20391,
                2764,
                6765,
                4113,
                6766,
                12683,
                16885,
                1471,
                11889,
                4740,
                19996,
                1935,
                13443,
                24035
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a general approximation technique for constrained forest problemswe present a general approximation technique for a large class of graph problems. our technique mostly applies to problems of covering, at minimum cost, the vertices of a graph with trees, cycles or paths satisfying certain requirements. in particular, many basic combinatorial optimization problems fit in this framework, including the shortest path, minimum-cost spanning tree, minimum-weight perfect matching, traveling salesman and steiner tree problems. our technique produces approximation algorithms that run in o(n 2 log n) time and come within a factor of 2 of optimal for most of these problems. for instance, we obtain a 2-approximation algorithm for the minimum-weight perfect matching problem under the triangle inequality. our running time of o(n 2 log n) time compares favorably with the best strongly polynomial exact algorithms running in o(n 3 ) time for dense graphs. a similar result is obtained for the 2-matching problem and its variants. we also derive the first approximation algorithms for many np-complete problems, including the non-fixed point-to-point connection problem, the exact path partitioning problem and complex location-design problems. moreover, for the prize-collecting traveling salesman or steiner tree problems, we obtain 2-approximation algorithms, therefore improving the previously best-known performance guarantees of 2.5 and 3, respectively [4]. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_4104",
        "graph": {
            "node_idx": 4104,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    5,
                    6,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                4104,
                8647,
                7392,
                15608,
                18378,
                5604,
                10572
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fuzzy substructure discoverythis paper describes a method for discovering substructures in data using a fuzzy graph match. a previous implementation of the subdue system discovers substructures based on the psychologically-motivated criteria of cognitive savings, compactness, connectivity and coverage. however, the instances in the data must exactly match the discovered substructures. we describe a new implementation of subdue that employs a fuzzy graph match to discover substructures which occur often in the data, but not always in the same form. this fuzzy substructure discovery can be used to formulate fuzzy concepts, compress the data description, and discover interesting structures in data that are found either in their pure form or in a slightly convoluted form. examples from the domains of scene analysis and chemical compound analysis demonstrate the fuzzy discovery tech nique. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4123",
        "graph": {
            "node_idx": 4123,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    5,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    9,
                    26,
                    27,
                    18,
                    17,
                    28,
                    29,
                    1,
                    30,
                    5,
                    13,
                    31,
                    23,
                    32,
                    3,
                    2,
                    27,
                    1,
                    4,
                    33,
                    34,
                    35,
                    1,
                    24,
                    5,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                4123,
                7532,
                6075,
                18121,
                609,
                3059,
                1361,
                659,
                4121,
                17777,
                15830,
                22153,
                21834,
                658,
                8830,
                2558,
                8478,
                5835,
                1950,
                20266,
                22035,
                16087,
                16713,
                3057,
                1078,
                17122,
                17816,
                1360,
                1359,
                6580,
                319,
                10748,
                5738,
                3737,
                4882,
                313,
                22154
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: interests lie in the areas of intelligent agents, problem solving, machine learning, and psychological modeling.up the command hierarchy, we would expect that the frequency of the messages will decrease and the length of the message will increase, placing less emphasis on reactivity and interruptibility and more emphasis on the process of interpreting and generating messages. john e. laird is an associate professor of electrical engineering and computer science and the director of the artificial intelligence laboratory at the university of michigan. he received his b.s. degree in computer and communication sciences from the university of michigan in 1975 and his m.s. and ph.d. degrees in computer science from carnegie mellon university in 1978 and 1983, respectively. his interests are centered on creating integrated intelligent agents (using the soar architecture), leading to research in problem solving, complex behavior representation, machine learning, cognitive modeling. [ calder et al., 1993 ] r. calder, j. smith, a. courtenmanche, j. mar, and a. ceranow-icz. modsaf behavior simulation and control. in proceedings of the third conference on computer generated forces and behavioral representation, 1993. available as technical report ist-tr-93-07 from the university of central florida. [ jones and laird, 1994 ] r. m. jones and j. e. laird. multiple information sources and multiple participants: managing situational awareness in an autonomous agent. in proceedings of the fourth conference on computer generated forces and behavioral representation, may 1994. [ powell and hutchinson, 1993 ] d. r. powell and j. l. hutchinson. eagle ii: a prototype for multi-resolution combat modeling. in proceedings of the third conference on computer generated forces and behavioral representation, 1993. available as technical report ist-tr-93-07 from the university of central florida. [ rosenbloom et al., 1994 ] p. s. rosen-bloom, w. l. johnson, r. m. jones, f. koss, j. e. laird, j. f. lehman, r. rubinoff, k. b. schamb, and m. tambe. intelligent automated agents for tactical air simulation: a progress report. in proceedings of the fourth conference on computer generated forces and behavioral representation, may 1994. [ shoham and tennenholtz, 1992 ] y. shoham and m. tennenholtz. on the synthesis of useful social laws for artificial agents societies (preliminary report). in proceedings of aaai-92. morgan kaufmann, 1992. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_4135",
        "graph": {
            "node_idx": 4135,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                4135
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a polylogarithmic bound for an iterative substructuring method for spectral elements in three dimensionsiterative substructuring methods form an important family of domain decomposition algorithms for elliptic finite element problems. a p-version finite element method based on continuous, piecewise q p functions is considered for second order elliptic problems in three dimensions; this special method can also be viewed as a conforming spectral element method. an iterative method is designed for which the condition number of the relevant operator grows only in proportion to (1 + log p) 2 : this bound is independent of jumps in the coefficient of the elliptic problem across the interfaces between the subregions. numerical results are also reported which support the theory. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_4140",
        "graph": {
            "node_idx": 4140,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    4,
                    15,
                    16,
                    17,
                    18,
                    19,
                    13,
                    4,
                    20,
                    21,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    8
                ]
            ],
            "node_list": [
                4140,
                24340,
                20476,
                21637,
                5278,
                5277,
                15333,
                24905,
                15578,
                15880,
                20863,
                10153,
                9080,
                9079,
                4141,
                23101,
                23103,
                5280,
                4138,
                5276,
                13442,
                8464
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mobile agents: are they a good idea?this report has been submitted for publication outside of ibm and will probably be copyrighted if accepted for publication. it has been issued as a research report for early dissemination of its contents. in view of the transfer of copyright to the outside publisher, its distribution outside of ibm prior to publication should be limited to peer communications and specific requests. after outside publication, requests should be filled only by reprints or legally obtained copies of the article (e.g., payment of royalties). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_4144",
        "graph": {
            "node_idx": 4144,
            "edge_index": [
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                4144,
                7573,
                17795
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: pruning decision trees with misclassification costswe describe an experimental study of pruning methods for decision tree classifiers when the goal is minimizing loss rather than error. in addition to two common methods for error minimization, cart's cost-complexity pruning and c4.5's error-based pruning, we study the extension of cost-complexity pruning to loss and one pruning variant based on the laplace correction. we perform an empirical comparison of these methods and evaluate them with respect to loss. we found that applying the laplace correction to estimate the probability distributions at the leaves was beneficial to all pruning methods. unlike in error minimization, and somewhat surprisingly, performing no pruning led to results that were on par with other methods in terms of the evaluation criteria. the main advantage of pruning was in the reduction of the decision tree size, sometimes by a factor of ten. while no method dominated others on all datasets, even for the same domain different pruning mechanisms are better for different loss matrices. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_4160",
        "graph": {
            "node_idx": 4160,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    4,
                    26,
                    6,
                    27,
                    7,
                    3,
                    23,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    25,
                    23,
                    37,
                    7,
                    8,
                    38,
                    39,
                    27,
                    40,
                    3,
                    41,
                    42,
                    8,
                    43,
                    44,
                    45,
                    46
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    10
                ]
            ],
            "node_list": [
                4160,
                10231,
                5839,
                15349,
                23058,
                3393,
                15724,
                1679,
                23442,
                14334,
                15887,
                4002,
                21704,
                10229,
                15885,
                15886,
                19540,
                18216,
                4273,
                7734,
                15354,
                4925,
                15883,
                23440,
                10652,
                20234,
                11116,
                4580,
                24183,
                24322,
                24408,
                4634,
                18086,
                18813,
                24656,
                4796,
                5304,
                15726,
                15729,
                14854,
                22650,
                10006,
                15360,
                13437,
                2657,
                24004,
                15889
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: array privatization for parallel execution of loopsin recent experiments, array privatization played a critical role in successful parallelization of several real programs. this paper presents compiler algorithms for the program analysis for this transformation. the paper also addresses issues in the implementation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_4185",
        "graph": {
            "node_idx": 4185,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    5,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    4,
                    6
                ]
            ],
            "node_list": [
                4185,
                16899,
                24331,
                8843,
                14056,
                21997,
                14274,
                18278,
                20147,
                3203,
                14281
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: estimating optical flow in segmented images using variable-order parametric models with local deformationsthis paper presents a new model for estimating optical flow based on the motion of planar regions plus local deformations. the approach exploits brightness information to organize and constrain the interpretation of the motion by using segmented regions of piecewise smooth brightness to hypothesize planar regions in the scene. paramet- ric flow models are estimated in these regions in a two step process which first computes a coarse fit and estimates the appropriate parameterization of the motion of the region (two, six, or eight parameters). the initial fit is refined using a generalization of the standard area-based regression approaches. since the assumption of planarity is likely to be violated, we allow local deformations from the planar assumption in the same spirit as physically-based approaches which model shape using coarse parametric models plus local deformations. this parametric+deformation model exploits the strong constraints of parametric approaches while retaining the adaptive nature of regularization approaches. experimental results on a variety of images indicate that the parametric+deformation model produces accurate flow estimates while the incorporation of brightness segmentation provides precise localization of motion boundaries. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4193",
        "graph": {
            "node_idx": 4193,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                    7,
                    3,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                4193,
                16902,
                7050,
                18499,
                18776,
                11270,
                976,
                18224
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: focusing qualitative simulation using temporal logic: theoretical foundationswe illustrate teqsim, a qualitative simulator for continuous dynamical systems that combines the expressive power of qualitative differential equations with temporal logic to constrain and refine the resulting predicted behaviors. temporal logic is used to specify constraints that restrict the simulation to a region of the state space and to specify trajectories for input variables. a propositional linear-time temporal logic is adopted, which is extended to a three valued logic that allows a formula to be conditionally entailed when quantitative information specified in the formula can be applied to a behavior to refine it. we present a formalization of the logic with correctness and completeness results for the adopted model checking algorithm. we show an example of the simulation of a non-autonomous dynamical system and illustrate possible application tasks, ranging from simulation to monitoring and control of continuous dynamical systems, where teqsim can be applied. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_4242",
        "graph": {
            "node_idx": 4242,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    3,
                    6,
                    5,
                    19,
                    16,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                4242,
                1707,
                9610,
                4638,
                10558,
                10604,
                3554,
                2074,
                11149,
                3005,
                2205,
                24654,
                1697,
                3272,
                18771,
                20135,
                16997,
                15422,
                23501,
                16793
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: recursive algorithms for approximating probabilities in graphical modelsmit computational cognitive science technical report 9604 abstract we develop a recursive node-elimination formalism for efficiently approximating large probabilistic networks. no constraints are set on the network topologies. yet the formalism can be straightforwardly integrated with exact methods whenever they are/become applicable. the approximations we use are controlled: they maintain consistently upper and lower bounds on the desired quantities at all times. we show that boltzmann machines, sigmoid belief networks, or any combination (i.e., chain graphs) can be handled within the same framework. the accuracy of the methods is verified exper imentally. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_4243",
        "graph": {
            "node_idx": 4243,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2,
                    1,
                    7,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                4243,
                6826,
                4244,
                7285,
                1622,
                1847,
                11033,
                9572
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: some remarks on the backpropogation algorithm for neural net learningreport sycon-88-02 abstract this report contains some remarks about the backpropagation method for neural net learning. we concentrate in particular in the study of local minima of error functions and the growth of weights during learning. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_4247",
        "graph": {
            "node_idx": 4247,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    5,
                    3,
                    4,
                    12,
                    13,
                    14,
                    9,
                    10,
                    15,
                    16,
                    17,
                    5,
                    4,
                    18,
                    6,
                    19,
                    10,
                    15,
                    20,
                    10,
                    21,
                    15,
                    22,
                    23,
                    2,
                    3,
                    4,
                    24,
                    0,
                    8,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9
                ]
            ],
            "node_list": [
                4247,
                2846,
                711,
                11421,
                11543,
                20538,
                12081,
                461,
                24433,
                12162,
                20608,
                599,
                9409,
                18669,
                12161,
                7985,
                21944,
                8302,
                11542,
                14572,
                13500,
                1305,
                463,
                17705,
                25062
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: understanding application performance on shared virtual memory systemsmany researchers have proposed interesting protocols for shared virtual memory (svm) systems, and demonstrated performance improvements on parallel programs. however, there is still no clear understanding of the performance potential of svm systems for different classes of applications. this paper begins to fill this gap, by studying the performance of a range of applications in detail and understanding it in light of application characteristics. we first develop a brief classification of the inherent data sharing patterns in the applications, and how they interact with system granularities to yield the communication patterns relevant to svm systems. we then use detailed simulation to compare the performance of two svm approaches| lazy released consistency (lrc) and automatic update release consistency (aurc)|with each other and with an all-hardware cc-numa approach. we examine how performance is affected by problem size, machine size, key system parameters, and the use of less optimized program implementations. we find that svm can indeed perform quite well for systems of at least up to 32 processors for several nontrivial applications. however, performance is much more variable across applications than on cc-numa systems, and the problem sizes needed to obtain good parallel performance are substantially larger. the hardware-assisted aurc system tends to perform significantly better than the all-software lrc under our system assumptions, particularly when realistic cache hierarchies are used. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4248",
        "graph": {
            "node_idx": 4248,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                4248,
                6577,
                5744,
                11275,
                8600,
                2741,
                19253,
                22442,
                14989,
                23790
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: network multicomputing using recoverable distributed shared memorya network multicomputer is a multiprocessor in which the processors are connected by general-purpose networking technology, in contrast to current distributed memory multiprocessors where a dedicated special-purpose interconnect is used. the advent of high-speed general-purpose networks provides the impetus for a new look at this multiprocessor model, removing the bottleneck of current slow networks. however, major software issues remain unsolved. a convenient machine abstraction must be developed that hides from the application programmer low-level details such as message passing or machine failures. we use distributed shared memory as a programming abstraction, and rollback recovery through consistent checkpointing to provide fault tolerance. measurements of the implementations of distributed shared memory and consistent checkpointing show that these abstractions can be implemented efficiently. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4261",
        "graph": {
            "node_idx": 4261,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                4261,
                16919,
                3526,
                22547,
                3814,
                22840,
                2561,
                5673,
                1639,
                12610,
                6886,
                3678,
                14626,
                7316,
                15118,
                22870,
                4686,
                821
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: performance of the cm-5 scalable file systemassessing the performance and software interactions of emerging parallel input/output systems is a critical first step in input/output software tuning. moreover, understanding the system response to well-understood, synthetic input/output patterns is itself a prelude to analysis of more complex application input/output patterns. we have conducted a series of experiments to measure the performance of the cm-5's new scalable disk array (sda) and scalable parallel file system (sfs) using the file system interfaces provided by the data parallel cm fortran and message passing cmmd programming models. the results of these experiments suggest that the cm-5's parallel input/output system is an improvement over its predecessor, the cm-2 data vault. however, network bandwidth can be a bottleneck for the data reordering phase of input/output operations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4281",
        "graph": {
            "node_idx": 4281,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                4281,
                8178,
                179,
                14370,
                15662,
                22370,
                16448,
                18103,
                5487
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: creation of views for reuse of software with different data representationscopyright c fl1995 by ieee. personal use of this material is permitted. however, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the ieee. abstract software reuse is inhibited by the many different ways in which equivalent data can be represented. we describe methods by which views can be constructed semiautomatically to describe how application data types correspond to the abstract types that are used in numerical generic algorithms. given such views, specialized versions of the generic algorithms that operate directly on the application data can be produced by compilation. this enables reuse of the generic algorithms for an application with minimal effort. graphical user interfaces allow views to be specified easily and rapidly. algorithms are presented for deriving, by symbolic algebra, equations that relate the variables used in the application data to the variables needed for the generic algorithms. arbitrary application data structures are allowed. units of measurement are converted as needed. these techniques allow reuse of a single version of a generic algorithm for a variety of possible data representations and programming languages. these techniques can also be applied in data conversion and in object-oriented, functional, and transformational programming. fl g. s. novak, jr. is with the department of computer sciences, university of texas, austin, tx 78712. an on-line demonstration of the software described in this paper is available on the world wide web via http://www.cs.utexas.edu/users/novak in the automatic programming server demo, mathematical view option. a workstation running x windows is required. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_4282",
        "graph": {
            "node_idx": 4282,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    4
                ]
            ],
            "node_list": [
                4282,
                8178,
                24517,
                18609,
                15535,
                14370,
                15662,
                22370
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: p++: a language for large-scale reusable software componentsp++ is a programming language that supports the genvoca model [bo92], a particular style of software design that is intended for building software system generators. p++ is an enhanced version of c++: it offers linguistic extensions for component encapsulation, abstraction, parameterization, and inheritance, where a component is a subsystem, i.e., a suite of interrelated classes and functions. workshop goals: feedback on our research; exposure to other work in software reuse. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_4322",
        "graph": {
            "node_idx": 4322,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                4322,
                16936,
                23801
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: urv esprit for tracking time-varying signalsesprit is an algorithm for determining the fixed directions of arrival of a set of narrowband signals at an array of sensors. unfortunately, its computational burden makes it unsuitable for real time processing of signals with time-varying directions of arrival. in this work we develop a new implementation of esprit that has potential for real time processing. it is based on a rank-revealing urv decomposition, rather than the eigendecomposition or singular value decomposition used in previous esprit algorithms. we demonstrate its performance on simulated data representing both constant and time-varying signals. we find that the urv-based esprit algorithm is effective for estimating time-varying directions-of-arrival at considerable computational savings over the svd-based algorithm. y department of computer science and institute for advanced computer studies, university of maryland, college park, md 20742. this work was supported in part by the institute for mathematics and its applications at the university of minnesota, afosr grant 87-0158, and the graduate school general research board of the university of maryland. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_4349",
        "graph": {
            "node_idx": 4349,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                4349,
                4463
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: superlinear convergence of affine-scaling interior-point newton methods for infinite-dimensional nonlinear problems with pointwise boundswe develop and analyze a superlinearly convergent affine-scaling interior-point newton method for infinite-dimensional problems with pointwise bounds in l p -space. the problem formulation is motivated by optimal control problems with l p -controls and pointwise control constraints. the finite-dimensional convergence theory by coleman and li (siam j. optim., 6 (1996), pp. 418-445) makes essential use of the equivalence of norms and the exact identifiability of the active constraints close to an optimizer with strict complementarity. since these features are not available in our infinite-dimensional framework, algorithmic changes are necessary to ensure fast local convergence. the main building block is a newton-like iteration for an affine-scaling formulation of the kkt-condition. we demonstrate in an example that a stepsize rule to obtain an interior iterate may require very small stepsizes even arbitrarily close to a nondegenerate solution. using a pointwise projection instead we prove superlinear convergence under a weak strict complementarity condition and convergence with q-rate &gt;1 under a slightly stronger condition if a smoothing step is available. we discuss how the algorithm can be embedded in the class of globally convergent trust-region interior-point methods recently developed by m. heinkenschloss and the authors. numerical results for the control of a heating process confirm our theoretical findings. 1. introduction. we introduce an affine-scaling interior-point newton method \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_4352",
        "graph": {
            "node_idx": 4352,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                4352,
                1078,
                24,
                303,
                9698,
                17816,
                9088,
                7622,
                8830,
                1075,
                20034,
                2797,
                16087,
                11400,
                3645,
                3488,
                10138,
                3407,
                2993,
                1771,
                24652,
                24936,
                7408,
                3284,
                3283
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: process-oriented planning and average-reward optimalitywe argue that many ai planning problems should be viewed as process-oriented, where the aim is to produce a policy or behavior strategy with no termination condition in mind, as opposed to goal-oriented. the full power of markov decision models, adopted recently for ai planning, becomes apparent with process-oriented problems. the question of appropriate optimality criteria becomes more critical in this case; we argue that average-reward optimality is most suitable. while construction of average-optimal policies involves a number of subtleties and computational difficulties, certain aspects of the problem can be solved using compact action representations such as bayes nets. in particular, we provide an algorithm that identifies the structure of the markov process underlying a planning problem a crucial element of constructing average optimal policies without explicit enumeration of the problem state space. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_4357",
        "graph": {
            "node_idx": 4357,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                4357,
                16942
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: recognizing three-dimensional objects by comparing two-dimensional imagesin this paper we address the problem of recognizing an object from a novel viewpoint, given a single \"model\" view of that object. as is common in model-based recognition, objects and images are represented as sets of feature points. we present an efficient algorithm for determining whether two sets of image points (in the plane) could be projections of a common object (a three-dimensional point set). the method relies on the fact that two sets of points in the plane are orthographic projections of the same three-dimensional point set exactly when they have a common projection onto a line. this is a form of the well-known epipolar constraint used in stereopsis. our algorithm can be used to recognize an object by comparing a stored two-dimensional view of the object against an unknown view, without requiring the correspondence between points in the views to be known a priori. we provide some examples illustrating the approach. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4358",
        "graph": {
            "node_idx": 4358,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                4358,
                16943,
                17410,
                14334
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cache protocols with partial block invalidationsin this paper we introduce hardware cache protocols in which invalidations affect only part of a cached block so that the processor can keep reading the valid part. on a cache miss the entire block is fetched in the cache. the proposed protocols take advantage of the prefetching effects associated with large block sizes while reducing the false sharing miss rate. it does not rely on synchronization as other previous proposals do and therefore it is applicable to systems under any memory consistency model including sequential consistency. simulation results show that protocols with partial block invalidations may provide significant miss rate and memory traffic reductions over protocols with invalidations of entire blocks. the hardware cost is low and the protocol complexity is only marginally increased. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4366",
        "graph": {
            "node_idx": 4366,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    4,
                    19,
                    20,
                    21,
                    22,
                    23
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                4366,
                9709,
                3633,
                10953,
                7159,
                3085,
                997,
                4638,
                10604,
                21048,
                5004,
                3634,
                5006,
                19553,
                10033,
                1217,
                9004,
                10053,
                1701,
                19046,
                21046,
                6744,
                21496,
                10918
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: unsupervised learning of distributions on binary vectors using two layer networkswe present a distribution model for binary vectors, called the influence combination model and show how this model can be used as the basis for unsupervised learning algorithms for feature selection. the model is closely related to the harmonium model defined by smolensky [rm86][ch.6]. in the first part of the paper we analyze properties of this distribution representation scheme. we show that arbitrary distributions of binary vectors can be approximated by the combination model. we show how the weight vectors in the model can be interpreted as high order correlation patterns among the input bits. we compare the combination model with the mixture model and with principle component analysis. in the second part of the paper we present two algorithms for learning the combination model from examples. the first algorithm is based on gradient ascent. here we give a closed form for this gradient that is significantly easier to compute than the corresponding gradient for the general boltzmann machine. the second learning algorithm is a greedy method that creates the hidden units and computes their weights one at a time. this method is a variant of projection pursuit density estimation. in the third part of the paper we give experimental results for these learning methods on synthetic data and on natural data of handwritten digit images. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_4370",
        "graph": {
            "node_idx": 4370,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    11,
                    7,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    4,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    7,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7
                ]
            ],
            "node_list": [
                4370,
                9431,
                8314,
                9381,
                1300,
                3322,
                1681,
                8955,
                18640,
                9254,
                9255,
                10483,
                1202,
                18912,
                17911,
                3901,
                24441,
                5297,
                21421,
                8908,
                1134,
                15347,
                1817,
                288,
                3062,
                17236,
                2846,
                458,
                15749,
                239,
                2657,
                1221,
                9857,
                15884,
                15889,
                12120,
                22650,
                1495,
                15891,
                12124,
                1487
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: analysis of multithreaded architectures for parallel computingmultithreading has been proposed as an architectural strategy for tolerating latency in multiprocessors and, through limited empirical studies, shown to offer promise. this paper develops an analytical model of multithreaded processor behavior based on a small set of architectural and program parameters. the model gives rise to a large markov chain, which is solved to obtain a formula for processor efficiency in terms of the number of threads per processor, the remote reference rate, the latency, and the cost of switching between threads. it is shown that a multithreaded processor exhibits three operating regimes: linear (efficiency is proportional to the number of threads), transition, and saturation (efficiency depends only on the remote reference rate and switch cost). formulae for regime boundaries are derived. the model is embellished to reflect cache degradation due to multithreading, using an analytical model of cache behavior, demonstrating that returns diminish as the number threads becomes large. predictions from the embellished model correlate well with published empirical measurements. prescriptive use of the model under various scenarios indicates that multithreading is effective, but the number of useful threads per processor is fairly small. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4378",
        "graph": {
            "node_idx": 4378,
            "edge_index": [
                [
                    0,
                    1
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                4378,
                18752
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: instance-hiding proof systemswe define the notion of an instance-hiding proof system (ihps) for a function f; informally, an ihps is a protocol in which a polynomial-time verifier interacts with one or more all-powerful provers and is convinced of the value of f(x) but does not reveal the input x to the provers. we show here that a function f has a multiprover ihps if and only if it is computable in fnexp. we formalize the notion of zero-knowledge for ihps's and show that any function that has a multiprover ihps in fact has one that is perfect zero-knowledge. under the assumption that one-way permutations exist, we show that f has a one-prover, zero-knowledge ihps if and only if it is in fpspace and has a one-oracle instance-hiding scheme (ihs). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_4387",
        "graph": {
            "node_idx": 4387,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    6,
                    7,
                    19,
                    20,
                    15,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    1,
                    13,
                    28,
                    15,
                    6,
                    7,
                    8,
                    29,
                    23,
                    29,
                    23,
                    4,
                    4,
                    5,
                    30,
                    7,
                    5,
                    30,
                    6,
                    4,
                    5,
                    30,
                    6,
                    7,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                4387,
                1,
                112,
                4386,
                13802,
                13801,
                13804,
                13807,
                11309,
                2678,
                22675,
                1324,
                1244,
                10154,
                6470,
                13805,
                18062,
                19000,
                8446,
                11310,
                2128,
                2,
                113,
                13800,
                8212,
                8326,
                18854,
                22981,
                1683,
                13803,
                13806,
                16672,
                16671,
                5774,
                10280,
                1713,
                1685,
                20104,
                11427,
                10279,
                5833
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: towards compile-time optimisations for persistencewe consider how a persistent programming language might offer performance competitive with that of non-persistent languages, at least on memory resident data. we are concerned with object-oriented languages, and with implementing persistence via object faulting, where the system detects uses of non-resident objects and fetches them on demand. we present some background on object faulting and means for implementing it, and describe a specific language we are developing, namely persistent modula-3. then we explore approaches to optimising persistence aspects of persistent modula-3, and outline techniques under consideration in our compiler development effort. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_4389",
        "graph": {
            "node_idx": 4389,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    4
                ]
            ],
            "node_list": [
                4389,
                16954,
                19862,
                21238,
                13272
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient simulated annealing on fractal energy landscapes, analysis of finite length annealing schedules,14] t. lengauer, combinatorial algorithms for integrated circuit layout (wiley-teubner, berlin, 1990). [15] m. lundy and a. mees, convergence of an annealing algorithm, math. programming 34 (1986), 111-124. [16] c. sechen and a. sangiovanni-vincentelli, the timberwolf placement and routing package, ieee j. of solid-state \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_4411",
        "graph": {
            "node_idx": 4411,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                4411,
                12643,
                12970,
                8608,
                20964
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: networking support for large scale multiprocessor serversover the next several years the performance demands on globally available information servers are expected to increase dramatically. these servers must be capable of sending and receiving data over hundreds or even thousands of simultaneous connections. in this paper, we show that connection-level parallel protocols (where different connections are processed in parallel) running on a shared-memory multiprocessor can deliver high network bandwidth across a large number of connections. we experimentally evaluate connection-level parallel implementations of both tcp/ip and udp/ip protocol stacks. we focus on three questions in our performance evaluation: how throughput scales with the number of processors, how throughput changes as the number of connections increases, and how fairly the aggregate bandwidth is distributed across connections. we show how several factors impact performance: the number of processors used, the number of threads in the system, the number of connections assigned to each thread, and the type of protocols in the stack (i.e., tcp versus udp). our results show that with careful implementation connection-level parallel protocol stacks scale well with the number of processors, and deliver high throughput which is, for the most part, sustained as the number of connections increases. maximizing the number of threads in the system yields the best overall throughput. however, the best fairness behavior is achieved by matching the number of threads to the number of processors and scheduling connections assigned to threads in a round-robin manner. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_4418",
        "graph": {
            "node_idx": 4418,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                4418,
                3507,
                19025,
                12264,
                22082,
                23894,
                11632,
                17108,
                10204,
                14552,
                22420,
                22863,
                6615,
                5923,
                21949
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using prospero to support integrated location-independent computingas computers become pervasive, users will access processing, storage, and communication resources from locations that have not been practical in the past. such users will demand support for location-independent computing. while the basic system components used might change as the user moves from place to place, the appearance of the system should remain constant. in this paper we discuss the role of, and requirements for, directory services in support of integrated, location-independent computing. we focus on two specific problems: the server selection problem and the user location problem. we present solutions to these problems based on the pros-pero directory service. the solutions demonstrate several unique features of prospero that make it particularly suited for support of location-independent computing. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_4427",
        "graph": {
            "node_idx": 4427,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    8,
                    9,
                    3,
                    4,
                    8,
                    9,
                    11,
                    4,
                    12,
                    8,
                    11,
                    13,
                    8,
                    14,
                    9,
                    15,
                    1,
                    2,
                    12,
                    16,
                    17,
                    1,
                    18,
                    4,
                    5,
                    12,
                    8,
                    19,
                    17,
                    20,
                    21,
                    2,
                    3,
                    4,
                    5,
                    22,
                    23,
                    1,
                    4,
                    17,
                    24,
                    25,
                    23,
                    16,
                    10,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                4427,
                8788,
                8702,
                400,
                401,
                119,
                1192,
                732,
                21242,
                6478,
                4151,
                13178,
                6477,
                8789,
                21244,
                122,
                16507,
                11109,
                10252,
                16646,
                9846,
                398,
                18720,
                118,
                17593,
                4715,
                22836
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the gams callable program library for variational and complementarity solversthe gams modeling language has recently been extended to enable the formulation of mixed complementarity problems (mcp). the gams callable program library (cplib) is a set of fortran subroutines developed as an extension for the gams i/o library and designed to provide a simple and convenient interface to the mcp defined by a gams model. this paper provides technical documentation for cplib for use by those who are developing or have developed algorithms for mcp, in order that their solvers may be made available as gams subsystems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_4433",
        "graph": {
            "node_idx": 4433,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    4,
                    13,
                    14,
                    15,
                    16,
                    17,
                    1,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    4,
                    24,
                    25,
                    26,
                    21,
                    27,
                    20,
                    28,
                    29,
                    17,
                    30,
                    31,
                    32,
                    9,
                    33,
                    21,
                    34,
                    35,
                    9,
                    36,
                    37
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                4433,
                4434,
                11810,
                11041,
                11944,
                4979,
                7293,
                11042,
                20453,
                8059,
                20329,
                4670,
                25030,
                11977,
                20331,
                11040,
                19017,
                20462,
                5967,
                11807,
                6646,
                19855,
                20444,
                20452,
                17059,
                6040,
                7906,
                11808,
                4980,
                11950,
                11978,
                7131,
                18400,
                11298,
                17961,
                5088,
                23037,
                23038
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the troubling aspects of a building block hypothesis for genetic programmingin this paper we carefully formulate a schema theorem for genetic programming (gp) using a schema definition that accounts for the variable length and the non-homologous nature of gp's representation. in a manner similar to early ga research, we use interpretations of our gp schema theorem to obtain a gp building block definition and to state a \"classical\" building block hypothesis (bbh): that gp searches by hierarchically combining building blocks. we report that this approach is not convincing for several reasons: it is difficult to find support for the promotion and combination of building blocks solely by rigourous interpretation of a gp schema theorem; even if there were such support for a bbh, it is empirically questionable whether building blocks always exist because partial solutions of consistently above average fitness and resilience to disruption are not assured; also, a bbh constitutes a narrow and imprecise account of gp search behavior. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_4465",
        "graph": {
            "node_idx": 4465,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    2,
                    14,
                    5,
                    15,
                    6,
                    9,
                    2,
                    4,
                    6,
                    7,
                    16,
                    17,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                4465,
                16971,
                17858,
                18674,
                2409,
                1607,
                22533,
                23244,
                23246,
                23248,
                4888,
                7521,
                17191,
                15547,
                2407,
                4413,
                19571,
                6286
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cooperative mobile robotics: antecedents and directionsthere has been increased research interest in systems composed of multiple autonomous mobile robots exhibiting collective behavior. groups of mobile robots are constructed, with an aim to studying such issues as group architecture, resource conflict, origin of cooperation, learning, and geometric problems. as yet, few applications of collective robotics have been reported, and supporting theory is still in its formative stages. in this paper, we give a critical survey of existing works and discuss open problems in this field, emphasizing the various theoretical issues that arise in the study of cooperative robotics. we describe the intellectual heritages that have guided early research, as well as possible additions to the set of existing motivations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_4475",
        "graph": {
            "node_idx": 4475,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    3
                ]
            ],
            "node_list": [
                4475,
                1846,
                24326,
                9414,
                1768,
                18313,
                24630,
                13602,
                18627
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a software architecture-based human-machine interface for reconfigurable sensor-based control systemsthe development of software for reconfigurable sensor-based real-time systems is a complicated and tedious process, requiring highly specialized skills in real-time systems programming. the total development time can be reduced by automatically integrating reusable software modules to create applications. the integration of these modules can be further simplified by the use of a high-level programming interface. we have developed onika, an iconically programmed human-machine interface, to interact with a reconfigurable software framework to create reusable code. onika presents appropriate work environments for both application engineers and end-users. for engineers, icons representing real-time software modules can be combined to form real-time jobs. for the end-user, icons representing these jobs are assembled by the user into applications. onika verifies that all jobs and applications are syntactically correct, non-ambiguous, and complete. they can then be executed from within onika, or can be saved as a stand-alone program which can be executed independently on the underlying real-time operating system. onika has been fully integrated with the chimera real-time operating system in order to control several different robotic systems in the advanced manipulators laboratory at carnegie mellon university. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_4481",
        "graph": {
            "node_idx": 4481,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    4,
                    4,
                    5
                ]
            ],
            "node_list": [
                4481,
                4483,
                18625,
                18802,
                7979,
                11141,
                19980,
                9411,
                19374
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: characterizing and assessing a large-scale software maintenance organization*one important component of a software process is the organizational context in which the process is enacted. this component is often missing or incomplete in current process modeling approaches. one technique for modeling this perspective is the actor-dependency (ad) model. this paper reports on a case study which used this approach to analyze and assess a large software maintenance organization. our goal was to identify the approach's strengths and weaknesses while providing practical recommendations for improvement and research directions. the ad model was found to be very useful in capturing the important properties of the organizational context of the maintenance process, and aided in the understanding of the flaws found in this process. however, a number of opportunities for extending and improving the ad model were identified. among others, there is a need to incorporate quantitative information to complement the qualitative model. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_4514",
        "graph": {
            "node_idx": 4514,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                4514
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: within the letter of the law: open-textured planningmost case-based reasoning systems have used a single \"best\" or \"most similar\" case as the basis for a solution. for many problems, however, there is no single exact solution. rather, there is a range of acceptable answers. we use cases not only as a basis for a solution, but also to indicate the boundaries within which a solution can be found. we solve problems by choosing some point within those boundaries. in this paper, i discuss this use of cases with illustrations from chiron, a system i have implemented in the domain of personal income tax planning. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_4571",
        "graph": {
            "node_idx": 4571,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    1,
                    14,
                    15,
                    16,
                    10,
                    17,
                    18,
                    19,
                    5,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    4,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                4571,
                9179,
                4527,
                5133,
                9801,
                1112,
                21584,
                22161,
                1810,
                22555,
                8323,
                6310,
                18510,
                18608,
                17300,
                17811,
                18263,
                9802,
                12230,
                21395,
                1879,
                21487,
                2089,
                3074,
                3480,
                13344,
                9384,
                8329,
                18434,
                7751,
                19685,
                13375,
                5002,
                13352,
                16567,
                1794,
                20147
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: rasta-plp speech analysismost speech parameter estimation techniques are easily influenced by the frequency response of the communication channel. we have developed a technique that is more robust to such steady-state spectral factors in speech. the approach is conceptually simple and computationally efficient. the new method is described, and experimental results are reported, showing a significant advantage for the proposed method. fl us west advanced technologies, 4001 discovery drive, boulder, co 80303 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_4573",
        "graph": {
            "node_idx": 4573,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                4573,
                16992,
                18201,
                4575,
                18060,
                19036,
                24804,
                19697
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: world wide web image search engineswe propose the development of a world wide web image search engine that crawls the web collecting information about the images it finds, computes the appropriate image decompositions and indices, and stores this extracted information for searches based on image content. indexing and searching images need not require solving the image understanding problem. instead, the general approach should be to provide an arsenal of image decompositions and discrim-inants that can be precomputed for images. at search time, users can select a weighted subset of these decompositions to be used for computing image similarity measurements. while this approach avoids the search-time-dependent problem of labeling what is important in images, it still holds several important problems that require further research in the area of query by image content. we briefly explore some of these problems as they pertain to shape. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4574",
        "graph": {
            "node_idx": 4574,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                4574,
                16992
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: modeling user subjectivity in image librariesm.i.t media laboratory perceptual computing section technical report no. 382 also appearing: ieee int. conf. on image proc., lausanne, sep. 1996. abstract in addition to the problem of which image analysis models to use in digital libraries, e.g. wavelet, wold, color histograms, is the problem of how to combine these models with their different strengths. most present systems place the burden of combination on the user, e.g. the user specifies 50% texture features, 20% color features, etc. this is a problem since most users do not know how to best pick the settings for the given data and search problem. this paper addresses this problem, describing research in progress for a system that (1) automatically infers which combination of models best represents the data of interest to the user and (2) learns continuously during interaction with each user. in particular, these two components inference and learning provide a solution that adapts to the subjective and hard-to-predict behaviors frequently seen when people query or browse image libraries. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4586",
        "graph": {
            "node_idx": 4586,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    5,
                    1,
                    2,
                    3,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3
                ]
            ],
            "node_list": [
                4586,
                4589,
                19178,
                4590,
                9726,
                18566
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a note on learning from multiple-instance exampleswe describe a simple reduction from the problem of pac-learning from multiple-instance examples to that of pac-learning with one-sided random classification noise. thus, all concept classes learnable with one-sided noise, which includes all concepts learnable in the usual 2-sided random noise model plus others such as the parity function, are learnable from multiple-instance examples. we also describe a more efficient (and somewhat technically more involved) reduction to the statistical-query model that results in a polynomial-time algorithm for learning axis-parallel rectangles with sample complexity ~ o(d 2 r=* 2 ), saving roughly a factor of r over the results of auer et al. (1997). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_4589",
        "graph": {
            "node_idx": 4589,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    5,
                    0,
                    4,
                    5,
                    6,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    5
                ]
            ],
            "node_list": [
                4589,
                4586,
                9726,
                18566,
                19178,
                4590,
                8017
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: pac learning axis-aligned rectangles with respect to product distributions from multiple-instance exampleswe describe a polynomial-time algorithm for learning axis-aligned rectangles in q d with respect to product distributions from multiple-instance examples in the pac model. here, each example consists of n elements of q d together with a label indicating whether any of the n points is in the rectangle to be learned. we assume that there is an unknown product distribution d over q d such that all instances are independently drawn according to d. the accuracy of a hypothesis is measured by the probability that it would incorrectly predict whether one of n more points drawn from d was in the rectangle to be learned. our algorithm achieves accuracy * with probability 1 ffi in \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_4590",
        "graph": {
            "node_idx": 4590,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                4590,
                19178
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiple-instance learning for natural scene classificationmultiple-instance learning is a way of modeling ambiguity in supervised learning examples. each example is a bag of instances, but only the bag is labeled not the individual instances. a bag is labeled negative if all the instances are negative, and positive if at least one of the instances in positive. we apply the multiple-instance learning framework to the problem of learning how to classify natural images. images are inherently ambiguous since they can represent many different things. a user labels an image as positive if the image somehow contains the concept. each image is a bag, and the instances are various sub-regions in the image. from a small collection of positive and negative examples, we can learn the concept and then use it to retrieve images that contain the concept from a large database. we show that the diverse density algorithm performs well in this task, that simple hypothesis classes are sufficient to classify natural images, and that user interaction helps to improve perfor mance. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4594",
        "graph": {
            "node_idx": 4594,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2,
                    2,
                    4,
                    3,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                4594,
                7726,
                1657,
                19559,
                1658,
                24565,
                20216,
                13331,
                14056,
                21997,
                15415,
                23823
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: minimization on the lie group so(3) and related manifoldstechnical report no. 9405 april, 1994 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4596",
        "graph": {
            "node_idx": 4596,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    4,
                    10,
                    6,
                    7,
                    8,
                    4,
                    6,
                    5,
                    11,
                    7,
                    3,
                    6,
                    7,
                    4,
                    6,
                    11,
                    7,
                    8,
                    12,
                    4,
                    10,
                    7,
                    8,
                    4,
                    10,
                    6,
                    7,
                    8,
                    4,
                    10,
                    6,
                    7,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9
                ]
            ],
            "node_list": [
                4596,
                7628,
                7630,
                7394,
                9101,
                7629,
                7626,
                7627,
                7625,
                3922,
                9102,
                7631,
                15420,
                4185,
                16899
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: linear subspace methods for recovering translational directionthe image motion field for an observer moving through a static environment depends on the observer's translational and rotational velocities along with the distances to surface points. given such a motion field as input we have recently introduced sub-space methods for the recovery of the observer's motion and the depth structure of the scene. this class of methods involve splitting the equations describing the motion field into separate equations for the observer's translational direction, the rotational velocity, and the relative depths. the resulting equations can then be solved successively, beginning with the equations for the translational direction. here we concentrate on this first step. in earlier work, a linear method was shown to provide a biased estimate of the translational direction. we discuss the source of this bias and show how it can be effectively removed. the consequence is that the observer's velocity and the relative depths to points in the scene can all be recovered by successively solving three linear problems. this paper is the university of toronto, department of computer science, technical report: rbcv-tr-92-40, april 1992. correspondence should be sent to a. jepson, department of com puter science, university of toronto, 6 kings college road, toronto, ontario m5s 1a4. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4607",
        "graph": {
            "node_idx": 4607,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2,
                    7,
                    8,
                    6,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    1,
                    8,
                    15,
                    2,
                    16,
                    17,
                    8,
                    0,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                4607,
                5757,
                4608,
                733,
                19765,
                7632,
                11852,
                13998,
                11552,
                1140,
                5758,
                9575,
                9576,
                20356,
                9574,
                1138,
                18200,
                1137
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: intelligent automated quality control for computational simulationcomputational simulation of physical systems generally requires human experts to set up a simulation, run it, evaluate the quality of the simulation output, and repeatedly invoke the simulator with modified input until a satisfactory output quality is achieved. this reliance on human experts makes use of simulators by other programs difficult and unreliable, though invocation of simulators by other programs is critical for important tasks such as automated engineering design optimization. i present a framework for constructing intelligent controllers for computational simulators which can automatically detect a wide variety of problems which lead to low-quality simulation output, using a set of evaluation methods based on knowledge of physics and numerical analysis stored in a data/knowledge base of models and simulations. i describe an experimental implementation of this framework in an intelligent automated controller for a widely used computational fluid dynamics simulator. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_4609",
        "graph": {
            "node_idx": 4609,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    1,
                    5,
                    2,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                4609,
                5757,
                4608,
                7349,
                13998,
                11552,
                11852,
                1140,
                5758,
                9575,
                9576,
                20356,
                9574,
                18520,
                1137
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning prototype-selection rules for case-based iterative design seen as a case-based reasoning system [4], inthe first step for most case-based design systems is to select an initial prototype from a database of previous designs. the retrieved prototype is then modified to tailor it to the given goals. for any particular design goal the selection of a starting point for the design process can have a dramatic effect both on the quality of the eventual design and on the overall design time. we present a technique for automatically constructing effective prototype-selection rules. our technique applies a standard inductive-learning algorithm, c4.5, to a set of training data describing which particular prototype would have been the best choice for each goal encountered in a previous design session. we have tested our technique in the domain of racing-yacht-hull design, comparing our inductively learned selection rules to several competing prototype-selection methods. our results show that the inductive prototype-selection method leads to better final designs when the design process is guided by a noisy evaluation function, and that the inductively learned rules will often be more efficient than competing methods. many automated design systems begin by retrieving an initial prototype from a library of previous designs, using the given design goal as an index to guide the retrieval process [14]. the retrieved prototype is then modified by a set of design modification operators to tailor the selected design to the given goals. in many cases the quality of competing designs can be assessed using domain-specific evaluation functions, and in such cases the design-modification process is often this research has benefited from numerous discussions with members of the rutgers cap project. we thank andrew gelsey for helping with the cross-validation code, john keane for helping with ruvpp, and andrew gelsey and tim weinrich for comments on a previous draft of this paper. this research was supported under arpa-funded nasa grant nag 2-645. in the context of such case-based design systems, the choice of an initial prototype can affect both the quality of the final design and the computational cost of obtaining that design, for three reasons. first, prototype selection may impact quality when the prototypes lie in disjoint search spaces. in particular, if the system's design modification operators cannot convert any prototype into any other prototype, the choice of initial prototype will restrict the set of possible designs that can be obtained by any search process. a poor choice of initial prototype may therefore lead to a suboptimal final design. second, prototype selection may impact quality when the design process is guided by a nonlinear evaluation function with unknown global properties. since there is no known method that is guaranteed to find the global optimum of an arbitrary nonlinear function [7], most design systems rely on iterative local search methods whose results are sensitive to the initial starting point. finally, the choice of prototype may have an impact on the time needed to carry out the design modification process|two different starting points may yield the same final design but take very different amounts of time to get there. in design problems where evaluating even just a single design can take tremendous amounts of time, selecting an appropriate initial prototype can be the determining factor in the success or failure of the design process. this paper describes the application of inductive learning [11] to form rules for selecting appropriate prototype designs. the paper is structured as follows. in section 2, we describe our inductive method for learning prototype-selection rules. in section 3 we describe the domain of racing-yacht-hull design, in which we tested our prototype-selection methods. in sections 4 and 5, we describe the experiments \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_4619",
        "graph": {
            "node_idx": 4619,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    1,
                    0,
                    4,
                    2,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                4619,
                9161,
                4618,
                16287,
                18455,
                16173,
                3254
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: shooting craps in search of an optimal strategy for training connectionist pattern classifierswe compare two strategies for training connectionist (as well as non-connectionist) models for statistical pattern recognition. the probabilistic strategy is based on the notion that bayesian discrimination (i.e., optimal classification) is achieved when the classifier learns the a posteriori class distributions of the random feature vector. the differential strategy is based on the notion that the identity of the largest class a posteriori probability of the feature vector is all that is needed to achieve bayesian discrimination. each strategy is directly linked to a family of objective functions that can be used in the supervised training procedure. we prove that the probabilistic strategy linked with error measure objective functions such as mean-squared-error and cross-entropy typically used to train classifiers necessarily requires larger training sets and more complex classifier architectures than those needed to approximate the bayesian discriminant function. in contrast, we prove that the differential strategy linked with classification figure-of-merit objective functions (cfm mono ) [3] requires the minimum classifier functional complexity and the fewest training examples necessary to approximate the bayesian discriminant function with specified precision (measured in probability of error). we present our proofs in the context of a game of chance in which an unfair c-sided die is tossed repeatedly. we show that this rigged game of dice is a paradigm at the root of all statistical pattern recognition tasks, and demonstrate how a simple extension of the concept leads us to a general information-theoretic model of sample complexity for statistical pattern recognition. fl copyright c fl1992 by j. b. hampshire ii and b. v. k. v. kumar: all rights reserved. this research was funded by the air force office of scientific research (grant afosr-89-0551). the views and conclusions contained in this paper are the authors' and should not be interpreted as representing the official policies, either expressed or implied, of the u.s. air force or the u.s. government. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_4623",
        "graph": {
            "node_idx": 4623,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                4623
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: sensing polygon poses by inscriptionindustrial assembly involves sensing the pose (orientation and position) of a part. efficient and reliable sensing strategies can be developed for an assembly task if the shape of the part is known in advance. in this paper we investigate the problem of determining the pose of a convex n-gon from a set of m supporting cones, i.e., cones with both sides supporting the polygon. an algorithm with running time o(nm) which almost always reduces to o(n + m log n) is presented to solve for all possible poses of the polygon. as a consequence, the polygon inscription problem of finding all possible poses for a convex n-gon inscribed in another convex m-gon, can be solved within the same asymptotic time bound. we prove that the number of possible poses cannot exceed 6n, given m 2 supporting cones with distinct vertices. experiments demonstrate that two supporting cones are sufficient to determine the real pose of the n-gon in most cases. our results imply that sensing in practice can be carried out by obtaining viewing angles of a planar part at multiple exterior sites in the plane. as a conclusion, we generalize this and other sensing methods into a scheme named sensing by inscription. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_4633",
        "graph": {
            "node_idx": 4633,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    8,
                    1,
                    9,
                    5,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    7
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                4633,
                4273,
                3393,
                704,
                1056,
                24408,
                14761,
                20234,
                23068,
                24183,
                4634,
                18086,
                18813,
                24656,
                4796,
                5304
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: effectiveness of data dependence analysis parallelizing loops written in imperative languages requires the compiler todata dependence testing is the basic step in detecting loop level parallelism in numerical programs. the problem is undecidable in the general case. therefore, work has been concentrated on a simplified problem, affine memory disambiguation. in this simpler domain, array references and loops bounds are assumed to be linear integer functions of loop variables. dataflow information is ignored. for this domain, we have shown that in practice the problem can be solved accurately and efficiently[9]. this paper studies empirically the effectiveness of this domain restriction, how many real references are affine and flow insensitive. we use larus's llpp system[5] to find all the data dependences dynamically. we compare these to the results given by our affine memory disambiguation system. this system is exact for all the cases we see in practice. we show that while the affine approximation is reasonable, memory disambiguation is not a sufficient approximation for data dependence analysis. we propose extensions to improve the analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_4638",
        "graph": {
            "node_idx": 4638,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                4638,
                16997,
                15422,
                23501
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an introduction to variational methods for graphical modelsthis paper presents a tutorial introduction to the use of variational methods for inference and learning in graphical models. we present a number of examples of graphical models, including the qmr-dt database, the sigmoid belief network, the boltzmann machine, and several variants of hidden markov models, in which it is infeasible to run exact inference algorithms. we then introduce variational methods, showing how upper and lower bounds can be found for local probabilities, and discussing methods for extending these bounds to bounds on global probabilities of interest. finally we return to the examples and demonstrate how variational algorithms can be formulated in each case. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_4640",
        "graph": {
            "node_idx": 4640,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    2,
                    10,
                    11,
                    12,
                    1,
                    6,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                4640,
                3173,
                1897,
                3266,
                18999,
                1890,
                3175,
                3932,
                14014,
                18645,
                22903,
                24148,
                18944,
                20218,
                24336,
                1783,
                22969,
                12598,
                3263
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reductions, codes, pcps, and inapproximabilitymany recent results show the hardness of approximating np-hard functions. we formalize, in a very simple way, what these results involve: a code-like levin reduction. assuming a well-known complexity assumption, we show that such reductions cannot prove the np-hardness of the following problems, where * is any positive fraction: (i) achieving an approximation ra tio n 1=2+* for clique, (ii) achieving an approximation ratio 1:5 + * for vertex cover, and (iii) coloring a 3-colorable graph with o(log n) colors. in fact, we explain why current reductions cannot prove the np-hardness of coloring 3-colorable graphs with 9 colors. our formalization of a code-like reduction, together with our justification of why such reductions are natural, also clarifies why current proofs of inapproxima-bility results use error-correcting codes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_4649",
        "graph": {
            "node_idx": 4649,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                4649,
                10411,
                5130
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: explaining anomalies as a basis for knowledge base refinementexplanations play a key role in operationalization-based anomaly detection techniques. in this paper we show that their role is not limited to anomaly detection; they can also be used for guiding automated knowledge base refinement. we introduce a refinement procedure which takes: (i) a small number of refinement rules (rather than test cases), and (ii) explanations constructed in an attempt to reveal the cause (or causes) for inconsistencies detected during the verification process, and returns rule revisions aiming to recover the consistency of the kb-theory. inconsistencies caused by more than one anomaly are handled at the same time, which improves the efficiency of the refinement process. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_4658",
        "graph": {
            "node_idx": 4658,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                4658,
                1803,
                7844,
                10320,
                19226,
                19470,
                1801,
                14857
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: numesh: an architecture optimized for scheduled communicationthe numesh system defines a high-speed communication substrate optimized for off-line routing. by determining possible communication paths at compile time, highly efficient hardware and software constructs can be exploited to yield superior network performance. these communication paths can be independently tuned to allow more utilized paths greater bandwidth. although communication paths are scheduled, data need not be sent during every scheduled cycle. flow control protocols allow for empty communication cycles as well as for data being backed up in the network. limited gate delays between numesh registers, as well as single cycle message transfers, allow for a high clock frequency and low network latency. a highly pipelined architecture for this communication is presented and a mechanism for efficient ow controlled communication is discussed. a unique communication protocol is presented and shown to provide single cycle transfers between nodes. an overview of the necessary compiler support is also provided. preliminary results and a description of the current hardware and software status are listed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4665",
        "graph": {
            "node_idx": 4665,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                4665,
                17003,
                15808,
                20166,
                15828,
                23516
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: saliency maps and attention selection in scale and spatial coordinates: an information theoretic approachinformation measures with respect to spatial locations and scales of objects in an image are important to image processing and interpretation. it allows us to focus attention on relevant data, saving effort and reducing false positives. in particular, the information content of a man-made scene is typically confined to a small set of scales. we devise a scale space based measure of image information. kullback contrasts between successive resolution lengths gives the differential information gain. experiments show that this measure gives a clear indication of characteristic lengths in a variety of real world images and is superior to power spectrum based measurements. decomposing the expected information gain into spatial coordinates gives us a saliency map for use by an attention selector. last we combine the scale and spatial decompositions into a single information measure, giving both the spatial extent and scale range of interest. the information measure has an efficient implementation, and thus can be used routinely in early vision processing. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4670",
        "graph": {
            "node_idx": 4670,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    0,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    7,
                    18,
                    19,
                    20,
                    6,
                    21,
                    22,
                    7,
                    23,
                    24,
                    25,
                    26,
                    5,
                    12,
                    27,
                    28,
                    29,
                    30,
                    31,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                4670,
                17003,
                6040,
                4434,
                9595,
                20456,
                11944,
                8059,
                5967,
                4981,
                6041,
                19017,
                4803,
                11807,
                20331,
                11950,
                11040,
                20462,
                11977,
                20444,
                20452,
                17961,
                5088,
                23037,
                23038,
                11968,
                11967,
                11951,
                7293,
                11970,
                20458,
                11971
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: genetic programming exploratory power and the discovery of functionshierarchical genetic programming (hgp) approaches rely on the discovery, modification, and use of new functions to accelerate evolution. this paper provides a qualitative explanation of the improved behavior of hgp, based on an analysis of the evolution process from the dual perspective of diversity and causality. from a static point of view, the use of an hgp approach enables the manipulation of a population of higher diversity programs. higher diversity increases the exploratory ability of the genetic search process, as demonstrated by theoretical and experimental fitness distributions and expanded structural complexity of individuals. from a dynamic point of view, an analysis of the causality of the crossover operator suggests that hgp discovers and exploits useful structures in a bottom-up, hierarchical manner. diversity and causality are complementary, affecting exploration and exploitation in genetic search. unlike other machine learning techniques that need extra machinery to control the tradeoff between them, hgp automatically trades off exploration and exploitation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_4693",
        "graph": {
            "node_idx": 4693,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                4693,
                10620,
                4691
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: data locality and load balancing for parallel neural network learningcompilers for neural network learning algorithms can achieve near-optimal co-locality of data and processes and near-optimal balancing of load over processors for irregular problems. this is impossible for general programs, but restricting programs to that particular problem domain allows for the exploitation of domain-specific properties: the operations performed by neural algorithms are broadcasts, reductions, and object-local operations only; the load distribution is regular with respect to the (perhaps irregular) network topology; changes of network topology occur only from time to time. compilation techniques and a compiler implementation for the maspar mp-1 is described and quantitative results for the effects of various optimizations used in the compiler are given. experiments with weight pruning algorithms yielded speedups of 28% due to load balancing, and of 195% due to data locality. two other optimizations, connection allocation and selecting the number of replicates, speed programs up by about 50% or 100%, respectively. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_4700",
        "graph": {
            "node_idx": 4700,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                4700,
                815,
                288,
                24658,
                3323,
                12626,
                22472,
                23243,
                1297,
                24189,
                18622,
                553,
                812,
                461,
                8785,
                24167,
                24569,
                1489,
                3985,
                2628,
                24301,
                711,
                1487,
                8182,
                15301,
                10381,
                25062,
                24003,
                3324,
                4405,
                1681,
                24745,
                2676
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast-cache: a new abstraction for memory system simulationtrace-driven simulation has long been the dominate technique for evaluating memory system performance. however, the reference trace abstraction, upon which it is based, does not exploit the full potential of on-the-fly simulation systems, which tightly couple reference generation and simulation. in particular, an on-the-fly trace-driven system must simulate each reference even when the common case, e.g., a cache hit, requires no action. we have developed a new memory system simulation method that optimizes this common case, significantly reducing simulation time. fast-cache tightly integrates reference generation and simulation by providing the abstraction of tagged memory blocks: each reference invokes a user-specified function depending upon the reference type and memory block state. the simulator controls how references are processed by manipulating memory block states, specifying a special null function for no action cases. fast-cache implements this abstraction by using binary-rewriting to perform a table lookup before each memory reference. on a sparcstation 10, fast-cache simulation times are two to three times faster than a conventional trace-driven simulator that calls a procedure on each memory reference; simulation times are only three to six times slower than the original, un-instrumented program. fast-cache also outperforms specialized hardware, the error correcting code (ecc) bits on a thinking machines cm-5, for all but one of our experiments. fast-cache slowdowns range from 3.1 to 6.7, whereas ecc slowdowns range from 1.3 to 46. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_4780",
        "graph": {
            "node_idx": 4780,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                4780,
                17019,
                4781,
                4782
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: failure recognition and fault tolerance of an autonomous robotfl support for this research was provided in part by a nasa graduate student researcher program fellowship administered through the jet propulsion laboratory, by jet propulsion laboratory grant 959333, and by the advanced research projects agency under office of naval research contract n00014-91-j-4038. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_4833",
        "graph": {
            "node_idx": 4833,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                4833,
                4831,
                4832
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: angie: a new framework for speech analysis based on morpho-phonological modelling 1this paper describes a new system for speech analysis, angie, which characterizes word substructure in terms of a trainable grammar. angie capture morpho-phonemic and phonological phenomena through a hierarchical framework. the terminal categories can be alternately letters or phone units, yielding a reversible letter-to-sound/sound-to-letter system. in conjunction with a segment network and acoustic phone models, the system can produce phonemic-to-phonetic alignments for speech waveforms. for speech recognition, angie uses a one-pass bottom-up best-first search strategy. evaluated in the atis domain, angie achieveda phone error rate of 36%, as compared with 40% achieved with a baseline phone-bigram based recognizer under similar conditions. angie potentially offers many attractive features, including dynamic vocabulary adaptation, as well as a framework for handling unknown words. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_4835",
        "graph": {
            "node_idx": 4835,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                4835,
                2595,
                4385,
                22756,
                6171,
                17016,
                8985,
                6170,
                18626,
                16953,
                24599,
                24771,
                20120,
                25007,
                20845
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: co. studies in the sciences of complexity. (1972), iterative methods for nonlinear optimization problems, (1986)14] s.e. fahlman (1988), an empirical study of learning speed in back propagation networks, technical report, cmu-cs-88-162. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_4842",
        "graph": {
            "node_idx": 4842,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    3
                ]
            ],
            "node_list": [
                4842,
                10000,
                2857,
                8220,
                10513,
                10512,
                8426,
                18027
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: practical aspects of set based analysis summarythe set based approach to compile time analysis of logic programs has numerous advantages over other approaches, including a simple, intuitive definition, and a very accurate and uniform treatment of term structure. however the algorithms for set based analysis that have been presented to date have focussed on establishing decidability results, and do not provide a practical basis for program analysis. this paper demonstrates that very substantial progress can be made towards a practical system by redesigning the algorithms according to implementation criteria, designing appropriate representations techniques, and exploiting the redundancy which is typically present. an implementation is described and experimental evidence is presented which suggests that set based analysis can be made practical for comprehensive and accurate analysis of logic programs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_4857",
        "graph": {
            "node_idx": 4857,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                4857,
                17036
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning from the schema learning systema major problem that confronts developers of knowledge-based vision systems is how the information in the knowledge base (both object-specific knowledge and the control strategies for applying the knowledge) is acquired. hand construction of knowledge bases is an onerous, time-consuming and errorful process, and is inadequate for systems requiring more than a few object models, especially if the domain within which the system operates changes. over the past four years we have addressed this problem by developing the schema learning system (sls) to learn strategies for applying object-specific knowledge in complex domains. the goal is build a system that can learn (under supervision) to recognize a new object or object class without any direct human intervention. this paper will not describe sls in any detail; that has been done elsewhere. (see draper et al. [9] for a preliminary presentation, or draper [10] for a more recent and complete description). instead, this paper summarizes some of our conclusions from four years of machine learning and computer vision research, emphasizing our representation of recognition strategies, our syntactic approach to integrating visual modules, and the implications of sls for goal-directed, as opposed to recon-structionist, theories of vision. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_4879",
        "graph": {
            "node_idx": 4879,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    4,
                    3,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                4879,
                15322,
                17085,
                9184,
                6508,
                15323,
                7051,
                1980
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improved noise-tolerant learning and generalized statistical queriesthe statistical query learning model can be viewed as a tool for creating (or demonstrating the existence of) noise-tolerant learning algorithms in the pac model. the complexity of a statistical query algorithm, in conjunction with the complexity of simulating sq algorithms in the pac model with noise, determine the complexity of the noise-tolerant pac algorithms produced. although roughly optimal upper bounds have been shown for the complexity of statistical query learning, the corresponding noise-tolerant pac algorithms are not optimal due to inefficient simulations. in this paper we provide both improved simulations and a new variant of the statistical query model in order to overcome these inefficiencies. we improve the time complexity of the classification noise simulation of statistical query algorithms. our new simulation has a roughly optimal dependence on the noise rate. we also derive a simpler proof that statistical queries can be simulated in the presence of classification noise. this proof makes fewer assumptions on the queries themselves and therefore allows one to simulate more general types of queries. we also define a new variant of the statistical query model based on relative error, and we show that this variant is more natural and strictly more powerful than the standard additive error model. we demonstrate efficient pac simulations for algorithms in this new model and give general upper bounds on both learning with relative error statistical queries and pac simulation. we show that any statistical query algorithm can be simulated in the pac model with malicious errors in such a way that the resultant pac algorithm has a roughly optimal tolerable malicious error rate and sample complexity. finally, we generalize the types of queries allowed in the statistical query model. we discuss the advantages of allowing these generalized queries and show that our results on improved simulations also hold for these queries. this paper is available from the center for research in computing technology, division of applied sciences, harvard university as technical report tr-17-94. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_4901",
        "graph": {
            "node_idx": 4901,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    2,
                    4,
                    5,
                    2,
                    6,
                    4,
                    7,
                    3,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                4901,
                9076,
                9077,
                8918,
                14827,
                21811,
                11047,
                18317,
                19150,
                22936,
                22942,
                15191,
                22946
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: distributed pipeline scheduling: end-to-end analysis of heterogeneous, multi-resource real-time systemsthis research was supported in part by a grant from the office of naval research, in part by a grant from the naval research and development laboratory, and in part by a grant from siemens corporate research. in 15th ieee international conference on distributed computing systems, may 1995. abstract this paper presents an hierarchical end-to-end analysis technique that decomposes the very complex heterogeneous multi-resource scheduling problem into a set of single resource scheduling problems with well defined interactions. we define heterogeneity both in resource types, e.g., cpu, and in scheduling policies, e.g., rate-monotonic scheduling. this analysis technique is one phase of our systems integration framework for designing large-scale, heterogeneous, distributed real-time systems whose timing properties can be strictly controlled and analyzed. this approach, denoted the distributed pipelining framework, exploits the natural pipelining execution pattern found in a large number of continuous (periodic) applications executing over heterogenous resources. a teleconference application is used in this paper to show the utility of the approach. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_4940",
        "graph": {
            "node_idx": 4940,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                4940,
                17051
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: minimizing statistical bias with queriesi describe a querying criterion that attempts to minimize the error of a learner by minimizing its estimated squared bias. i describe experiments with locally-weighted regression on two simple problems, and observe that this \"bias-only\" approach outperforms the more common \"variance-only\" exploration approach, even in the presence of noise. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_4962",
        "graph": {
            "node_idx": 4962,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    5,
                    9,
                    2,
                    0,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4
                ]
            ],
            "node_list": [
                4962,
                17056,
                2799,
                5603,
                4910,
                19199,
                16685,
                18606,
                19198,
                1390,
                5601
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multi-garnet: integrating multi-way constraints with garnet on compiling and loading multi-garnet, as well as documentationtechnical report 92-07-01 dept. of computer science and engineering university of washington september 1992 abstract constraints provide a useful mechanism for maintaining relations in user interface toolkits. garnet is a widely-used user interface toolkit with considerable functionality, based on one-way, required constraints. multi-garnet extends garnet by adding support for multi-way constraints and constraint hierarchies with both required and preferential constraints. this document contains three chapters describing multi-garnet: * chapter 1 presents a high-level overview of multi-garnet. to motivate the development of multi-garnet, we examine the garnet constraint system, present some realistic user interface problems that are difficult to handle in garnet, and demonstrate how multi-garnet addresses these problems. we provide details on how multi-garnet supports some of the features of garnet, including constraints with pointer variables, and inheritance of constraints. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_4963",
        "graph": {
            "node_idx": 4963,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    0,
                    5,
                    6,
                    2,
                    3,
                    0,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                4963,
                4964,
                10625,
                1761,
                8405,
                19472,
                21527
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experiments on dextrous manipulation without prior object models 1in this paper we present a kinematic method for 6-degree-of-freedom manipulation of rigid objects using a dextrous robotic hand. our method does not require prior models of the objects to be manipulated; all the information needed can be obtained directly from the hand's sensors. the method allows arbitrary (within the robot's physical limits) translations and rotations of the object, and its low computational cost makes real-time performance easy to achieve. we present experimental results of manipulation using the utah/mit hand [1, 2], a 16-dof dextrous manipulator, and show that with the addition of a cartesian controller a high degree of accuracy can be attained. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_4967",
        "graph": {
            "node_idx": 4967,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    5,
                    11,
                    12,
                    4,
                    7,
                    13,
                    14,
                    4,
                    6,
                    4,
                    6,
                    4,
                    7,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                4967,
                22081,
                19887,
                14642,
                22951,
                3411,
                14148,
                13506,
                15205,
                14147,
                15591,
                7418,
                5180,
                22434,
                15687,
                23278
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: converse an interoperable framework for parallel programmingmany different parallel languages and paradigms have been developed, each with its own advantages. to benefit from all of them, it should be possible to link together modules written in different parallel languages in a single application. since the paradigms sometimes differ in fundamental ways, this is difficult to accomplish. this paper describes a framework, converse, that supports such multi-lingual interoperability. the framework is meant to be inclusive, and has been verified to support the spmd programming style, message-driven programming, parallel object-oriented programming, and thread-based paradigms. the framework aims at extracting the essential aspects of the runtime support into a set of core components, so that language-specific code does not have to pay overhead for features that it does not need. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_4977",
        "graph": {
            "node_idx": 4977,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                4977,
                17058
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: analysis and design of the rhodos performance profiling software documents the eccentricities of the newas rhodos is maturing, it is becoming increasingly important to have available a high resolution timer that can be used to evaluate differing policies as they are implemented. rhodos currently operates on a sun 3/50, of which little hardware information is officially known due to sun microsystems non-disclosure agreements. a third party high resolution timer has been used to provide a timing ability not present with the standard hardware. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_4981",
        "graph": {
            "node_idx": 4981,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    3,
                    4,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    11,
                    15,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                4981,
                17059,
                11040,
                11808,
                4980,
                11971,
                19855,
                20331,
                11968,
                4979,
                7293,
                11970,
                20458,
                20462,
                20464,
                25049
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: analysis of complexity drift in genetic programmingone serious problem of standard genetic programming (gp) is that evolved structures appear to drift towards large and slow forms on average. this paper presents a novel analysis of the role played by variable complexity in the selection and survival of gp expressions. it defines a particular property of gp representations, called rooted tree-schema, that sheds light on the role of variable complexity of evolved structures. a rooted tree-schema is a relation on the space of tree-shaped structures which provides a quantifiable partitioning of the search space. the paper analyzes the influence of parsimony pressure on selection and growth of structures. experimental ev idence confirms theoretical predictions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_4991",
        "graph": {
            "node_idx": 4991,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    9,
                    3,
                    10,
                    11,
                    12,
                    7,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                4991,
                17064,
                17658,
                19041,
                24733,
                16489,
                5725,
                20281,
                5724,
                6261,
                19425,
                19479,
                9394,
                14355
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automated decomposition of model-based learning problemsa new generation of sensor rich, massively distributed autonomous systems is being developed that has the potential for unprecedented performance, such as smart buildings, reconfigurable factories, adaptive traffic systems and remote earth ecosystem monitoring. to achieve high performance these massive systems will need to accurately model themselves and their environment from sensor information. accomplishing this on a grand scale requires automating the art of large-scale modeling. this paper presents a formalization of decompositional, model-based learning (dml), a method developed by observing a modeler's expertise at decomposing large scale model estimation tasks. the method exploits a striking analogy between learning and consistency-based diagnosis. moriarty, an implementation of dml, has been applied to thermal modeling of a smart building, demonstrating a significant improvement in learning rate. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_5004",
        "graph": {
            "node_idx": 5004,
            "edge_index": [
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                5004,
                3634,
                5005
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning generative models with the up-propagation algorithmup-propagation is an algorithm for inverting and learning neural network generative models. sensory input is processed by inverting a model that generates patterns from hidden variables using top-down connections. the inversion process is iterative, utilizing a negative feedback loop that depends on an error signal propagated by bottom-up connections. the error signal is also used to learn the generative model from examples. the algorithm is benchmarked against principal component analysis in in his doctrine of unconscious inference, helmholtz argued that perceptions are formed by the interaction of bottom-up sensory data with top-down expectations. according to one interpretation of this doctrine, perception is a procedure of sequential hypothesis testing. we propose a new algorithm, called up-propagation, that realizes this interpretation in layered neural networks. it uses top-down connections to generate hypotheses, and bottom-up connections to revise them. it is important to understand the difference between up-propagation and its ancestor, the backpropagation algorithm[1]. backpropagation is a learning algorithm for recognition models. as shown in figure 1a, bottom-up connections recognize patterns, while top-down connections propagate an error signal that is used to learn the recognition model. in contrast, up-propagation is an algorithm for inverting and learning generative models, as shown in figure 1b. top-down connections generate patterns from a set of hidden variables. sensory input is processed by inverting the generative model, recovering hidden variables that could have generated the sensory data. this operation is called either pattern recognition or pattern analysis, depending on the meaning of the hidden variables. inversion of the generative model is done iteratively, through a negative feedback loop driven by an error signal from the bottom-up connections. the error signal is also used for learning the connections experiments on images of handwritten digits. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5005",
        "graph": {
            "node_idx": 5005,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                5005,
                3634,
                24016,
                5004
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning continuous attractors in recurrent networksone approach to invariant object recognition employs a recurrent neural network as an associative memory. in the standard depiction of the network's state space, memories of objects are stored as attractive fixed points of the dynamics. i argue for a modification of this picture: if an object has a continuous family of instantiations, it should be represented by a continuous attractor. this idea is illustrated with a network that learns to complete patterns. to perform the task of filling in missing information, the network develops a continuous attractor that models the manifold from which the patterns are drawn. from a statistical viewpoint, the pattern completion task allows a formulation of unsupervised a classic approach to invariant object recognition is to use a recurrent neural network as an associative memory[1]. in spite of the intuitive appeal and biological plausibility of this approach, it has largely been abandoned in practical applications. this paper introduces two new concepts that could help resurrect it: object representation by continuous attractors, and learning attractors by pattern completion. in most models of associative memory, memories are stored as attractive fixed points at discrete locations in state space[1]. discrete attractors may not be appropriate for patterns with continuous variability, like the images of a three-dimensional object from different viewpoints. when the instantiations of an object lie on a continuous pattern manifold, it is more appropriate to represent objects by attractive manifolds of fixed points, or continuous attractors. to make this idea practical, it is important to find methods for learning attractors from examples. a naive method is to train the network to retain examples in short-term memory. this method is deficient because it does not prevent the network from storing spurious fixed points that are unrelated to the examples. a superior method is to train the network to restore examples that have been corrupted, so that it learns to complete patterns by filling in missing information. learning in terms of regression rather than density estimation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5007",
        "graph": {
            "node_idx": 5007,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    0,
                    2,
                    1,
                    0,
                    5,
                    6,
                    2,
                    7,
                    3,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                5007,
                4929,
                5008,
                19806,
                17048,
                1058,
                10616,
                5233,
                14800
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: skeletons and techniques for the systematic development of constraint logic programswe study the systematic development of constraint logic programs from the viewpoint of skeletons and techniques as described by kirschenbaum and sterling. we describe a number of fundamental skeleton classes for clp, and generalize the notion of skeletons to deal with non-structural recursion. then we describe a range of useful techniques for extending these skeletons. furthermore, we introduce important classes of techniques that alter the control flow of skeletons in certain well-defined and desirable ways. this work represents a step towards understanding how to develop complex clp programs easily, and is expected to contribute to the adoption of clp for applications projects. it may also lead to the development of semi-automated program development tools. finally, it helps to justify a substantial body of present work on clp compiler optimizations that depends on the procedure level structure of programs. fl a preliminary version of this paper appears in the proceedings of the international conference on tools with artificial intelligence, new orleans, november, 1994. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_5013",
        "graph": {
            "node_idx": 5013,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    0
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                5013,
                3206,
                5012
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: visor: schema-based scene analysis with structured neural networksa novel approach to object recognition and scene analysis based on neural network representation of visual schemas is described. given an input scene, the visor system focuses attention successively at each component, and the schema representations cooperate and compete to match the inputs. the schema hierarchy is learned from examples through unsupervised adaptation and reinforcement learning. visor learns that some objects are more important than others in identifying the scene, and that the importance of spatial relations varies depending on the scene. as the inputs differ increasingly from the schemas, visor's recognition process is remarkably robust, and automatically generates a measure of confidence in the analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5014",
        "graph": {
            "node_idx": 5014,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                5014,
                17071
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: radial basis functions for process controlradial basis function (rbfs) neural networks provide an attractive method for high dimensional nonparametric estimation for use in nonlinear control. they are faster to train than conventional feedforward networks with sigmoidal activation networks (\"backpropagation nets\"), and provide a model structure better suited for adaptive control. this article gives a brief survey of the use of rbfs and then introduces a new statistical interpretation of radial basis functions and a new method of estimating the parameters, using the em algorithm. this new statistical interpretation allows us to provide confidence limits on predictions made using the networks. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5021",
        "graph": {
            "node_idx": 5021,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                5021,
                5751,
                18979,
                20467,
                5752,
                17526,
                19061
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: gathering agent for querying web search enginescomputer science technical report \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_5043",
        "graph": {
            "node_idx": 5043,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                5043,
                4119,
                915,
                916,
                9031,
                19051
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: ila: combining inductive learning with prior knowledge and reasoningmuch effort has been devoted to understanding learning and reasoning in artificial intelligence. however, very few models attempt to integrate these two complementary processes. rather, there is a vast body of research in machine learning, often focusing on inductive learning from examples, quite isolated from the work on reasoning in artificial intelligence. though these two processes may be different, they are very much interrelated. the ability to reason about a domain of knowledge is often based on rules about that domain, that must be learned somehow. and the ability to reason can often be used to acquire new knowledge, or learn. this paper introduces an incremental learning algorithm (ila) that attempts to combine inductive learning with prior knowledge and reasoning. ila has many important characteristics useful for such a combination, including: 1) incremental, self-organizing learning, 2) nonuniform learning, 3) inherent non-monotonicity, 4) extensional and intensional capabilities, and 5) low order polynomial complexity. the paper describes ila, gives simulation results for several applications, and discusses each of the above characteristics in detail. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_5052",
        "graph": {
            "node_idx": 5052,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    3,
                    4,
                    7,
                    6,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    5,
                    6
                ]
            ],
            "node_list": [
                5052,
                17080,
                11843,
                20353,
                20704,
                12884,
                12881,
                21031
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a model of invariant object recognition in the visual systemneurons in the ventral stream of the primate visual system exhibit responses to the images of objects which are invariant with respect to natural transformations such as translation, size, and view. anatomical and neurophysiological evidence suggests that this is achieved through a series of hierarchical processing areas. in an attempt to elucidate the manner in which such representations are established, we have constructed a model of cortical visual processing which seeks to parallel many features of this system, specifically the multi-stage hierarchy with its topologically constrained convergent connectivity. each stage is constructed as a competitive network utilising a modified hebb-like learning rule, called the trace rule, which incorporates previous as well as current neuronal activity. the trace rule enables neurons to learn about whatever is invariant over short time periods (e.g. 0.5 s) in the representation of objects as the objects transform in the real world. the trace rule enables neurons to learn the statistical invariances about objects during their transformations, by associating together representations which occur close together in time. we show that by using the trace rule training algorithm the model can indeed learn to produce transformation invariant responses to natural stimuli such as faces. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5056",
        "graph": {
            "node_idx": 5056,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    1,
                    2,
                    5,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                5056,
                4474,
                10998,
                9789,
                2637,
                16666,
                24626,
                22602
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a formalization of metaprogramming for realthe paper formally shows that the s-semantics is adequate for reasoning about the soundness and completeness of real prolog metainterpreters, based on the non-ground representation of object-level variables. the paper extends some recent results by de schreye and martens, by proving the \"equivalence\" between the object program and its version metainterpreted by vanilla for any positive logic program. the same construction is applied to obtain a soundness and completeness result for an enhanced metainterpreter defining various inheritance mechanisms on structured logic programs. we then consider the specialization of metainterpreters by means of partial deduction techniques, both in the case of vanilla and of the inheritance metain-terpreter. we prove that success derivations have exactly the same length in the specialized program and in the \"corresponding\" object-level program. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_5059",
        "graph": {
            "node_idx": 5059,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    1,
                    2,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                5059,
                17081,
                18353,
                5060,
                19514,
                7800
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: alignment: a new, unified program transformation for local and global optimizationtechnical report csri-292, computer systems research institute, university of toronto, january 1994.technical report csri-292, computer systems research institute, university of toronto, january 1994. abstract computational alignment is a new class of program transformations suitable for both local and global optimization. computational alignment transforms all of the computations of a portion of the loop body in order to align them to other computations either in the same loop or in another loop. it extends along a new dimension and is significantly more powerful than linear transformations because i) it can transform subsets of dependences and references; ii) it is sensitive to the location of data in that it can move the computation relative to data; iii) it applies to imperfect loop nests; and iv) it is the first loop transformation that can change access vectors. linear transformations are just a special case of computational alignment. computational alignment is highly suitable for global optimization because it can transform given loops to access data in similar ways. two important subclasses of computational alignment are presented as well, namely, freeing and isomerizing computational alignment. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_5064",
        "graph": {
            "node_idx": 5064,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                5064,
                17085
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: pac-learning prolog clauses with or without errorsin a nutshell we can describe a generic ilp problem as following: given a set e of (positive and negative) examples of a target predicate, and some background knowledge b about the world (usually a logic program including facts and auxiliary predicates), the task is to find a logic program h (our hypothesis) such that all positive examples can be deduced from b and h, while no negative example can. in this paper we review some of the results achieved in this area and discuss the techniques used. moreover we prove the following new results: * predicates described by non-recursive, local clauses of at most k literals are pac-learnable under any distribution. this generalizes a previous result that was valid only for constrained clauses. * predicates that are described by k non-recursive local clauses are pac-learnable under any distribution. this generalizes a previous result that was non construc tive and valid only under some class of distributions. finally we introduce what we believe is the first theoretical framework for learning prolog clauses in the presence of errors. to this purpose we introduce a new noise model, that we call the fixed attribute noise model, for learning propositional concepts over the boolean domain. this new noise model can be of its own interest. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5073",
        "graph": {
            "node_idx": 5073,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    5,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    10,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    16,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    2,
                    4,
                    29,
                    44,
                    18,
                    45,
                    28,
                    46,
                    47,
                    22,
                    48,
                    49,
                    18,
                    22,
                    31,
                    2,
                    50,
                    18,
                    51,
                    52
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                5073,
                1638,
                12606,
                3061,
                20902,
                3528,
                8933,
                3080,
                12601,
                2652,
                5075,
                15085,
                3526,
                7142,
                8809,
                22835,
                22870,
                22979,
                3678,
                624,
                3219,
                18655,
                17091,
                24352,
                423,
                3081,
                21908,
                24606,
                22557,
                12603,
                24682,
                2561,
                12607,
                14289,
                12612,
                1639,
                14753,
                15118,
                2183,
                15241,
                16719,
                17308,
                17377,
                23419,
                7503,
                22547,
                3676,
                3243,
                5058,
                6884,
                20953,
                14747,
                3814
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: bridge: a high-performance file system for parallel processorswe have designed and prototyped a parallel file system that distributes each file across multiple storage devices and processors. naive programs are able to access files just as they would with a conventional file system, while more sophisticated programs may export pieces of their code to the processors managing the data, for optimum performance. theoretical and early empirical data indicate nearly linear speedup on critical operations for up to several dozen devices. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_5076",
        "graph": {
            "node_idx": 5076,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    6,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    7,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                5076,
                17984,
                9246,
                18674,
                9170,
                19145,
                19284,
                9086,
                649,
                20491,
                22614,
                2076,
                8340,
                12827,
                12826,
                16206,
                18417,
                4947,
                8339,
                17374,
                20497
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: autonomous robots, communication in reactive multiagent robotic systemsmultiple cooperating robots are able to complete many tasks more quickly and reliably than one robot alone. communication between the robots can multiply their capabilities and effectiveness, but to what extent? in this research, the importance of communication in robotic societies is investigated through experiments on both simulated and real robots. performance was measured for three different types of communication for three different tasks. the levels of communication are progressively more complex and potentially more expensive to implement. for some tasks, communication can significantly improve performance, but for others inter-agent communication is apparently unnecessary. in cases where communication helps, the lowest level of communication is almost as effective as the more complex type. the bulk of these results are derived from thousands of simulations run with randomly generated initial conditions. the simulation results help determine appropriate parameters for the reactive control system which was ported for tests on denning mobile robots. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_5079",
        "graph": {
            "node_idx": 5079,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    1,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    4,
                    20,
                    5,
                    7,
                    21,
                    22,
                    19,
                    23,
                    22,
                    3,
                    24,
                    18,
                    25,
                    26,
                    5,
                    7,
                    27,
                    28,
                    22,
                    29
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7
                ]
            ],
            "node_list": [
                5079,
                1587,
                10702,
                30,
                3577,
                29,
                19670,
                10417,
                4577,
                5182,
                5183,
                5209,
                3585,
                19578,
                1198,
                8608,
                1902,
                2866,
                3579,
                16051,
                13527,
                14664,
                23720,
                15591,
                10651,
                10715,
                6970,
                36,
                35,
                3581
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: protocol implementation using integrated layer processing human capital and mobility programmeintegrated layer processing (ilp) is an implementation concept which \"permit[s] the implementor the option of performing all the [data] manipulation steps in one or two integrated processing loops\" [1]. to estimate the achievable benefits of ilp, a file transfer application with an encryption function on top of a user-level tcp has been implemented and the performance of the application in terms of throughput and packet processing times has been measured. the results show that it is possible to obtain performance benefits by integrating marshalling, encryption and tcp checksum calculation. they also show that the benefits are smaller than in simple experiments, where ilp effects have not been evaluated in a complete protocol environment. simulations of memory access and cache hit rate show that the main benefit of ilp is reduced memory accesses rather than an improved cache hit rate. the results further show that data manipulation characteristics may significantly inuence the cache behavior and the achievable performance gain of ilp. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_5083",
        "graph": {
            "node_idx": 5083,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    1,
                    14,
                    15,
                    4,
                    16,
                    7,
                    17,
                    18,
                    5,
                    19,
                    10,
                    8,
                    20,
                    21,
                    22,
                    12,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    2,
                    10,
                    30,
                    31,
                    32,
                    33,
                    18,
                    2,
                    33,
                    5,
                    6,
                    8,
                    10,
                    20,
                    29,
                    33,
                    34,
                    35,
                    8,
                    36,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                5083,
                1217,
                17900,
                7040,
                1701,
                5082,
                9700,
                8070,
                7038,
                8934,
                10713,
                5337,
                17155,
                1218,
                433,
                7159,
                5334,
                19386,
                10705,
                9083,
                22739,
                17002,
                1700,
                7907,
                5336,
                2081,
                24594,
                20569,
                1702,
                7906,
                6009,
                24680,
                17967,
                10054,
                24840,
                25061,
                7345
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning complex, extended sequences using the principle of history compression (neural computation, 4(2):234-242, 1992)previous neural network learning algorithms for sequence processing are computationally expensive and perform poorly when it comes to long time lags. this paper first introduces a simple principle for reducing the descriptions of event sequences without loss of information. a consequence of this principle is that only unexpected inputs can be relevant. this insight leads to the construction of neural architectures that learn to `divide and conquer' by recursively decomposing sequences. i describe two architectures. the first functions as a self-organizing multi-level hierarchy of recurrent networks. the second, involving only two recurrent networks, tries to collapse a multi-level predictor hierarchy into a single recurrent net. experiments show that the system can require less computation per time step and many fewer training sequences than conventional training algorithms for recurrent nets. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5088",
        "graph": {
            "node_idx": 5088,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                5088,
                8549
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a case study on tuning of genetic algorithms by using performance evaluation based on experimental designthis paper proposes four performance measures of a genetic algorithm (ga) which enable us to compare different gas for an op timization problem and different choices of their parameters' values. the performance measures are defined in terms of observations in simulation, such as the frequency of optimal solutions, fitness values, the frequency of evolution leaps, and the number of generations needed to reach an optimal solution. we present a case study in which parameters of a ga for robot path planning was tuned and its performance was optimized through performance evaluation by using the measures. especially, one of the performance measures is used to demonstrate the adaptivity of the ga for robot path planning. we also propose a process of systematic tuning based on techniques for the design of experiments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_5094",
        "graph": {
            "node_idx": 5094,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                5094,
                13885,
                17607,
                7203
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamical selection of learning algorithmsdetermining the conditions for which a given learning algorithm is appropriate is an open problem in machine learning. methods for selecting a learning algorithm for a given domain have met with limited success. this paper proposes a new approach to predicting a given example's class by locating it in the \"example space\" and then choosing the best learner(s) in that region of the example space to make predictions. the regions of the example space are defined by the prediction patterns of the learners being used. the learner(s) chosen for prediction are selected according to their past performance in that region. this dynamic approach to learning algorithm selection is compared to other methods for selecting from multiple learning algorithms. the approach is then extended to weight rather than select the algorithms according to their past performance in a given region. both approaches are further evaluated on a set of determining the conditions for which a given learning algorithm is appropriate is an open problem in machine learning. methods for selecting a learning algorithm for a given domain (e.g. [aha92, breiman84]) or for a portion of the domain ([brodley93, brodley94]) have met with limited success. this paper proposes a new approach that dynamically selects a learning algorithm for each example by locating it in the \"example space\" and then choosing the best learner(s) for prediction in that part of the example space. the regions of the example space are formed by the observed prediction patterns of the learners being used. the learner(s) chosen for prediction are selected according to their past performance in that region which is defined by the \"cross-validation history.\" this paper introduces ds, a method for the dynamic selection of a learning algorithm(s). we call it \"dynamic\" because the learning algorithm(s) used to classify a novel example depends on that example. preliminary experimentation motivated dw, an extension to ds that dynamically weights the learners predictions according to their regional accuracy. further experimentation compares ds and dw to a collection of other meta-learning strategies such as cross-validation ([breiman84]) and various forms of stacking ([wolpert92]). in this phase of the experiementation, the meta-learners have six constituent learners which are heterogeneous in their search and representation methods (e.g. a rule learner, cn2 [clark89]; a decision tree learner, c4.5 [quinlan93]; an oblique decision tree learner, oc1 [murthy93]; an instance-based learner, pebls [cost93]; a k-nearest neighbor learner, ten domains and compared to several other meta-learning strategies. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5144",
        "graph": {
            "node_idx": 5144,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                5144,
                16826,
                17849
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automatic parallelization for symmetric shared-memory multiprocessorsin this paper, we present our solution to automatic smp parallelization. our solution is unique in its robust support for unbalanced processor loads and nesting of parallel loops and parallel sections, in conjunction with its tight integration with high-order transformations for improved uniprocessor performance, so that the speedup due to parallelism is truly a multiplicative speedup over highly optimized uniprocessor execution times. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_5188",
        "graph": {
            "node_idx": 5188,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    2,
                    10,
                    11,
                    3,
                    12,
                    13,
                    1,
                    2,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    1,
                    6,
                    12,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                5188,
                17113,
                5189,
                17659,
                17524,
                17971,
                5864,
                5186,
                5187,
                9616,
                15619,
                17293,
                9970,
                24814,
                1058,
                10927,
                9218,
                16020,
                1057,
                21840
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: recognizing design decisions in programssoftware maintenance, reverse engineering, and software reuse rely on being able to recognize, comprehend, and manipulate design decisions in source code. but what is a design decision? this paper describes a characterization of design decisions based on the analysis of programming language constructs. the characterization underlies a framework for documenting and manipulating design information to facilitate maintenance and reuse activities. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_5190",
        "graph": {
            "node_idx": 5190,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    2,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5
                ]
            ],
            "node_list": [
                5190,
                17113,
                5189,
                4172,
                24814,
                15526,
                9616,
                15619,
                1253,
                23224,
                17524,
                15528,
                14023,
                7730,
                23933,
                22737,
                16189,
                23222,
                15527
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: challenges to the field of reverse engineeringdriven by the economic importance of maintaining and improving the enormous base of existing software systems, the reverse engineering of software has been of rapidly growing interest over the past decade. more and more commercial software tools support aspects of reverse engineering, and more and more researchers in academic and industrial organizations are addressing themselves to the fundamental problems of reverse engineering. in the best of all worlds, we researchers on reverse engineering would be working together toward clear goals of great economic importance. unfortunately, it appears that we are mostly just groping around in a swamp, each looking for a bit of dry ground (whether or not it actually leads out of the swamp), and running into each other only occasionally. if we are to make rapid and effective joint progress, a number of improvements need to be made in the way we are pursuing research. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_5203",
        "graph": {
            "node_idx": 5203,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    4,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    15,
                    4,
                    23,
                    24,
                    25,
                    26,
                    5,
                    27,
                    28,
                    29,
                    30
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                5203,
                1999,
                8609,
                19140,
                9310,
                6709,
                16586,
                3871,
                1998,
                1618,
                19896,
                20562,
                19797,
                6,
                11959,
                4737,
                16207,
                20560,
                12093,
                20782,
                5920,
                18552,
                5686,
                22100,
                6732,
                6733,
                6730,
                17813,
                18781,
                15579,
                8578
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: constructive learning of recurrent neural networks: limitations of recurrent casade correlation and a simple solutionit is often difficult to predict the optimal neural network size for a particular application. constructive or destructive methods that add or subtract neurons, layers, connections, etc. might offer a solution to this problem. we prove that one method, recurrent cascade correlation, due to its topology, has fundamental limitations in representation and thus in its learning capabilities. it cannot represent with monotone (i.e. sigmoid) and hard-threshold activation functions certain finite state automata. we give a \"preliminary\" approach on how to get around these limitations by devising a simple constructive training method that adds neurons during training while still preserving the powerful fully-recurrent structure. we illustrate this approach by simulations which learn many examples of regular grammars that the \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5209",
        "graph": {
            "node_idx": 5209,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    4,
                    4
                ]
            ],
            "node_list": [
                5209,
                10920,
                18868,
                24839,
                6442,
                6441,
                4941
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improving the performance of distributed applications using active networksan active network allows applications to inject customized programs into network nodes. this enables faster protocol innovation by making it easier to deploy new network protocols, even over the wide area. in this paper, we argue that the ability to introduce active protocols offers important opportunities for end-to-end performance improvements of distributed applications. we begin by describing several active protocols that provide novel network services and discussing the potential impact of these kinds of services on end-to-end application performance. we then present and analyze the performance of an active networking protocol that uses caching within the network backbone to reduce load on both servers and backbone routers. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_5231",
        "graph": {
            "node_idx": 5231,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5,
                    2,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                5231,
                5225,
                19961,
                5346,
                17164,
                18210,
                22444,
                23161
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: measures of the potential for load sharing in distributed computing systemsin this paper we are concerned with the problem of determining the potential for load balancing in a distributed computing system. we define a precise measure, called the number of sharable jobs, of this potential in terms of the number of jobs that can usefully be transferred across sites in the system. properties of this measure are derived, including a general formula for its probability distribution, independent of any particular queuing discipline. a normalized version of the number of sharable jobs, called the job sharing coefficient, is defined. from the general formula, the probability distribution of the number of sharable jobs is computed for three important queuing models and exact expressions are derived in two cases. for queuing models in which an exact expression for the probability distribution of the number of sharable jobs is difficult to obtain, two methods are presented for numerical computation of this distribution. the job sharing coefficient is plotted against traffic intensity for various values of system parameters. both of these measures are shown to be useful analytic tools for understanding the characteristics of load sharing in distributed systems. they can also aid in the design of such systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_5247",
        "graph": {
            "node_idx": 5247,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    10,
                    12,
                    13,
                    14,
                    6,
                    15,
                    16,
                    17,
                    18,
                    19,
                    9,
                    20,
                    5,
                    16,
                    16,
                    5,
                    15,
                    16,
                    21,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    8,
                    9,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                5247,
                11399,
                21302,
                11639,
                7138,
                18036,
                7768,
                21305,
                13271,
                8257,
                8255,
                20118,
                12924,
                13270,
                12534,
                8248,
                21306,
                17650,
                20518,
                2549,
                2188,
                11425
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: causal diagrams for empirical research (with appendix on structural equations and counterfactuals)the primary aim of this paper is to show how graphical models can be used as a mathematical language for integrating statistical and subject-matter information. in particular, the paper develops a principled, nonparametric framework for causal inference, in which diagrams are queried to determine if the assumptions available are sufficient for identifying causal effects from nonexperimental data. if so the diagrams can be queried to produce mathematical expressions for causal effects in terms of observed distributions; otherwise, the diagrams can be queried to suggest additional observations or auxiliary experiments from which the desired inferences can be obtained. key words: causal inference, graph models, structural equations, treatment effect. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_5257",
        "graph": {
            "node_idx": 5257,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                5257,
                6222,
                5256,
                14760
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hard real-time operating system kernel study task 8, volume d using the worst-case execution analyserthis document describes the use of programs that constitute the worst-case execution analyser (hereafter `the analyser'), specified in the task 4 deliverable, definition of the tools[1]. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_5272",
        "graph": {
            "node_idx": 5272,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    2,
                    3,
                    7,
                    12,
                    13,
                    14,
                    15,
                    4,
                    8,
                    16,
                    11,
                    17,
                    18,
                    19,
                    20,
                    2,
                    6,
                    8,
                    15,
                    19,
                    8,
                    21,
                    15,
                    22,
                    23,
                    24,
                    5,
                    25,
                    19,
                    8,
                    21,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                5272,
                325,
                13208,
                17959,
                8135,
                18213,
                327,
                6127,
                18932,
                4343,
                6128,
                1366,
                12329,
                5236,
                7414,
                21262,
                4344,
                16467,
                326,
                12806,
                328,
                9918,
                16938,
                17569,
                4342,
                22699
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: approximation from shift-invariant subspaces of la complete characterization is given of closed shift-invariant subspaces of l 2 (ir d ) which provide a specified approximation order. when such a space is principal (i.e., generated by a single function), then this characterization is in terms of the fourier transform of the generator. as a special case, we obtain the classical strang-fix conditions, but without requiring the generating function to decay at infinity. the approximation order of a general closed shift-invariant space is shown to be already realized by a specifiable principal subspace. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5291",
        "graph": {
            "node_idx": 5291,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4
                ]
            ],
            "node_list": [
                5291,
                24250,
                7236,
                3464,
                5536,
                10492,
                17429,
                11177,
                25046,
                17275,
                9738,
                1715,
                11149,
                22284,
                7602,
                10712
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multimodal user interfaces in the open agent architecturethe design and development of the open agent architecture (oaa) 1 system has focused on providing access to agent-based applications through an intelligent, cooperative, distributed, and multimodal agent-based user interfaces. the current multimodal interface supports a mix of spoken language, handwriting and gesture, and is adaptable to the user's preferences, resources and environment. only the primary user interface agents need run on the local computer, thereby simplifying the task of using a range of applications from a variety of platforms, especially low-powered computers such as personal digital assistants (pdas). an important consideration in the design of the oaa was to facilitate mix-and-match: to facilitate the reuse of agents in new and unanticipated applications, and to support rapid prototyping by facilitating the replacement of agents by better versions. the utility of the agents and tools developed as part of this ongoing research project has been demonstrated by their use as infrastructure in unrelated projects. keywords: agent architecture, multimodal, speech, gesture, handwriting, natural language \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_5300",
        "graph": {
            "node_idx": 5300,
            "edge_index": [
                [
                    1,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                5300,
                17138,
                5297
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: performance implications of communication mechanisms in all-software global address space systemsglobal addressing of shared data simplifies parallel programming and complements message passing models commonly found in distributed memory machines. a number of programming systems have been designed that synthesize global addressing purely in software on such machines. these systems provide a number of communication mechanisms to mitigate the effect of high communication latencies and overheads. this study compares the mechanisms in two representative all-software systems: crl and split-c. crl uses region-based caching while split-c uses split-phase and push-based data transfers for optimizing communication performance. both systems take advantage of bulk data transfers. by implementing a set of parallel applications in both crl and split-c, and running them on the ibm sp2, meiko cs-2 and two simulated architectures, we find that split-phase and push-based bulk data transfers are essential for good performance. region-based caching benefits applications with irregular structure and with sufficient temporal locality, especially under high communication latencies. however, caching also hurts performance when there is insufficient data reuse or when the size of caching granularity is mismatched with the communication granularity. we find the programming complexity of the communication mechanisms in both languages to be comparable. based on our results, we recommend that an ideal system intended to support diverse applications on parallel platforms should incorporate the communication mechanisms in crl and split-c. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_5313",
        "graph": {
            "node_idx": 5313,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    6,
                    7,
                    8,
                    9,
                    11,
                    12,
                    13,
                    14,
                    3,
                    15,
                    16,
                    0,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    9,
                    10,
                    23
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                5313,
                5335,
                5336,
                2130,
                20365,
                2081,
                17155,
                17906,
                10054,
                7906,
                9700,
                8682,
                22741,
                22744,
                3279,
                16751,
                2557,
                10407,
                19308,
                16595,
                17712,
                5312,
                1701,
                1697
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: palo: a probabilistic hill-climbing algorithmmany learning systems search through a space of possible performance elements, seeking an element whose expected utility, over the distribution of problems, is high. as the task of finding the globally optimal element is often intractable, many practical learning systems instead hill-climb to a local optimum. unfortunately, even this is problematic as the learner typically does not know the underlying distribution of problems, which it needs to determine an element's expected utility. this paper addresses the task of approximating this hill-climbing search when the utility function can only be estimated by sampling. we present a general algorithm, palo, that returns an element that is, with provably high probability, essentially a local optimum. we then demonstrate the generality of this algorithm by presenting three distinct applications, that respectively find an element whose efficiency, accuracy or completeness is nearly optimal. these results suggest approaches to solving the utility problem from explanation-based learning, the multiple extension problem from nonmonotonic reason ing and the tractability/completeness tradeoff problem from knowledge representation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5324",
        "graph": {
            "node_idx": 5324,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                5324,
                17152,
                17316,
                19971
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the temporal reasoning systems timegraph i-iiwe describe two domain-independent temporal reasoning systems called timegraph i and ii which can be used in ai-applications as tools for efficiently managing large sets of relations in the point algebra, in the interval algebra, and metric information such as absolute times and durations. our representation of time is based on timegraphs, graphs partitioned into a set of chains on which the search is supported by a metagraph data structure. timegraph i was originally developed by taugher, schubert and miller in the context of story comprehension. timegraph ii provides useful extensions, including efficient algorithms for handing inequations, and relations expressing point-interval exclusion and interval disjointness. these extensions make the system much more expressive in the representation of qualitative information and suitable for a large class of applications. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_5367",
        "graph": {
            "node_idx": 5367,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                5367,
                15622,
                5364,
                18098,
                22459,
                23321,
                5365,
                18156
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the rc5 encryption algorithmthis document describes the rc5 encryption algorithm, a fast symmetric block cipher suitable for hardware or software implementations. a novel feature of rc5 is the heavy use of data-dependent rotations. rc5 has a variable word size, a variable number of rounds, and a variable-length secret key. the encryption and decryption algorithms are exceptionally simple. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_5380",
        "graph": {
            "node_idx": 5380,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    5,
                    7,
                    1,
                    2,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                5380,
                10880,
                5379,
                18215,
                4877,
                14847,
                19355,
                8688
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an algorithm for exact bounds on the time separation of events in concurrent systems 1technical report 94-02-02 february 9, 1994 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_5384",
        "graph": {
            "node_idx": 5384,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    10,
                    7,
                    9,
                    10,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    7,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                5384,
                17173,
                5385,
                13488,
                21698,
                21935,
                21999,
                14130,
                13489,
                21520,
                21521
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 99-113. construction of phylogenetic trees, science, fitting the gene lineage into its species lineage. a6] farach, m. and thorup, m. 1993. fast comparison of evolutionary trees, technical report 93-46, dimacs, rutgers university, piscataway, nj. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5387",
        "graph": {
            "node_idx": 5387,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    5,
                    6,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    9,
                    23,
                    24,
                    25,
                    11,
                    26,
                    27,
                    10,
                    28,
                    18,
                    29,
                    30,
                    31,
                    17
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    4,
                    4,
                    4,
                    5,
                    5,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                5387,
                3202,
                19287,
                17599,
                8843,
                9867,
                21615,
                16210,
                48,
                13535,
                14056,
                18753,
                16899,
                20776,
                2139,
                21617,
                13573,
                21997,
                15686,
                18278,
                20147,
                3203,
                1969,
                23866,
                3574,
                8868,
                3448,
                21609,
                22098,
                22537,
                21570,
                23191
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: isolating multiple image motions for enhancement and 3d analysismotion computation in scenes having multiple moving objects is performed together with object segmentation by using a temporal integration approach. using an accurate 2d motion estimate for image regions, they can be enhanced by fusing all successive frames covering the same region. enhancement includes improvement of image resolution and filling-in occluded regions. it is also shown how an accurate 2d motion estimate for a single planar surface in a general static scene can help to compute the 3d motion performed by the camera. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_5392",
        "graph": {
            "node_idx": 5392,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    0,
                    9,
                    5,
                    10,
                    4,
                    6,
                    7,
                    11,
                    5,
                    12,
                    0,
                    13,
                    2,
                    3,
                    5,
                    4,
                    6,
                    14,
                    15,
                    11,
                    16,
                    17,
                    18,
                    19,
                    20,
                    7,
                    6,
                    0,
                    1,
                    2,
                    21,
                    10,
                    4,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                5392,
                17261,
                1319,
                7188,
                1211,
                1156,
                1574,
                19742,
                5391,
                1318,
                5393,
                5932,
                1213,
                5395,
                4346,
                9441,
                4450,
                16500,
                7145,
                7187,
                10534,
                2803,
                1155
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: towards a fault tolerant ahs design part i: extended architecturewe propose a hierarchical control architecture for dealing with faults and adverse environmental conditions on an automated highway system (ahs). our design builds on a previously designed control architecture that works under normal conditions of operation. the faults that are considered in our design are classified according to the capabilities remaining on the vehicle or roadside after the fault has occurred. information about these capabilities is used by supervisors in each of the layers to select appropriate control strategies. we outline the extended control strategies that are needed by these supervisors in each layer of the hierarchy and, in certain cases, give examples of their detailed operation. a companion paper develops and verifies protocols for extended coordination strategies and maneuvers. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_5393",
        "graph": {
            "node_idx": 5393,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    1,
                    6,
                    10,
                    11,
                    12,
                    5,
                    0,
                    13,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                5393,
                5932,
                7188,
                24549,
                1574,
                2803,
                1156,
                4450,
                1155,
                20150,
                5392,
                17261,
                1319,
                1211
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: optimal control approach to multiagent, hierarchical system verificationan approach to the verification of hybrid systems using optimal control principles is introduced. its advantages and disadvantages when compared with conventional, automatic verification techniques are highlighted. the application of the new approach is illustrated by means of two motivating examples, one from the area of automated highway systems and the other from the timed automata verification literature. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_5400",
        "graph": {
            "node_idx": 5400,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                5400,
                9866
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the complexity of learning according to two models of a drifting environment sufficient condition forwe show that a c* 3 vcdim(f) bound on the rate of drift of the distribution generating the examples is sufficient for agnostic learning to relative accuracy *, where c &gt; 0 is a constant; this matches a known necessary condition to within a constant factor. we establish a c* 2 condition to within a constant factor. we provide a relatively simple proof of a bound of o * 2 vcdim(f ) + log 1 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5414",
        "graph": {
            "node_idx": 5414,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    4,
                    4
                ]
            ],
            "node_list": [
                5414,
                1843,
                13524,
                18307,
                8491,
                21803,
                7987,
                6331,
                21854,
                24547,
                10122,
                24927,
                5209,
                10424,
                19957,
                16082,
                21561,
                21623,
                13636,
                8641,
                8642
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evaluating 3d task performance for fish tank virtual worlds 1fish tank virtual reality\" refers to the use of a standard graphics workstation to achieve real-time display of three-dimensional scenes using stereopsis and dynamic head-coupled perspective. fish tank vr has a number of advantages over head-mounted immersion vr which make it more practical for many applications. after discussing the characteristics of fish tank vr, we describe a set of three experiments conducted to study the benefits of fish tank vr over a traditional workstation graphics display. these experiments tested user performance under two conditions: (a) whether or not stereoscopic display was used and (b) whether or not the perspective display was coupled dynamically to the positions of a user's eyes. subjects using a comparison protocol consistently preferred head-coupling without stereo over stereo without head-coupling. error rates in a tree tracing task similar to one used by sollenberger and milgram showed an order of magnitude improvement for head-coupled stereo over a static (non-head-coupled) display and the benefits gained by head-coupling were more significant than those gained from stereo alone. the final experiment examined two factors that are often associated with human performance in virtual worlds: the lag (or latency) in receiving and processing tracker data and the rate at which frames are updated. for the tree tracing task, lag had a larger impact on performance than did frame update rate, with lag having a multiplicative effect on response time. we discuss the relevance of these results for the display of complex three-dimensional data and highlight areas requiring further study. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_5433",
        "graph": {
            "node_idx": 5433,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                5433,
                1457,
                8088,
                24139,
                24225,
                202,
                1458,
                5432,
                199,
                9178,
                8087,
                24766,
                2646,
                22081,
                14145,
                5301,
                9919,
                8433,
                12644
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: incremental inference of concrete typesdepartment of computer science 1304 w. springfield avenue urbana, il 61801 fjplevyak,achieng@cs.uiuc.edu department of computer science, university of illinois urbana-champaign tech report uiucdcs-r-93-1829 abstract concrete type information is invaluable for program optimization. the determination of concrete types is, in general, a flow sensitive global data flow problem. as a result, its solution is hampered by the very program structures for whose optimization its results are most critical: dynamic dispatch (as in object-oriented programs) and first class functions (including function pointers). constraint based type inference systems are an effective way of safely approximating concrete types, but their use can be expensive and their results imprecise. we present an incremental constraint based type inference technique for extending the analysis in response to discovered imprecisions. this technique infers concrete types to high precision with a cost proportional to the information obtained. performance results, precision and running time, are reported for a number of concurrent object-oriented programs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_5451",
        "graph": {
            "node_idx": 5451,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    2,
                    10,
                    1,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                5451,
                3337,
                5449,
                11769,
                13385,
                5453,
                5452,
                10508,
                3336,
                19227,
                5450,
                8059,
                20578,
                12115,
                15494,
                21410,
                10985,
                13386,
                13387,
                13388
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: genetic algorithms and very fast simulated reannealing: a comparisonwe compare genetic algorithms (ga) with a functional search method, very fast simulated reannealing (vfsr), that not only is efficient in its search strategy, but also is statistically guaranteed to find the function optima. ga previously has been demonstrated to be competitive with other standard boltzmann-type simulated annealing techniques. presenting a suite of six standard test functions to ga and vfsr codes from previous studies, without any additional fine tuning, strongly suggests that vfsr can be expected to be orders of magnitude more efficient than ga. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_5454",
        "graph": {
            "node_idx": 5454,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5,
                    6,
                    7,
                    2,
                    8,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                5454,
                3337,
                5449,
                5453,
                5452,
                10508,
                3336,
                19227,
                5450
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: canonical momenta of nonlinear combatthe context of nonlinear combat calls for more sophisticated measures of effectiveness. we present a set of tools that can be used as such supplemental indicators, based on stochastic nonlinear multivariate modeling used to benchmark janus simulation to exercise data from the u.s. army national training center (ntc). as a prototype study, a strong global optimization tool, adaptive simulated annealing (asa), is used to explicitly fit janus data, deriving coefficients of relative measures of effectiveness, and developing a sound intuitive graphical decision aid, canonical momentum indicators (cmi), faithful to the sophisticated algebraic model. we argue that these tools will become increasingly important to aid simulation studies of the importance of maneuver in combat in the 21st century. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5457",
        "graph": {
            "node_idx": 5457,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                5457,
                15559,
                5456,
                9448
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: flows in undirected unit capacity networkstechnical report # 97-103 nec research institute, inc. abstract we describe an o(min(m; n 3=2 )m 1=2 )-time algorithm for finding maximum flows in undi-rected networks with unit capacities and no parallel edges. this improves upon the previous bound of karzanov and even and tarjan when m = !(n 3=2 ), and upon a randomized bound of karger when v = (n 7=4 =m 1=2 ). (here v is the maximum flow value.) \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_5480",
        "graph": {
            "node_idx": 5480,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                5480,
                11343,
                20071
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a realistic experiment in knowledge representation in open event calculus protocol specification keywords knowledge representation,this paper presents one of the first realistic experiments in the use of event calculus in open logic programming: the specification of a process protocol. the specification task involves most of the common complications of temporal reasoning: the representation of context dependent actions, of preconditions and ramifications of actions, the modelling of system faults, and most of all, the representation of uncertainty of actions. as the underlying language, the open logic programming formalism, an extension of logic programming, is used. the experiment shows that event calculus is a promising candidate for the specification of dynamic systems. a comparison between specification of process protocols in event calculus and in the more commonly used process algebras shows fundamental differences between the two approaches. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_5483",
        "graph": {
            "node_idx": 5483,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    3,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                5483,
                2703,
                5480,
                23414,
                8356,
                1015,
                11343,
                19745,
                2223
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the abductive event calculus as a general framework for temporal databasesin earlier work, we have shown that the formalism of ab-ductive logic programs with fol integrity constraints provides, under a completion semantics, the same declarative expressivity for representing incomplete information as full first order logic. we have shown how the combination of this formalism with a variant of the event calculus of kowalski and sergot results in a correct and very expressive framework for temporal reasoning and representation. in this paper we demonstrate how this abductive event calculus formalism provides a general framework for the representation and use of temporal databases. on the declarative level, it is particularly convenient for the representation of incomplete knowledge. complementary, on the procedural level, we are able to provide a number of simple algorithms using abduction and deduction to test the consistency of the base, answer queries, update the database, handle complex formulas and resolve inconsistency. furthermore, the use of the database for general temporal problem solving is possible using the known event calculus and logic programming methods. in particular we show how planning is possible in this kind of temporal database. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_5489",
        "graph": {
            "node_idx": 5489,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    9,
                    10,
                    11,
                    12,
                    2,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                5489,
                1908,
                5921,
                18684,
                1617,
                18566,
                24816,
                15994,
                8598,
                5733,
                17257,
                1409,
                1598,
                9156
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: (page 1) learning in parallel*in this paper, we extend valiant's sequential model of concept learning from examples [valiant 1984] and introduce models for the efficient learning of concept classes from examples in parallel. we say that a concept class is n c-learnable if it can be learned in polylog time with a polynomial number of processors. we show that several concept classes which are polynomial-time learnable are n c-learnable in constant time. some other classes can be shown to be n c-learnable in logarithmic time, but not in constant time. our main result shows that other classes, such as s-fold unions of geometrical objects in euclidean space, which are polynomial-time learnable by a greedy set cover technique, are n c-learnable using a non-greedy technique. we also show that (unless p rn c) several polynomial-time learnable concept classes related to linear programming are not n c-learnable. equivalence of various parallel learning models and issues of fault-tolerance are also discussed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5501",
        "graph": {
            "node_idx": 5501,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    7,
                    9,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    4,
                    27,
                    0,
                    28,
                    29,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                5501,
                2188,
                5502,
                19603,
                1510,
                19655,
                24887,
                17194,
                5870,
                20843,
                16607,
                17882,
                18036,
                3296,
                18364,
                5245,
                11484,
                11483,
                11911,
                10175,
                2949,
                4426,
                2908,
                17309,
                17707,
                4933,
                11076,
                19634,
                3212,
                10284
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mdl and mml similarities and differences (introduction to minimum encoding inference part iii)tech report 207 department of computer science, monash university, clayton, vic. 3168, australia abstract: this paper continues the introduction to minimum encoding inductive inference given by oliver and hand. this series of papers was written with the objective of providing an introduction to this area for statisticians. we describe the message length estimates used in wallace's minimum message length (mml) inference and rissanen's minimum description length (mdl) inference. the differences in the message length estimates of the two approaches are explained. the implications of these differences for applications are discussed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5505",
        "graph": {
            "node_idx": 5505,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                5505,
                17199,
                25029,
                22653
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: integrated safety analysis of requirements specificationsthis paper describes an integrated approach to safety analysis of software requirements and demonstrates the feasibility and utility of applying the individual techniques and the integrated approach on the requirements specification of a guidance system for a high-speed civil transport being developed at nasa ames. each analysis found different types of errors in the specification; thus together the techniques provided a more comprehensive safety analysis than any individual technique. we also discovered that the more the analyst knew about the application and the model, the more successful they were in finding errors. our findings imply that the most effective safety-analysis tools will assist rather than replace the analyst. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_5525",
        "graph": {
            "node_idx": 5525,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    3,
                    9,
                    10,
                    11,
                    12,
                    3,
                    13,
                    2,
                    7,
                    8,
                    9,
                    14,
                    15,
                    11,
                    13,
                    6,
                    16,
                    5,
                    15,
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                5525,
                1741,
                1743,
                1744,
                1740,
                5619,
                6732,
                6733,
                6709,
                18781,
                6731,
                15579,
                15578,
                19434,
                9620,
                1742,
                5362
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: perceptual development and learning: from behavioral, neurophysiological, and morphological evidence to computational modelsan intelligent system has to be capable of adapting to a constantly changing environment. it therefore, ought to be capable of learning from its perceptual interactions with its surroundings. this requires a certain amount of plasticity in its structure. any attempt to model the perceptual capabilities of a living system or, for that matter, to construct a synthetic system of comparable abilities, must therefore, account for such plasticity through a variety of developmental and learning mechanisms. this paper examines some results from neuroanatomical, morphological, as well as behavioral studies of the development of visual perception; integrates them into a computational framework; and suggests several interesting experiments with computational models that can yield insights into the development of visual perception. in order to understand the development of information processing structures in the brain, one needs knowledge of changes it undergoes from birth to maturity in the context of a normal environment. however, knowledge of its development in aberrant settings is also extremely useful, because it reveals the extent to which the development is a function of environmental experience (as opposed to genetically determined pre-wiring). accordingly, we consider development of the visual system under both normal and restricted rearing conditions. the role of experience in the early development of the sensory systems in general, and the visual system in particular, has been widely studied through a variety of experiments involving carefully controlled manipulation of the environment presented to an animal. extensive reviews of such results can be found in (mitchell, 1984; movshon, 1981; hirsch, 1986; boothe, 1986; singer, 1986). some examples of manipulation of visual experience are total pattern deprivation (e.g., dark rearing), selective deprivation of a certain class of patterns (e.g., vertical lines), monocular deprivation in animals with binocular vision, etc. extensive studies involving behavioral deficits resulting from total visual pattern deprivation indicate that the deficits arise primarily as a result of impairment of visual information processing in the brain. the results of these experiments suggest specific developmental or learning mechanisms that may be operating at various stages of development, and at different levels in the system. we will discuss some of these hhhhhhhhhhhhhhh this is a working draft. all comments, especially constructive criticism and suggestions for improvement, will be appreciated. i am indebted to prof. james dannemiller for introducing me to some of the literature in infant development; to prof. leonard uhr for his helpful comments on an initial draft of the paper; and to numerous researchers whose experimental work has provided the basis for the model outlined in this paper. this research was partially supported by grants from the national science foundation and the university of wisconsin graduate school. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5541",
        "graph": {
            "node_idx": 5541,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    11,
                    12,
                    13,
                    1,
                    14,
                    4,
                    11,
                    3,
                    15,
                    16,
                    17,
                    18,
                    11,
                    15,
                    17,
                    4,
                    1,
                    14,
                    4,
                    19,
                    11,
                    20,
                    15,
                    18,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    10,
                    27,
                    28,
                    23,
                    24,
                    10,
                    25,
                    29
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                5541,
                13888,
                8919,
                9748,
                12000,
                13899,
                19228,
                9749,
                9765,
                9677,
                12566,
                9750,
                18318,
                19242,
                9751,
                11999,
                13920,
                9752,
                2548,
                13890,
                13898,
                13919,
                9862,
                12565,
                15660,
                14488,
                14487,
                22406,
                18802,
                23697
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: consistency and automation in multi-user rule-based development environmentstechnical report cucs-047-90 31 october 1990 abstract we investigate the scaling up of a class of single-user software development environments, which we call rule-based development environments (rbdes), to support multiple developers cooperating together on a project. rbdes model the software development process in terms of rules that encapsulate activities, and execute forward and backward chaining on the rules to provide assistance in carrying out the development process. there is a spectrum of assistance models, ranging from pure automation to strict consistency preservation. we describe three problems whose solutions are dependent on the choice of assistance model: (1) multiple views; (2) evolution; and (3) concurrency control. we discuss how the two extremes of the spectrum restrict the possible approaches to multiple views and evolution. in order to explore different aspects of the concurrency control problem across multiple points on the spectrum of rbdes, we develop a maximalist assistance model and propose an approach to synchronization of cooperating developers within the context of this model. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_5562",
        "graph": {
            "node_idx": 5562,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                5562
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast probabilistic modeling for combinatorial optimizationprobabilistic models have recently been utilized for the optimization of large combinatorial search problems. however, complex probabilistic models that attempt to capture inter-parameter dependencies can have prohibitive computational costs. the algorithm presented in this paper, termed comit, provides a method for using probabilistic models in conjunction with fast search techniques. we show how comit can be used with two very different fast search algorithms: hillclimbing and population-based incremental learning (pbil). the resulting algorithms maintain many of the benefits of probabilistic modeling, with far less computational expense. extensive empirical results are provided; comit has been successfully applied to jobshop scheduling, traveling salesman, and knapsack problems. this paper also presents a review of probabilistic modeling for combi natorial optimization. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_5566",
        "graph": {
            "node_idx": 5566,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    5,
                    42,
                    43,
                    15,
                    44,
                    10,
                    9,
                    45,
                    44,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                5566,
                10074,
                9926,
                10996,
                6461,
                11327,
                3021,
                5508,
                14616,
                9448,
                22786,
                21095,
                22458,
                14592,
                9925,
                4003,
                19820,
                4202,
                6766,
                14212,
                7553,
                22541,
                17464,
                3931,
                11628,
                1121,
                340,
                20926,
                20935,
                7940,
                6768,
                3232,
                10202,
                429,
                746,
                21559,
                6110,
                6782,
                18497,
                18642,
                6844,
                3126,
                3765,
                9090,
                14615,
                18653
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast approximation algorithms for fractional packing and covering problemsthis paper presents fast algorithms that find approximate solutions for a general class of problems, which we call fractional packing and covering problems. the only previously known algorithms for solving these problems are based on general linear programming techniques. the techniques developed in this paper greatly outperform the general methods in many applications, and are extensions of a method previously applied to find approximate solutions to multicommodity flow problems. our algorithm is a lagrangean relaxation technique; an important aspect of our results is that we obtain a theoretical analysis of the running time of a lagrangean relaxation-based algorithm. we give several applications of our algorithms. the new approach yields several orders of magnitude of improvement over the best previously known running times for algorithms for the scheduling of unrelated parallel machines in both the preemptive and the non-preemptive models, for the job shop problem, for the held & karp bound for the traveling salesman problem, for the cutting-stock problem, for the network embedding problem, and for the minimum-cost multicommodity flow problem. fl technical report orie-999 of the school of operations research and industrial engineering, cornell university \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_5583",
        "graph": {
            "node_idx": 5583,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                5583,
                9020,
                11003
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: tactical-level simulation for intelligent transportation systemsshiva (simulated highways for intelligent vehicle algorithms) is a kinematic simulation of vehicles moving and interacting on a user-defined stretch of roadway. the vehicles can be equipped with simulated human drivers as well as sensors and algorithms for automated control. these algorithms influence the vehicles' motion through simulated commands to the accelerator, brake and steering wheel. shiva's user interface provides facilities for visualizing and influencing the interactions between vehicles. shiva not only models the elements of the domain most useful to tactical driving research but also provides tools to rapidly prototype and test algorithms in challenging traffic situations. additionally, the scenario control tools allow repeatable testing of different reasoning systems on a consistent set of traffic situations. these features are vital in the development and evaluation of intelligent vehicle technology for its applications. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_5585",
        "graph": {
            "node_idx": 5585,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    4,
                    12,
                    13,
                    14,
                    15,
                    16,
                    3,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                5585,
                17219,
                484,
                2531,
                6967,
                16463,
                485,
                317,
                315,
                2092,
                6969,
                316,
                16648,
                17433,
                887,
                18082,
                3165,
                19438,
                19907,
                2997,
                17608,
                5722,
                18391,
                18974,
                19510,
                19518
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning adaptation strategies by introspective reasoning about memory searchin case-based reasoning systems, the case adaptation process is traditionally controlled by static libraries of hand-coded adaptation rules. this paper proposes a method for learning adaptation knowledge in the form of adaptation strategies of the type developed and hand-coded by kass [90] . adaptation strategies differ from standard adaptation rules in that they encode general memory search procedures for finding the information needed during case adaptation; this paper focuses on the issues involved in learning memory search procedures to form the basis of new adaptation strategies. it proposes a method that starts with a small library of abstract adaptation rules and uses introspective reasoning about the system's memory organization to generate the memory search plans needed to apply those rules. the search plans are then packaged with the original abstract rules to form new adaptation strategies for future use. this process allows a cbr system not only to learn about its domain, by storing the results of case adaptation, but also to learn how to apply the cases in its memory more effectively. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_5587",
        "graph": {
            "node_idx": 5587,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3
                ]
            ],
            "node_list": [
                5587,
                9982,
                24751,
                8087,
                19465,
                18981,
                8433
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: promoter: a high-level, object-parallel programming languagethe superior performance and cost-effectiveness of scalable, distributed memory parallel computers will only then become generally exploitable if the programming difficulties with such machines are overcome. we see the ultimate solution in high-level programming models and appropriate parallelizing compilers that allow the user to formulate a parallel program in terms of application-specific concepts, while low-level issues such as optimal data distribution and coordination of the parallel threads are handled by the compiler. high performance fortran (hpf) is a major step in that direction; however, hpf still lacks in the generality of computing domains needed to treat other than regular, data-parallel numerical applications. a more flexible and more abstract programming language for regular and irregular object-parallel applications is promoter. promoter allows the user to program for an application-oriented abstract machine rather than for particular architecture. the wide semantic gap between the abstract machine and the concrete message-passing architecture is closed by the compiler. hence, the issues of data distribution, communication, and coordination (thread scheduling) are hidden from the user. the paper presents the underlying concepts of promoter and the corresponding language concepts. the promoter compiler translates the parallel program written in terms of distributed types into parallel threads and maps those optimally onto the nodes of the physical machine. the language constructs and their use, the tasks of the compiler, and the challenges encountered in its implementation are discussed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_5608",
        "graph": {
            "node_idx": 5608,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                5608,
                17222
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: algorithms for capacitated vehicle routinggiven n identical objects (pegs), placed at arbitrary initial locations, we consider the problem of transporting them efficiently to n target locations (slots) with a vehicle that can carry at most k pegs at a time. this problem is referred to as k-delivery tsp, and it is a generalization of the traveling salesman problem. we give a 5-approximation algorithm for the problem of minimizing the total distance traveled by the vehicle. there are two kinds of transportations possible | one that could drop pegs at intermediate locations and pick them up later in the route for delivery (preemptive) and one that transports pegs to their targets directly (non-preemptive). in the former case, by exploiting the freedom to drop, one may be able to find a shorter delivery route. we construct a non-preemptive tour that is within a factor 5 of the optimal preemptive tour. in addition we show that the ratio of the distances traveled by an optimal non-preemptive tour versus a preemptive tour is bounded by 4. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_5614",
        "graph": {
            "node_idx": 5614,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2,
                    7,
                    3,
                    8,
                    9,
                    10,
                    5,
                    11,
                    3,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                5614,
                17223,
                2797,
                3572,
                18275,
                1697,
                16683,
                10497,
                6000,
                5495,
                19987,
                11112,
                14807,
                5336,
                19988,
                2205,
                5335,
                19581,
                11149,
                19308,
                2998,
                7906
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: planning for contingencies: a decision-based approacha fundamental assumption made by classical ai planners is that there is no uncertainty in the world: the planner has full knowledge of the conditions under which the plan will be executed and the outcome of every action is fully predictable. these planners cannot therefore construct contingency plans, i.e., plans in which different actions are performed in different circumstances. in this paper we discuss some issues that arise in the representation and construction of contingency plans and describe cassandra, a partial-order contingency planner. cassandra uses explicit decision-steps that enable the agent executing the plan to decide which plan branch to follow. the decision-steps in a plan result in subgoals to acquire knowledge, which are planned for in the same way as any other subgoals. cassandra thus distinguishes the process of gathering information from the process of making decisions. the explicit representation of decisions in cassandra allows a coherent approach to the problems of contingent planning, and provides a solid base for extensions such as the use of different decision-making procedures. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_5617",
        "graph": {
            "node_idx": 5617,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                5617,
                17223,
                18229
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: plan-refinement strategies and search-space size refinement planners search space is an and/or graph, and theduring the planning process, a planner may have many options for refinements to perform on the plan being developed. the planners efficiency depends on how it chooses which refinement to do next. recent studies have shown that several versions of the popular least commitment plan refinement strategy are often outperformed by a fewest alternatives first (faf) strategy that chooses to refine the plan element that has the smallest number of alternative refinement options. in this paper, we ex amine the faf strategy in more detail, to try to gain a better understanding of how well it performs and why. we present the following results: the faf heuristic can be computed in constant time, and in our experimental studies it usually produced an optimal or near-optimal serialization. this suggests that using faf (or some similar heuristic) is preferable to trying to guarantee an optimal serialization (which we conjecture is a computationally intractible problem). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_5618",
        "graph": {
            "node_idx": 5618,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    6,
                    1,
                    12,
                    0,
                    4,
                    13,
                    14,
                    15,
                    16,
                    5,
                    6,
                    1,
                    7,
                    17,
                    9,
                    0,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4
                ]
            ],
            "node_list": [
                5618,
                4523,
                1630,
                4522,
                4807,
                16979,
                6929,
                11759,
                17008,
                4859,
                11776,
                16254,
                1266,
                8912,
                8059,
                1772,
                11768,
                11004
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: explanations of empirically derived reactive plansgiven an adequate simulation model of the task environment and payoff function that measures the quality of partially successful plans, competition-based heuristics such as genetic algorithms can develop high performance reactive rules for interesting sequential decision tasks. we have previously described an implemented system, called samuel, for learning reactive plans and have shown that the system can successfully learn rules for a laboratory scale tactical problem. in this paper, we describe a method for deriving explanations to justify the success of such empirically derived rule sets. the method consists of inferring plausible subgoals and then explaining how the reactive rules trigger a sequence of actions (i.e., a stra tegy) to satisfy the subgoals. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_5620",
        "graph": {
            "node_idx": 5620,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    3,
                    3
                ]
            ],
            "node_list": [
                5620,
                17224,
                19018,
                5005,
                20703,
                3634,
                24016
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: representation of spatial orientation by the intrinsic dynamics of the head-direction cell ensemble: a theorythe head-direction (hd) cells found in the limbic system in freely moving rats represent the instantaneous head direction of the animal in the horizontal plane regardless of the location of the animal. the internal direction represented by these cells uses both self-motion information for inertially based updating and familiar visual landmarks for calibration. here, a model of the dynamics of the hd cell ensemble is presented. the stability of a localized static activity profile in the network and a dynamic shift mechanism are explained naturally by synaptic weight distribution components with even and odd symmetry, respectively. under symmetric weights or symmetric reciprocal connections, a stable activity profile close to the known directional tuning curves will emerge. by adding a slight asymmetry to the weights, the activity profile will shift continuously without disturbances to its shape, and the shift speed can be accurately controlled by the strength of the odd-weight component. the generic formulation of the shift mechanism is determined uniquely within the current theoretical framework. the attractor dynamics of the system ensures modality-independence of the internal representation and facilitates the correction for cumulative error by the putative local-view detectors. the model offers a specific one-dimensional example of a computational mechanism in which a truly world-centered representation can be derived from observer-centered sensory inputs by integrating self-motion information. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5624",
        "graph": {
            "node_idx": 5624,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    3,
                    17,
                    18,
                    6,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                5624,
                17227,
                17260,
                17707,
                2188,
                7327,
                8059,
                16607,
                17882,
                18036,
                3296,
                18364,
                5245,
                11484,
                11483,
                11911,
                10175,
                17961,
                5088,
                23037,
                23038
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: classifiers: a theoretical and empirical studythis paper describes how a competitive tree learning algorithm can be derived from first principles. the algorithm approximates the bayesian decision theoretic solution to the learning task. comparative experiments with the algorithm and the several mature ai and statistical families of tree learning algorithms currently in use show the derived bayesian algorithm is consistently as good or better, although sometimes at computational cost. using the same strategy, we can design algorithms for many other supervised and model learning tasks given just a probabilistic representation for the kind of knowledge to be learned. as an illustration, a second learning algorithm is derived for learning bayesian networks from data. implications to incremental learning and the use of multiple models are also discussed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_5633",
        "graph": {
            "node_idx": 5633,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    3,
                    6,
                    7,
                    1,
                    8,
                    2,
                    3,
                    9,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                5633,
                382,
                21019,
                3818,
                5363,
                16458,
                16835,
                15622,
                18156,
                21206
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a construction of a cipher from a single pseudorandom permutationwe suggest a scheme for a block cipher which uses only one randomly chosen permutation, f . the key, consisting of two blocks, k 1 and k 2 is used in the following way: the message block is xored with k 1 before applying f , and the outcome is xored with k 2 , to produce the cryptogram block. we show that the resulting cipher is secure (when the permutation is random or pseudorandom). this removes the need to store, or generate a multitude of permutations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_5635",
        "graph": {
            "node_idx": 5635,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                    7,
                    8,
                    9,
                    3,
                    4,
                    9,
                    0,
                    1,
                    0,
                    10,
                    5,
                    2,
                    11,
                    12,
                    13,
                    14,
                    15,
                    3,
                    16,
                    17,
                    7,
                    18,
                    19,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                5635,
                382,
                11125,
                5634,
                12807,
                350,
                9181,
                16458,
                16835,
                3818,
                10103,
                20351,
                344,
                346,
                347,
                343,
                21017,
                3817,
                3077,
                10380
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: bucket hashing and its application to fast message authenticationwe introduce a new technique for constructing a family of universal hash functions. at its center is a simple metaphor: to hash a string x, cast each of its words into a small number of buckets; xor the contents of each bucket; then collect up all the buckets' contents. used in the context of wegman-carter authentication, this style of hash function provides a fast approach for software message authentication. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_5639",
        "graph": {
            "node_idx": 5639,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                5639,
                20422
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: adaptive control in visual sensing visual sensing problem, beyond any consideration from the computational pointthe work this paper refers to concerns the conferment of learning capabilities to a visual sensing system. in order to describe the way neural structures have been employed to actively control the intrinsic parameters of a ccd sensor, a preface is drawn to introduce the overall underlying framework. then, the obtained results are mentioned and a discussion is made. the visual sensing system dealt with in this paper has been developed in the context of a research 1 aimed at joining robotics and machine learning. in particular, the main overall goal is to enhance a robotic architecture by means of both symbolic and subsymbolic learning capabilities. the application case is concerned with navigation and assembly tasks. the visual system deals with the management of the visual sensorial channel, ranging from the acquisition up to the symbolic description of the perceived scene, in terms of visual primitives. the developed multilevel architecture (fig. a) consists of a chain of four processing modules: the camera, the preprocessor, the edge-extractor, the edgedetector. each one performs a specific data transformation on data received by the lower module. the main problem is here to achieve an optimal regulation of both the physical (ccd camera) and virtual (perona-malik, canny and hough transformations) sensor, respectively associated to each module. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_5654",
        "graph": {
            "node_idx": 5654,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    3,
                    9,
                    2,
                    8,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    3,
                    4,
                    5
                ]
            ],
            "node_list": [
                5654,
                6117,
                17369,
                6118,
                14818,
                13593,
                18278,
                19963,
                22622,
                10980,
                13640
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning parameterized models of image motiona framework for learning parameterized models of optical flow from image sequences is presented. a class of motions is represented by a set of orthogonal basis flow fields that are computed from a training set using principal component analysis. many complex image motions can be represented by a linear combination of a small number of these basis flows. the learned motion models may be used for optical flow estimation and for model-based recognition. for optical flow estimation we describe a robust, multi-resolution scheme for directly computing the parameters of the learned flow models from image derivatives. as examples we consider learning motion discontinuities, non-rigid motion of human mouths, and articulated human motion. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_5659",
        "graph": {
            "node_idx": 5659,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                5659,
                17233,
                13684,
                21677,
                14486,
                14501
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: formalization and application of a unifying model for name managementcmpsci technical report 95-60 july 1995 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_5663",
        "graph": {
            "node_idx": 5663,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                5663,
                19153,
                5662,
                20147,
                8842,
                9655,
                1322,
                21591,
                25021,
                21541,
                8602,
                7463,
                22625
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 3d human body model acquisition from multiple viewswe present a novel motion-based approach for the part determination and shape estimation of a human's body parts. the novelty of the technique is that neither a prior model of the human body is employed nor prior body part segmentation is assumed. we present a human body part identification strategy (hbpis) that recovers all the body parts of a moving human based on the spatiotemporal analysis of its deforming silhouette. we formalize the process of simultaneous part determination, and 2d shape estimation by employing the supervisory control theory of discrete event systems. in addition, in order to acquire the 3d shape of the body parts, we present a new algorithm which selectively integrates the (segmented by the hbpis) apparent contours, from three mutually orthogonal views. the effectiveness of the approach is demonstrated through a series of experiments, where a subject performs a set of movements according to a protocol that reveals the structure of the human body. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_5681",
        "graph": {
            "node_idx": 5681,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                5681,
                2569,
                11766,
                23009,
                4267,
                17803,
                3271,
                5553,
                2133,
                1234,
                1716,
                2556,
                2555,
                23658,
                8059,
                9310,
                20874,
                22100
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning by error-driven decompositionin this paper we describe a new selforganizing decomposition technique for learning high-dimensional mappings. problem decomposition is performed in an error-driven manner, such that the resulting subtasks (patches) are equally well approximated. our method combines an unsupervised learning scheme (feature maps [koh84]) with a nonlinear approximator (backpropagation [rhw86]). the resulting learning system is more stable and effective in changing environments than plain backpropagation and much more powerful than extended feature maps as proposed by [rs88, rms89]. extensions of our method give rise to active exploration strategies for autonomous agents facing unknown environments. the appropriateness of our general purpose method will be demonstrated with an ex ample from mathematical function approximation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_5694",
        "graph": {
            "node_idx": 5694,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                5694,
                6075,
                24822,
                66,
                21834,
                9361,
                5554,
                5553
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: becoming increasingly reactive it must become increasingly correct at predictingexperience, the agent becomes increasingly reactiveaugmenting its reactive component whenever it is forced to plan. when used to control a laboratory mobile robot, the we describe a robot control architecture which theo-agent in simple cases learns to reduce its reaction combines a stimulus-response subsystem for rapid time for new tasks from several minutes to less than a reaction, with a search-based planner for handling second. unanticipated situations. the robot agent continually the research reported here is part of our larger effort chooses which action it is to perform, using the stimulus- toward developing a general-purpose learning robot response subsystem when possible, and falling back on the architecture, and builds on earlier work described in planning subsystem when necessary. whenever it is [blythe and mitchell 89]. we believe that in order to forced to plan, it applies an explanation-based learning become increasingly successful, a learning robot will have mechanism to formulate a new stimulus-response rule to situations. this theo-agent architecture is described, and the time required for it to make rational choices; results are presented demonstrating its ability to reduce that is, the time required to choose actions routine reaction time for a simple mobile robot from consistent with the above predictions and its goals. minutes to under a second. it must become increasingly perceptive at distinguishing those features of its world that impact its success. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_5708",
        "graph": {
            "node_idx": 5708,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                5708,
                17247
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the weighted majority algorithmfl this research was primarily conducted while this author was at the university of calif. at santa cruz with support from onr grant n00014-86-k-0454, and at harvard university, supported by onr grant n00014-85-k-0445 and darpa grant afosr-89-0506. current address: nec research institute, 4 independence way, princeton, nj 08540. e-mail address: nickl@research.nj.nec.com. y supported by onr grants n00014-86-k-0454 and n00014-91-j-1162. part of this research was done while this author was on sabbatical at aiken computation laboratory, harvard, with partial support from the onr grants n00014-85-k-0445 and n00014-86-k-0454. address: department of computer science, university of california at santa cruz. e-mail address: manfred@cs.ucsc.edu. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5738",
        "graph": {
            "node_idx": 5738,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    0,
                    5,
                    6,
                    3,
                    1,
                    7,
                    8,
                    9,
                    1,
                    0,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                5738,
                3843,
                5739,
                8927,
                4656,
                18520,
                18953,
                20284,
                5132,
                22154
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: creating abstractions using relevance reasoningreasoning with multiple levels of abstraction is a powerful method of controlling problem solving in complex domains. we consider the problem of simplifying a knowledge base by creating an abstraction that is tailored for a given set of queries. our approach is based on associating formally an abstraction with some irrelevant detail that is removed from the knowledge base. we show how creating an abstraction and determining its utility amounts to automatically deciding which aspects of a representation are irrelevant to a query. as a result, we derive a general algorithm schema for automatically generating abstractions for a query. as an instance of the schema, we describe a novel algorithm for automatically abstracting a kb by projecting out relation arguments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_5753",
        "graph": {
            "node_idx": 5753,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                5753,
                11961,
                8059
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolution of a tristate frequency discriminator for the source identification problem using genetic programming sautomated synthesis of analog electronic circuits is recognized as a difficult problem. genetic programming was used to evolve b o t h the topology and the sizing ( n u m e r i c a l v a l u e s ) f o r e a c h component of a circuit that can perform source identification by correctly cl assify an incoming signal into categories. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_5767",
        "graph": {
            "node_idx": 5767,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                5767,
                7522,
                7524,
                3698,
                1768,
                24621,
                24686,
                2415
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: accurate insertion strategies using simple optical sensorspeg-in-hole insertion is not only a longstanding problem in robotics but the most common automated mechanical assembly task [10]. in this paper we present a high precision, self-calibrating peg-in-hole insertion strategy using several very simple, inexpensive, and accurate optical sensors. the self-calibrating feature allows us to achieve successful dead-reckoning insertions with tolerances of 25 microns without any accurate initial position information for the robot, pegs, or holes. the program we implemented works for any cylindrical peg, and the sensing steps do not depend on the peg diameter, which the program does not know. the key to the strategy is the use of a fixed sensor to localize both a mobile sensor and the peg, while the mobile sensor localizes the hole. our strategy is extremely fast, localizing pegs as they are en route to their insertion location without pausing. the result is that insertion times are dominated by the transport time between pick and place operations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_5782",
        "graph": {
            "node_idx": 5782,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    7,
                    1,
                    14,
                    15,
                    8,
                    16,
                    17,
                    18,
                    11,
                    1,
                    19,
                    3,
                    20,
                    21,
                    22,
                    23,
                    6,
                    11,
                    24,
                    25
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                5782,
                1673,
                3152,
                5781,
                694,
                15372,
                2878,
                1674,
                1675,
                15522,
                23214,
                14420,
                8571,
                5780,
                10688,
                9257,
                7267,
                3307,
                23216,
                16716,
                10370,
                16473,
                9834,
                692,
                17855,
                17321
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning limited dependence bayesian classifierswe present a framework for characterizing bayesian classification methods. this framework can be thought of as a spectrum of allowable dependence in a given probabilistic model with the naive bayes algorithm at the most restrictive end and the learning of full bayesian networks at the most general extreme. while much work has been carried out along the two ends of this spectrum, there has been surprising little done along the middle. we analyze the assumptions made as one moves along this spectrum and show the tradeoffs between model accuracy and learning speed which become critical to consider in a variety of data mining domains. we then present a general induction algorithm that allows for traversal of this spectrum depending on the available computational power for carrying out induction and show its application in a number of domains with different properties. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_5803",
        "graph": {
            "node_idx": 5803,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    4,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                5803,
                17269,
                3145,
                3000,
                22908,
                2191,
                1370,
                3146,
                24452,
                1521,
                2689,
                17814,
                18852,
                7688,
                7617,
                20489,
                16607,
                15172,
                3307,
                9153,
                7499,
                1237,
                2193,
                15323,
                17577
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: off-line reasoning for on-line efficiency: knowledge basesthe complexity of reasoning is a fundamental issue in ai. in many cases, the fact that an intelligent system needs to perform reasoning on-line contributes to the difficulty of this reasoning. this paper considers the case in which an intelligent system computes whether a query is entailed by the system's knowledge base. it investigates how an initial phase of off-line preprocessing and design can improve the on-line complexity considerably. the notion of an efficient basis for a query language is presented, and it is shown that off-line preprocessing can be very effective for query languages that have an efficient basis. the usefulness of this notion is illustrated by showing that a fairly expressive language has an efficient basis. a dual notion of an efficient disjunctive basis for a knowledge base is introduced, and it is shown that off-line preprocessing is worthwhile for knowledge bases that have an efficient disjunctive basis. fl part of the material presented in this paper appears in the proceedings of ijcai-93 [9]. y this work was supported in part by a grant from the us-israel binational science foundation. the first author was supported by a helen and milton a. kimmelman career development chair. the second author was supported in part by an eshkol fellowship of the israeli ministry of science and technology, and later by the air force office of scientific research. part of the research was carried out while the second author was in the department of applied mathematics and computer science in the weizmann institute of science, and part while he was in the computer science department at stanford university. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_5830",
        "graph": {
            "node_idx": 5830,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                5830,
                5320,
                5910,
                18650,
                8594,
                1441,
                7589
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: enhanced reality visualization in a surgical environmentenhanced reality visualization is the process of enhancing an image by adding to it information which is not present in the original image. a wide variety of information can be added to an image ranging from hidden lines or surfaces to textual or iconic data about a particular part of the image. enhanced reality visualization is particularly well suited to neurosurgery. by rendering brain structures which are not visible, at the correct location in an image of a patient's head, the surgeon is essentially provided with x-ray vision. he can visualize the spatial relationship between brain structures before he performs a craniotomy and during the surgery he can see what's under the next layer before he cuts through. given a video image of the patient and a three dimensional model of the patient's brain, the problem enhanced reality visualization faces is to render the model from the correct viewpoint and overlay it on the original image. the relationship between the coordinate frames of the patient, the patient's internal anatomy scans and the image plane of the camera observing the patient must be established. this problem is closely related to the camera calibration problem. this report presents a new approach to finding this relationship and develops a system for performing enhanced reality visualization in a surgical environment. immediately prior to surgery a few circular fiducials are placed near the surgical site. an initial registration of video and internal data is performed using a laser scanner. following this, our method is fully automatic, runs in nearly real-time, is accurate to within a pixel, allows both patient and camera motion, automatically corrects for changes to the internal camera parameters (focal length, focus, aperture, etc.) and requires only a single image. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_5855",
        "graph": {
            "node_idx": 5855,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4
                ]
            ],
            "node_list": [
                5855,
                17290,
                9305,
                7837,
                6450,
                23540,
                6449,
                18974,
                17879,
                19147,
                17463,
                23279
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: design of a case-based reasoning system applied to neuropathy diagnosisthe goal of our work is to develop a computer assisted medical diagnosis system in the field of neuropathy (peripheral nervous system diseases). we believe that an efficient medical diagnosis system must integrate the divers reasoning capacities of physicians : logical, deductive, uncertain, and analogical reasoning. a neuropathy diagnosis system based on production rules, called neurop, has already been developed in our laboratory. however, neurop is poorly adapted to treat uncertain data or unusual cases. in this paper, we propose integration of a new module of analogical reasoning to compensate the drawbacks presented by neurop. the idea is to memorise real treated cases and to construct what we call a memory of prototype cases. this memory is then used during retrieval phase. a learning phase is added to optimise the system reaction and to prevent future diagnostic failures. this is achieved by modifying the contents of the prototype memory. three principal types of modifications are offered. they are : prototype construction, prototype specialisation and prototype fusion. the proposed reasoning system is planned to function in conjunction with another reasoning system (that could be a human expert) which supervises results and activates the learning mechanisms in case of failure. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_5856",
        "graph": {
            "node_idx": 5856,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    11,
                    12,
                    13,
                    14,
                    15,
                    6,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    9
                ]
            ],
            "node_list": [
                5856,
                1007,
                5313,
                24362,
                24442,
                1520,
                24878,
                20200,
                20889,
                12823,
                23869,
                6755,
                1952,
                1008,
                16774,
                920,
                6541,
                20982,
                5306,
                5335,
                5336,
                2130,
                20365,
                2081,
                3146,
                1371,
                3474,
                1370,
                2076,
                924,
                18302,
                2536,
                9718,
                16045,
                12361
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: provably bounded-optimal agentssince its inception, artificial intelligence has relied upon a theoretical foundation cen-tred around perfect rationality as the desired property of intelligent systems. we argue, as others have done, that this foundation is inadequate because it imposes fundamentally unsatisfiable requirements. as a result, there has arisen a wide gap between theory and practice in ai, hindering progress in the field. we propose instead a property called bounded optimality. roughly speaking, an agent is bounded-optimal if its program is a solution to the constrained optimization problem presented by its architecture and the task environment. we show how to construct agents with this property for a simple class of machine architectures in a broad class of real-time environments. we illustrate these results using a simple model of an automated mail sorting facility. we also define a weaker property, asymptotic bounded optimality (abo), that generalizes the notion of optimality in classical complexity theory. we then construct universal abo programs, i.e., programs that are abo no matter what real-time constraints are applied. universal abo programs can be used as building blocks for more complex systems. we conclude with a discussion of the prospects for bounded optimality as a theoretical basis for ai, and relate it to similar trends in philosophy, economics, and game theory. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_5864",
        "graph": {
            "node_idx": 5864,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    3,
                    3
                ]
            ],
            "node_list": [
                5864,
                17293,
                17659,
                9970,
                24814,
                18970,
                5189
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the representation problem in reverse engineeringbuilding models to understand software systems is an important part of reverse engineering. formal and explicit model building is important because it focuses attention on modeling as an aid to understanding and results in artifacts that may be useful to others. the representation used to build models has great influence over the success and value of the result. choosing the proper representation during reverse engineering is the representation problem. this paper examines the representation problem by presenting a taxonomy of solutions. it also illustrates the issues involved in choosing a representation through an example reverse engineering task. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_5870",
        "graph": {
            "node_idx": 5870,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    2,
                    5,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                5870,
                3212,
                10284,
                24182,
                17251,
                19655
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: finding overlapping distributions with mmlthis paper considers an aspect of mixture modelling. significantly overlapping distributions require more data for their parameters to be accurately estimated than well separated distributions. for example, two gaussian distributions are considered to significantly overlap when their means are within three standard deviations of each other. if insufficient data is available, only a single component distribution will be estimated, although the data originates from two component distributions. we consider how much data is required to distinguish two component distributions from one distribution in mixture modelling using the minimum message length (mml) criterion. first, we perform experiments which show the mml criterion performs well relative to other bayesian criteria. second, we make two improvements to the existing mml estimates, that improve its performance with overlapping distributions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_5880",
        "graph": {
            "node_idx": 5880,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    3,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                5880,
                2319,
                10092,
                6967,
                3606,
                4874,
                6447,
                17608,
                5722,
                18391,
                18974,
                19510,
                19518,
                6969
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: model-based learning of structural indices to design casesa major issue in case-basedsystems is retrieving the appropriate cases from memory to solve a given problem. this implies that a case should be indexed appropriately when stored in memory. a case-based system, being dynamic in that it stores cases for reuse, needs to learn indices for the new knowledge as the system designers cannot envision that knowledge. irrespective of the type of indexing (structural or functional), a hierarchical organization of the case memory raises two distinct but related issues in index learning: learning the indexing vocabulary and learning the right level of generalization. in this paper we show how structure-behavior-function (sbf) models help in learning structural indices to design cases in the domain of physical devices. the sbf model of a design provides the functional and causal explanation of how the structure of the design delivers its function. we describe how the sbf model of a design provides both the vocabulary for structural indexing of design cases and the inductive biases for index generalization. we further discuss how model-based learning can be integrated with similarity-based learning (that uses prior design cases) for learning the level of index generalization. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_5892",
        "graph": {
            "node_idx": 5892,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    8,
                    9,
                    35,
                    36,
                    37,
                    38
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    10
                ]
            ],
            "node_list": [
                5892,
                1840,
                21201,
                21295,
                21296,
                3178,
                11872,
                22011,
                8361,
                15745,
                16083,
                18127,
                9174,
                23565,
                1430,
                11030,
                18392,
                15232,
                6560,
                22032,
                9461,
                8845,
                12211,
                17541,
                4870,
                24660,
                22484,
                8508,
                13979,
                17371,
                8507,
                4941,
                12498,
                15741,
                15761,
                23467,
                15747,
                23453,
                23758
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: tcp and explicit congestion notificationthis paper discusses the use of explicit congestion notification (ecn) mechanisms in the tcp/ip protocol. the first part proposes new guidelines for tcp's response to ecn mechanisms (e.g., source quench packets, ecn fields in packet headers). next, using simulations, we explore the benefits and drawbacks of ecn in tcp/ip networks. our simulations use red gateways modified to set an ecn bit in the ip packet header as an indication of congestion, with reno-style tcp modified to respond to ecn as well as to packet drops as indications of congestion. the simulations show that one advantage of ecn mechanisms is in avoiding unnecessary packet drops, and therefore avoiding unnecessary delay for packets from low-bandwidth delay-sensitive tcp connections. a second advantage of ecn mechanisms is in networks (generally lans) where the effectiveness of tcp retransmit timers is limited by the coarse granularity of the tcp clock. the paper also discusses some implementation issues concerning specific ecn mechanisms in tcp/ip networks. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_5896",
        "graph": {
            "node_idx": 5896,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    3,
                    14,
                    15,
                    2,
                    16,
                    9,
                    1,
                    17,
                    18,
                    19,
                    5,
                    20,
                    4,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    7,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    10,
                    10
                ]
            ],
            "node_list": [
                5896,
                3690,
                17302,
                4280,
                19882,
                6528,
                12621,
                15535,
                3465,
                23255,
                3570,
                7428,
                14755,
                8353,
                24894,
                21092,
                5897,
                8178,
                20044,
                22559,
                7427,
                3100,
                13706,
                12385,
                21695,
                212,
                20910,
                16771,
                6864,
                24355,
                24425,
                15567,
                6445,
                2262,
                23736
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: interfaces and specifications for the smalltalk-80 collection classesthe hierarchy of interfaces implicit in the smalltalk-80 collection class library is computed and analyzed. the interface hierarchy is in dependent of the inheritance hierarchy because methods are frequently deleted by subclasses, and because unrelated classes sometimes implement the same messages. specifications of the interfaces are developed, revealing subtle relationships among messages and their methods. the specifications help identify several kinds of problems in the li brary: inherited methods that violate the subclass invariant; methods that have the same name but unrelated behaviors; methods that have the same (or related) behavior but different names. this exercise demonstrates the utility of inter faces and specifications, and suggests improvements to the collection class library structure. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_5900",
        "graph": {
            "node_idx": 5900,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                5900,
                17304,
                17933
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the impact of interprocedural class analysis on optimizationthe runtime performance of object-oriented languages often suffers due to the overhead of dynamic dispatching. in order to make these languages competitive with traditional languages, optimizing compilers attempt to eliminate as many of the dynamic dispatches as possible. a variety of local and intraprocedural techniques have been developed to do this, but they can be ineffective when they are unable to statically bind and inline a message send. to enable better analysis across non-inlined message sends, interprocedural analysis is required. in this paper we describe a simple algorithm for interprocedural class analysis and empirically evaluate its effectiveness as a tool for program optimization. we demonstrate that interprocedural class analysis can substantially decrease application execution times when compared to applications optimized with only intraprocedural techniques. * \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_5905",
        "graph": {
            "node_idx": 5905,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    13,
                    14,
                    28,
                    3,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    28,
                    43,
                    21,
                    8,
                    22,
                    44,
                    45
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    8,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                5905,
                13603,
                18068,
                7006,
                9653,
                7378,
                850,
                13610,
                6384,
                8104,
                13599,
                21595,
                9692,
                6467,
                7683,
                19153,
                21579,
                10360,
                10409,
                8471,
                13495,
                21598,
                8602,
                13589,
                7463,
                22625,
                14818,
                13593,
                13578,
                21602,
                8154,
                17198,
                18950,
                9716,
                2625,
                16992,
                17988,
                18723,
                8664,
                16124,
                3859,
                17441,
                13575,
                13583,
                13592,
                13606
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: for visual behaviors, cvpr-94 a novel environment for situated vision and behaviorm.i.t. media laboratory perceptual computing technical report no. 261 abstract we present a new environment for the development of situated vision and behavior algorithms. our environment allows an unencumbered person to interact with autonomous agents in a simulated graphical world, though the use of situated vision techniques. an image of the participant is composited together with the graphical world and projected onto a large screen in front of the participant. no goggles, gloves, or wires are needed; agents and objects in the graphical world can be acted upon by the human participant through the use of domain-specific computer vision techniques that analyze the image of the person. the agents inhabiting the world are modeled as autonomous behaving entities which have their own sensors and goals and which can interpret the actions of the participant and react to them in real-time. we have demonstrated and tested our system with two prototypical worlds and describe the results obtained with over 500 people. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_5908",
        "graph": {
            "node_idx": 5908,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    5,
                    6,
                    7,
                    4,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                5908,
                5910,
                4519,
                18122,
                18704,
                13332,
                5410,
                18015,
                18619,
                12399,
                19985,
                1659,
                8379,
                8938
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: complete scene structure from four point correspondencesa new technique is presented for computing 3d scene structure from point and line features in monocular image sequences. unlike previous methods, the technique guarantees the completeness of the recovered scene, ensuring that every scene feature that is detected in each image is reconstructed. the approach relies on the presence of four or more reference features whose correspondences are known in all the images. under an orthographic or affine camera model, the parallax of the reference features provides constraints that simplify the recovery of the rest of the visible scene. an efficient recursive algorithm is described that uses a unified framework for point and line features. the algorithm integrates the tasks of feature correspondence and structure recovery, ensuring that all reconstructible features are tracked. in addition, the algorithm is immune to outliers and feature-drift, two weaknesses of existing structure-from-motion techniques. experimental results are presented for real images. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_5925",
        "graph": {
            "node_idx": 5925,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    12,
                    4,
                    13,
                    14,
                    15,
                    5,
                    3,
                    16,
                    4,
                    17,
                    18,
                    19,
                    6,
                    20,
                    15,
                    4,
                    16,
                    4,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                5925,
                17313,
                299,
                17941,
                216,
                13365,
                21518,
                13363,
                16958,
                17213,
                7827,
                300,
                16541,
                5926,
                21399,
                15158,
                13366,
                8024,
                14175,
                13377,
                15159
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a new rounding procedure for the assignment problem with applications to dense graph arrangement problemswe present approximation schemes for \"dense\" instances of many well-known np-hard problems, including 0-1 quadratic-assignment, (an optimization formulation of) graph-isomorphism, min-cut-linear-arrangement, max-acyclic-subgraph, betweenness, and min-linear-arrangment. (a \"dense\" graph is one in which the number of edges is (n 2 ); denseness for the other problems is defined in an analogous way.) some of our approximation schemes run in n o(log n=* 2 ) time; others run in n o(1=* 2 ) time. of independent interest is our randomized procedure for rounding fractional solutions of linear programs that represent the assignment problem subject to linear constraints. this extends the well-known lp rounding procedure of raghavan and thompson, and also solves an open problem of luby and nisan (\"design an nc procedure for converting near-optimum fractional matchings to near-optimum matchings.\") \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_5936",
        "graph": {
            "node_idx": 5936,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                5936,
                17317,
                17560,
                18232,
                18868,
                18930,
                19268,
                19840,
                2851,
                10908,
                11038,
                1417,
                19589,
                19852,
                19165,
                18810,
                20535,
                8700,
                2853
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: design of a gigabit atm switchthis report describes the design and implementation of a gigabit atm switching system supporting link rates from 150 mb/s to 2.4 gb/s, with a uniquely efficient multicast switch architecture that enables the construction of systems with essentially constant per port costs for configurations ranging from 8 to 4096 ports and system capacities approaching 10 tb/s. the system design supports many-to-one and many-to-many forms of multicast, in addition to the usual one-to-many. it also provides multicast virtual paths, constant time configuration of multicast connections and an efficient packet-level discard method, that can achieve 100% link efficiencies, without large buffers. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_5967",
        "graph": {
            "node_idx": 5967,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    0,
                    10,
                    11,
                    12,
                    13,
                    14,
                    0,
                    15,
                    0,
                    5,
                    16,
                    17,
                    18,
                    19,
                    15,
                    20,
                    5,
                    21,
                    7,
                    22,
                    23,
                    24,
                    23,
                    0,
                    25,
                    21,
                    26,
                    8,
                    22,
                    24
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    9
                ]
            ],
            "node_list": [
                5967,
                4803,
                11951,
                11968,
                7293,
                11950,
                11967,
                11970,
                20458,
                10441,
                9094,
                4981,
                11040,
                6041,
                20331,
                4980,
                7131,
                18400,
                8059,
                11298,
                11969,
                11971,
                20459,
                20464,
                20456,
                11966,
                25049
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolving data structures with genetic programming them, pareto selection, \"good software engineering practice\" and partitioningit is established good software engineering practice to ensure that programs use memory via abstract data structures such as stacks, queues and lists. these provide an interface between the program and memory, freeing the program of memory management details which are left to the data structures to implement. the main result presented herein is that gp can automatically generate stacks and queues. typically abstract data structures support multiple operations, such as put and get. we show that gp can simultaneously evolve all the operations of a data structure by implementing each such operation with its own independent program tree. that is, the chromosome consists of a fixed number of independent program trees. moreover, crossover only mixes genetic material of program trees that implement the same operation. program trees interact with each other only via shared memory and shared \"automatically defined functions\" (adfs). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_5977",
        "graph": {
            "node_idx": 5977,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                5977,
                10624,
                18748,
                5978,
                5979
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: coding based replication schemes for distributed systemsdata is often replicated in distributed systems to improve availability and performance. this replication is expensive in terms of disk storage since the existing schemes generally require full files to be stored at each site. in this paper, we present schemes which significantly reduce the storage requirements in replication based systems. these schemes use the coding method suggested by rabin to store replicated data. the first scheme that we present is a modification of the simple voting algorithm and its quorum requirements. we then show how some of the extensions of the voting algorithm can also be modified to get storage efficient schemes for managing such replication. we evaluate the availability offered by these schemes and show that the storage space required to achieve certain availability are significantly lower than the conventional schemes with full file replication. since coding is used, these schemes also provide a high degree of data security. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_5989",
        "graph": {
            "node_idx": 5989,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                5989,
                8071,
                17968,
                18856
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: kritik: an early case-based design systemin the late 1980s, we developed one of the early case-based design systems called kritik. kritik autonomously generated preliminary (conceptual, qualitative) designs for physical devices by retrieving and adapting past designs stored in its case memory. each case in the system had an associated structure-behavior-function (sbf) device model that explained how the structure of the device accomplished its functions. these casespecific device models guided the process of modifying a past design to meet the functional specification of a new design problem. the device models also enabled verification of the design modifications. kritik2 is a new and more complete implementation of kritik. in this paper, we take a retrospective view on kritik. in early papers, we had described kritik as integrating case-based and model-based reasoning. in this integration, kritik also grounds the computational process of case-based reasoning in the sbf content theory of device comprehension. the sbf models not only provide methods for many specific tasks in case-based design such as design adaptation and verification, but they also provide the vocabulary for the whole process of case-based design, from retrieval of old cases to storage of new ones. this grounding, we believe, is essential for building well-constrained theories of case-based design. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_5991",
        "graph": {
            "node_idx": 5991,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    8,
                    5,
                    6,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    4,
                    19,
                    20,
                    21,
                    22,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                5991,
                3819,
                18863,
                18892,
                1598,
                5731,
                2898,
                8759,
                19992,
                1595,
                1606,
                5921,
                17817,
                2899,
                18661,
                10400,
                7266,
                3820,
                16057,
                1601,
                826,
                19302,
                19838
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: read-once threshold formulas, justifying assignments, and generic tranformationswe present a membership query (i.e. interpolation) algorithm for exactly identifying the class of read-once formulas over the basis of boolean threshold functions. using a generic transformation from [angluin, hellerstein, karpin-ski 89], this gives an algorithm using membership and equivalence queries for exactly identifying the class of read-once formulas over the basis of boolean threshold functions and negation. we also present a a series of generic transformations that can be used to convert an algorithm in one learning model into an algorithm in a different model. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_5997",
        "graph": {
            "node_idx": 5997,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                5997
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiresolution gmrf models for image segmentation markov random field (mrf) models, because of the locala multiresolution model for gauss markov random fields (gmrf) with application to texture segmentation is presented. coarser resolution sample fields are obtained by subsampling the sample field at the fine resolution. although the markov property is lost under such resolution transformation, coarse resolution non-markov random fields can be effectively approximated by markov fields. we present a local conditional distribution invariance approximation to estimate the gmrf parameters at coarser resolutions from the fine resolution parameters. our experiments with synthetic, brodatz texture and real satellite images show that this multiresolution technique results in a better segmentation and requires lesser computation than the single resolution algorithm. there has been an increasing emphasis on using statistical techniques for modeling and analyzing images. typical image processing problems have the following aspects to be dealt with: the identification of an appropriate model that reflects the prior beliefs and knowledge about the family of images that are to be analyzed, the selection of a proper observation model that reflects the nature of the transformations these images undergo during observation, and the selection of a suitable error criterion to be optimized. for many image processing problems, such as image enhancement, image restoration, texture identification and segmentation, prior and observation models and error criteria can be very efficiently selected in a statistical framework. using statistical models in a bayesian framework enables posing many image processing problems as statistical inference problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_6003",
        "graph": {
            "node_idx": 6003,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                6003,
                17334
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: extensibility in local sensor based planning for hyper-redundant manipulators (robot snakes)this paper extends a local sensor based planning method for hyper-redundant robot mechanisms. in a previous paper, sensor feedback control methods are considered. a highly localized sensor feedback method for hyper-redundant manipulators is termed, partial shape modification (psm). a psm utilizes a mechanism's hyper-redundancy to enable both local obstacle avoidance and end-effector placement in real time. this paper considers the situation in which the limits of a psm is violated. in other words, what does the robot do when it can not only locally adapt to the environment. local sensor based planning has been implemented on a thirty degree of freedom hyper-redundant manipulator which has eleven ultrasonic distance measurement sensors and twenty infrared proximity sensors. the robot is controlled by a real time control computer which communicates with sensors through an innovative sensor bus architecture. experimental results obtained using this test bed show the efficacy of the proposed method. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_6024",
        "graph": {
            "node_idx": 6024,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    2,
                    13,
                    14,
                    5,
                    15,
                    2,
                    4,
                    16,
                    5,
                    6,
                    7,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    4,
                    5,
                    28,
                    29,
                    4,
                    6,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                6024,
                4249,
                10866,
                11719,
                3612,
                23928,
                15134,
                7510,
                12641,
                12970,
                14348,
                11721,
                12184,
                15197,
                15192,
                6738,
                22935,
                20288,
                4094,
                17984,
                21175,
                21177,
                14632,
                23748,
                12709,
                17635,
                7003,
                2146,
                8150,
                12814
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: recovering guaranteed performance service connections from single and multiple faultsfault recovery techniques must be reexamined in the light of the new guaranteed performance services that networks will support. we investigate the rerouting of guaranteed performance service connections on the occurrence of link faults, focussing on the aspects of route selection and establishment in the network. in a previous investigation, we explored some components of rerouting in the presence of single link faults in the network. in this paper we study the behavior of our techniques in the presence of multiple link faults in the network, and also examine the technique of retries to improve the success of rerouting. our schemes are simulated on a cross-section of network work-loads, and compared using the criteria of the fraction of the affected traffic that could be rerouted, the time to reroute and the amount of resources consumed in the network. a novel metric, the queueing delay load index, which captures both the bandwidth and delay demands made on the network by a connection, is used to present and analyze the results. hhhhhhhhhhhhhhhhhh this research was supported by the national science foundation and the defense advanced research projects agency (darpa) under cooperative agreement ncr-8919038 with the corporation for national research initiatives, by at&t bell laboratories, hitachi, ltd., hitachi america, ltd., pacific bell, the university of california under a micro grant, and the international computer science institute. the views and conclusions contained in this document are those of the authors, and should not be interpreted as representing official policies, either expressed or implied, of the u.s. government or any of the sponsoring organizations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_6034",
        "graph": {
            "node_idx": 6034,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    3,
                    3
                ]
            ],
            "node_list": [
                6034,
                17055,
                24575,
                9746,
                19970,
                23713
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: interface co-synthesis techniques for embedded systemsa key aspect of the synthesis of embedded systems is the automatic integration of system components. this entails the derivation of both the hardware and software interfaces that will bind these elements together and permit them to communicate correctly and efficiently. without the automatic synthesis of these interfaces, designers are not able to fully simulate and evaluate their systems. frequently, they are discouraged from exploring the design space of different hardware/software partitions because practical concerns mandate minimizing changes late in the design cycle, thus leading to more costly implementations than necessary. this paper presents a set of techniques that form the basis of a comprehensive solution to the synthesis of hardware/software interfaces. software drivers and glue logic are generated to connect processors to peripheral devices, hardware co-processors, or communication interfaces while meeting bandwidth and performance requirements. we use as examples a set of devices that communicate over an infrared local communications network (highlighting a video wrist-watch display) to explain our techniques and the need for design space exploration tools for embedded systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_6041",
        "graph": {
            "node_idx": 6041,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7,
                    8,
                    9,
                    7,
                    10,
                    4,
                    8,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                6041,
                4981,
                11040,
                20462,
                11950,
                17059,
                11808,
                4980,
                11971,
                19855,
                11969,
                11970,
                20459,
                20464
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: complexity drift in evolutionary computation with tree representationsone serious problem of standard genetic programming (gp) is that evolved expressions appear to drift towards large and slow forms on average. this report presents a novel analysis of the role played by variable complexity in the selection and survival of gp expressions. it defines a particular property of gp representations, called rooted tree-schema, that sheds light on the role of variable complexity of evolved representations. a tree-schema is a relation on the space of tree-shaped structures which provides a quantifiable partitioning of the search space. the present analysis answers questions such as: what role does variable complexity play in the selection and survival of evolved expressions? what is the influence of a parsimony penalty? how heavy should parsimony penalty be weighted or how should it be adapted in order to preserve the underlying optimization process? are there alternative approaches to simulating a parsimony penalty that do not result in a change of the fitness landscape? the present report provides theoretical answers to these questions, interpretation of these results, and an experimental perspective. this material is based upon work supported by the national science foundation under grant numbers iri-9406481 and cda-9491142, and by the national institutes of health under grant number 1 p41 rr09283. any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of these agencies. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_6042",
        "graph": {
            "node_idx": 6042,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    9,
                    10,
                    11,
                    12,
                    1,
                    2,
                    5,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4
                ]
            ],
            "node_list": [
                6042,
                4981,
                11040,
                6041,
                11972,
                20462,
                25063,
                20563,
                17059,
                11808,
                4980,
                11971,
                19855,
                11950,
                20458
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: generality versus size in genetic programminggenetic programming (gp) uses variable size representations as programs. size becomes an important and interesting emergent property of the structures evolved by gp. the size of programs can be both a controlling and a controlled factor in gp search. size influences the efficiency of the search process and is related to the generality of solutions. this paper analyzes the size and generality issues in standard gp and gp using subroutines and addresses the question whether such an analysis can help control the search process. we relate the size, generalization and modularity issues for programs evolved to control an agent in a dynamic and non-deterministic environment, as exemplified by the pac-man game. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_6060",
        "graph": {
            "node_idx": 6060,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    9,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    15,
                    41,
                    42,
                    43,
                    44,
                    45,
                    12,
                    46
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                6060,
                514,
                2904,
                3627,
                8621,
                506,
                18897,
                6706,
                511,
                3197,
                17303,
                505,
                6812,
                5245,
                13822,
                2189,
                8064,
                16952,
                24213,
                10202,
                4644,
                746,
                7828,
                19503,
                8716,
                6645,
                914,
                3481,
                18182,
                18391,
                3628,
                11411,
                10151,
                20647,
                502,
                6883,
                9435,
                24868,
                10175,
                7855,
                24811,
                1518,
                5945,
                18364,
                20523,
                8969,
                17364
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: induction of one-level decision treesin recent years, researchers have made considerable progress on the worst-case analysis of inductive learning tasks, but for theoretical results to have impact on practice, they must deal with the average case. in this paper we present an average-case analysis of a simple algorithm that induces one-level decision trees for concepts defined by a single relevant attribute. given knowledge about the number of training instances, the number of irrelevant attributes, the amount of class and attribute noise, and the class and attribute distributions, we derive the expected classification accuracy over the entire instance space. we then examine the predictions of this analysis for different settings of these domain parameters, comparing them to exper imental results to check our reasoning. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_6064",
        "graph": {
            "node_idx": 6064,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    2,
                    5,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                6064,
                1562,
                9073,
                373,
                9075,
                18611
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: public-key cryptosystems from lattice reduction problemswe present a new proposal for a trapdoor one-way function, from which we derive public-key encryption and digital signatures. the security of the new construction is based on the conjectured computational difficulty of lattice-reduction problems, providing a possible alternative to existing public-key encryption algorithms and digital signatures such as rsa and dss. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_6088",
        "graph": {
            "node_idx": 6088,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                6088,
                1199,
                854,
                272,
                774,
                567,
                19068,
                5679,
                6482,
                710,
                614,
                5295
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: kiloprocessor extensions to scithis work was supported in part by nsf grants ccr-9207971 and ccr-9509589, funding from the apple computer advanced technology group, and donations from thinking machines corporation. our t.m.c. cm-5 was purchased through nsf grant cda-9024618, with matching funding from the university of wisconsin graduate school. editor, ieee p1596.2 proposed standard. the views expressed in this paper are the authors and do not imply endorsement from ieee. abstract to expand the scalable coher ent interfaces (sci) capabilities so it can be used to efficiently handle sharing in systems of hundreds or even thousands of processors, the sci working group is developing the kilopr ocessor extensions to sci. in this paper we describe the pr oposed glow and stem kilopr ocessor extensions to sci. these two sets of extensions provide sci with scalable reads and scalable writes to widely-shar ed data. this kind of datum represents one of the main obstacles to scalability for many cache coherence protocols. the glow extensions are intended for systems with complex networks of inter connected sci rings, (e.g., lar ge networks of workstations). glow extensions are based on building k-ary sharing trees that map well to the underlying topology. in contrast, stem is intended for systems where glow is not applicable (e.g., topologies based on centralized switches). stem defines algorithms to build and maintain binary sharing trees. we show that latencies of glow reads and writes gr ow only logarithmically with the number of nodes sharing, in contrast to sci wher e latencies grow linearly, therefore validating glow as a good solution to efficient wide sharing of data. previous work showed the same for stem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_6094",
        "graph": {
            "node_idx": 6094,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                6094,
                8268,
                3977
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experiments in extraction of coarse grain parallelism from constraint programsthis paper reports on experimental research on extraction of coarse grain parallelism from constraint systems. constraint specifications are compiled into task level procedural parallel programs in c. three issues found to be important are: (i) inclusion of operations over structured types as primitives in the representation, (ii) inclusion of modularity in the constraint systems, and (iii) use of functions in the constraint representation. the role of these issues is described. the compilation process focuses on determining the parallel structure defined by the constraints and creates a parallel program in the format of the code 2.0 parallel programming environment. the compilation algorithm is described. an example compilation of a constraint system defining a simple numerical algorithm to a parallel c program is given and performance results are reported. directions for future enhancement of the compilation process are suggested. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_6131",
        "graph": {
            "node_idx": 6131,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                6131,
                24580
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: local search as a tool for horizon line matchingcomputer science technical report \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_6168",
        "graph": {
            "node_idx": 6168,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                6168,
                24295
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the spring nucleus: a microkernel for objectsthis paper discusses the deign rationale for the nucleus ipc facilities and how they fit into the overall spring programming model. we then describe how the internal structure of the nucleus is organized to support fast cross-address-space calls, including some specific details and performance information on the current implementation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_6198",
        "graph": {
            "node_idx": 6198,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                6198,
                11347
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: simulating quadratic dynamical systems is pspace-complete (preliminary version)quadratic dynamical systems (qds), whose definition extends that of markov chains, are used to model phenomena in a variety of fields like statistical physics and natural evolution. such systems also play a role in genetic algorithms, a widely-used class of heuristics that are notoriously hard to analyze. recently rabinovich et al. took an important step in the study of qds's by showing, under some technical assumptions, that such systems converge to a stationary distribution (similar theorems for markov chains are well-known). we show, however, that the following sampling problem for qds's is pspace-hard: given an initial distribution, produce a random sample from the t'th generation. the hardness result continues to hold for very restricted classes of qds's with very simple initial distributions, thus suggesting that qds's are intrinsically more complicated than markov chains. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_6200",
        "graph": {
            "node_idx": 6200,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    1,
                    15,
                    16,
                    17,
                    18,
                    5,
                    19,
                    7,
                    20,
                    10,
                    9,
                    21,
                    22,
                    21,
                    23,
                    24,
                    25,
                    13,
                    26,
                    27,
                    28,
                    29
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    8,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                6200,
                24296,
                7224,
                3686,
                11119,
                24569,
                6079,
                20496,
                15738,
                15750,
                6577,
                707,
                2740,
                2741,
                19834,
                4685,
                17917,
                15507,
                18424,
                19205,
                11311,
                15739,
                23454,
                5744,
                11275,
                8600,
                19253,
                22442,
                14989,
                23790
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a checkpoint protocol for an entry consistent shared memory systemthis paper presents a checkpoint protocol for a multi-threaded distributed shared memory system based on the entry consistency memory model. the protocol allows transparent recovery from single node failures and, in some cases, from multiple node failures. a simple mechanism is used to determine if the system can be brought to a consistent state in the event of multiple machine crashes. the protocol keeps a distributed log of shared data accesses in the volatile memory of the processes, taking advantage of the independent failure characteristics of workstation clusters. periodically, or whenever the log reaches a high-water mark, each process checkpoints its state, independently from the others. the protocol needs no extra messages during the failure-free period, since all checkpoint control information is piggybacked on the memory coherence protocol messages. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_6205",
        "graph": {
            "node_idx": 6205,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    18,
                    27,
                    5,
                    28,
                    29,
                    16,
                    17,
                    25,
                    30,
                    31,
                    32,
                    33,
                    18,
                    34,
                    23,
                    8,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    25,
                    41,
                    30,
                    42,
                    43
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                6205,
                2628,
                2910,
                542,
                1168,
                8524,
                541,
                2574,
                24167,
                17006,
                24301,
                2844,
                10430,
                19329,
                9711,
                856,
                2559,
                2909,
                8809,
                4416,
                4002,
                525,
                11682,
                1924,
                3752,
                2646,
                2843,
                9648,
                15214,
                16504,
                3867,
                3550,
                8088,
                14145,
                18579,
                13672,
                2562,
                14541,
                17063,
                2845,
                22859,
                24165,
                1836,
                20995
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: parallelizing molecular dynamics codes using parti software primitivesthis paper is concerned with the implementation of the molecular dynamics code, charmm, on massively parallel distributed-memory computer architectures using a data-parallel approach. the implementation is carried out by creating a set of software tools, which provide an interface between the parallelization issues and the sequential code. large practical md problems is solved on the intel ipsc/860 hypercube. the overall solution efficiency is compared with that obtained when implementation is done using data-replication. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_6247",
        "graph": {
            "node_idx": 6247,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                6247,
                6923,
                6248,
                5006
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: discovering structure in continuous variables using bayesian networkswe study bayesian networks for continuous variables using nonlinear conditional density estimators. we demonstrate that useful structures can be extracted from a data set in a self-organized way and we present sampling techniques for belief update based on \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_6252",
        "graph": {
            "node_idx": 6252,
            "edge_index": [
                [
                    1,
                    0,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                6252,
                6109,
                6108
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: data handles and virtual connections: high-level support for anonymous reconfiguration context of i/o abstraction, adata handles and virtual connections are presented as a solution to the problem of supporting application-driven reconfiguration without sacrificing the separation of communication and computation. the solution supports anonymous reconfiguration, meaning that the module performing the reconfiguration and the modules affected by the reconfiguration need not be aware of each other's presence in the system. the solution allows modules to reconfigure the system within the limits of a specified communication structure while retaining support for dynamic end-user reconfiguration. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_6264",
        "graph": {
            "node_idx": 6264,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                6264,
                17402
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: latent variables, measurement error and methods for analyzing longitudinal ordinal datawe examine the effects of latent variables, between individual variability and measurement error in the outcome on commonly used methods for the analysis of longitudinal ordinal data, such as marginal and cluster-specific models. the impact of such variability becomes very clear when viewed in the context of structural equation modeling (e.g. muthen 1979, 1983, 1984, 1988). the structural equation formulation also provides insight into the assumptions and differences in interpretation of regression coefficients of these various methods of analysis. we explore the potential for using structural equations to model random effects and to adjust for measurement error, and in the process compare results from marginal modeling using a sas gee routine (karim and zeger, 1988), qu's gauss program (qu, 1992) for generalized mixed models using gee, the mixor package for cluster-specific mixed effects models (hedeker and gibbons, 1994), and lis-comp (muthen, 1988) for structural equation models. these approaches are illustrated in a longitudinal data set of sleep disorders. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_6268",
        "graph": {
            "node_idx": 6268,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    1,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                6268,
                8059,
                17961,
                5088,
                23037,
                23038
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: for handbook of evolutionary computation. classifying protein segments as transmembrane domains using genetic programming andthe goal of automatic programming is to create, in an automated way, a computer program that enables a computer to solve a problem. ideally, an automatic programming system should require that the user pre-specify as little as possible about the problem. in particular, it is desirable that the user not be required to specify the size and shape (i.e., the architecture) of the ultimate solution to the problem before applying the technique. this paper describes how the biological theory of gene duplication described in susumu ohno's provocative book, evolution by means of gene duplication, was brought to bear on a vexatious problem from the domain of automated machine learning in the computer science field. the resulting biologically-motivated approach using six new architecture-altering operations enables genetic programming to automatically discover the size and shape of the solution at the same time as it is evolving a solution to the problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_6295",
        "graph": {
            "node_idx": 6295,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                6295,
                18182,
                1273,
                16513,
                16695,
                16767,
                13994,
                1275,
                7203,
                20076,
                21116
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: bias, variance, and error correcting output codes for local learnersthis paper focuses on a bias variance decomposition analysis of a local learning algorithm, the nearest neighbor classifier, that has been extended with error correcting output codes. this extended algorithm often considerably reduces the 0-1 (i.e., classification) error in comparison with nearest neighbor (ricci & aha, 1997). the analysis presented here reveals that this performance improvement is obtained by drastically reducing bias at the cost of increasing variance. we also show that, even in classification problems with few classes (m5), extending the codeword length beyond the limit that assures column separation yields an error reduction. this error reduction is not only in the variance, which is due to the voting mechanism used for error-correcting output codes, but also in the bias. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_6315",
        "graph": {
            "node_idx": 6315,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                6315,
                8329,
                8913,
                5200,
                18063,
                8330,
                18315,
                10647,
                3712,
                1112,
                14374,
                17116,
                21397
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: connectionist probability estimation in the decipher speech recognition system probability estimation can improve performance ofpreviously, we have demonstrated that feed-forward networks may be used to estimate local output probabilities in hidden markov model (hmm) speech recognition systems. here these connectionist techniques are integrated into the decipher system, with experiments being performed using the speaker independent darpa rm database. our results indicate that: \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_6351",
        "graph": {
            "node_idx": 6351,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    2
                ]
            ],
            "node_list": [
                6351,
                14774,
                6352,
                22576
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: exploiting specifications to improve program performancethis report is a revised copy of the author's thesis, submitted to the department of electrical engineering and computer science on may 28, 1993 in partial fulfillment of the requirements for the degree of doctor of philosophy, at the massachusetts institute of technology. the author's current address is: mit lab for computer science, 545 technology square, cambridge, ma 02139. internet: mtv@lcs.mit.edu \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_6352",
        "graph": {
            "node_idx": 6352,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                6352,
                14774,
                22576
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using specialized procedures and specification-based analysis to reduce the runtime costs of modularitymanaging tradeoffs between program structure and program efficiency is one of the most difficult problems facing software engineers. decomposing programs into abstractions simplifies the construction and maintenance of software and results in fewer errors. however, the introduction of these abstractions often introduces significant inefficiencies. this paper describes a strategy for eliminating many of these inefficiencies. it is based upon providing alternative implementations of the same abstraction, and using information contained in formal specifications to allow a compiler to choose the appropriate one. the strategy has been implemented in a prototype compiler that incorporates theorem proving technology. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_6364",
        "graph": {
            "node_idx": 6364,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                6364,
                6365,
                10548
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: continuous-valued xof-n attributes versus nominal xof-n attributes for constructive induction: a case studyan xof-n is a set containing one or more attribute-value pairs. for a given instance, its value corresponds to the number of its attribute-value pairs that are true. in this paper, we explore the characteristics and performance of continuous-valued xof-n attributes versus nominal xof-n attributes for constructive induction. nominal xof-ns are more representationally powerful than continuous-valued xof-ns, but the former suffer the \"fragmentation\" problem, although some mechanisms such as subsetting can help to solve the problem. two approaches to constructive induction using continuous-valued xof-ns are described. continuous-valued xof-ns perform better than nominal ones on domains that need xof-ns with only one cut point. on domains that need xof-n representations with more than one cut point, nominal xof-ns perform better than continuous-valued ones. experimental results on a set of artificial and real-world domains support these statements. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_6371",
        "graph": {
            "node_idx": 6371,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    11,
                    12,
                    13,
                    1,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    7,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    10,
                    10
                ]
            ],
            "node_list": [
                6371,
                7729,
                10251,
                7646,
                6370,
                3114,
                20200,
                9144,
                23763,
                23878,
                16425,
                7191,
                17820,
                19596,
                4576,
                5208,
                10920,
                5211,
                10153,
                1042,
                24839,
                6442,
                7419,
                12905,
                21067,
                12241,
                21091,
                21098,
                16100,
                7793,
                18572,
                16427,
                24116
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: intelligent agents: theory and practicethe concept of an agent has become important in both artificial intelligence (ai) and mainstream computer science. our aim in this paper is to point the reader at what we perceive to be the most important theoretical and practical issues associated with the design and construction of intelligent agents. for convenience, we divide these issues into three areas (though as the reader will see, the divisions are at times somewhat arbitrary). agent theory is concerned with the question of what an agent is, and the use of mathematical formalisms for representing and reasoning about the properties of agents. agent architectures can be thought of as software engineering models of agents; researchers in this area are primarily concerned with the problem of designing software or hardware systems that will satisfy the properties specified by agent theorists. finally, agent languages are software systems for programming and experimenting with agents; these languages may embody principles proposed by theorists. the paper is not intended to serve as a tutorial introduction to all the issues mentioned; we hope instead simply to identify the \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_6373",
        "graph": {
            "node_idx": 6373,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                6373
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: initial performance comparisons for the delta coding algorithmdelta coding is an iterative genetic search strategy that sustains search by periodically re-initializing the population. this helps to avoid premature convergence during genetic search. delta coding also remaps hyperspace with each iteration in an attempt to locate \"easier\" search spaces with respect to genetic search. here, the optimization ability of delta coding is compared against the chc genetic algorithm and a mutation driven stochastic hill-climbing algorithm on a suite of standard genetic algorithm test functions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_6390",
        "graph": {
            "node_idx": 6390,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    2,
                    5,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                6390,
                4474,
                10998,
                19745,
                2637,
                16666
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: extending horn clause theories by reflection principlesupmail technical report no. 95 abstract in this paper, we introduce logical reflection as a principled way to empower the representation and reasoning capabilities of logic programming systems. in particular, reflection principles take the role of axiom schemata of a particular form that, once added to a given logic program (the basic theory, or the initial axioms), enlarge the set of consequences sanctioned by those initial axioms. the main advantage of this approach is that it is much easier to write a basic theory and then to augment it with condensed axiom schemata, than it is to write a corresponding large (or even infinite) set of axioms in the first place. moreover, the well-established semantic properties of horn clauses, carry over to horn clauses with reflection. in fact, the semantics of reflective sld resolution and the semantics of the reflective least herbrand model are obtained by making slight variations to, respectively, the procedural and the declarative semantics classically defined for horn clauses. we present a complete formalization of this concept of reflection, that should constitute a simple way of understanding reflective programs; and a description of how reflection allows one to treat uniformly different application areas. to support this claim, the following three case studies will be discussed: metalevel reasoning; reasoning with multiple communicating theories (agents); and analogical reasoning. for each of these areas, the choice of a suitable reflection principle is shown, which tries to capture the specificity of the problem domain. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_6412",
        "graph": {
            "node_idx": 6412,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    1,
                    9,
                    1,
                    10,
                    11,
                    12,
                    0,
                    13,
                    6,
                    0,
                    14,
                    5,
                    15,
                    7,
                    16,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    6,
                    7,
                    7
                ]
            ],
            "node_list": [
                6412,
                7685,
                9824,
                4638,
                6413,
                6411,
                16388,
                11077,
                24073,
                12834,
                16997,
                15422,
                23501,
                24994,
                20009,
                6437,
                11017
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: bucket elimination: a unifying framework for probabilistic inferenceprobabilistic inference algorithms for finding the most probable explanation, the maximum aposteriori hypothesis, and the maximum expected utility and for updating belief are reformulated as an elimination-type algorithm called bucket elimination. this emphasizes the principle common to many of the algorithms appearing in that literature and clarifies their relationship to nonserial dynamic programming algorithms. we also present a general way of combining conditioning and elimination within this framework. bounds on complexity are given for all the algorithms as a function of the problem's struc ture. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_6414",
        "graph": {
            "node_idx": 6414,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    2,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    7,
                    18,
                    19,
                    20,
                    21,
                    16,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    11,
                    29,
                    30,
                    31,
                    5,
                    32,
                    33,
                    4,
                    6,
                    34,
                    35,
                    27,
                    36,
                    5,
                    37,
                    35,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    17,
                    44,
                    29,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                6414,
                3038,
                3296,
                188,
                4638,
                6412,
                6413,
                4991,
                3554,
                21109,
                21126,
                2188,
                17127,
                4177,
                6247,
                5969,
                17882,
                20281,
                23947,
                996,
                16745,
                10956,
                19547,
                17072,
                9691,
                9609,
                21032,
                11077,
                16451,
                16997,
                15422,
                23501,
                7685,
                9824,
                6411,
                16388,
                24073,
                24994,
                17064,
                17658,
                19041,
                24733,
                16489,
                5725,
                16793
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: global conditioning for probabilistic inference in belief networksin this paper we propose a new approach to probabilistic inference on belief networks, global conditioning, which is a simple generalization of pearl's (1986b) method of loop-cutset conditioning. we show that global conditioning, as well as loop-cutset conditioning, can be thought of as a special case of the method of lauritzen and spiegelhalter (1988) as refined by jensen et al (1990a; 1990b). nonetheless, this approach provides new opportunities for parallel processing and, in the case of sequential processing, a tradeoff of time for memory. we also show how a hybrid method (suermondt and others 1990) combining loop-cutset conditioning with jensen's method can be viewed within our framework. by exploring the relationships between these methods, we develop a unifying framework in which the advantages of each approach can be combined successfully. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_6430",
        "graph": {
            "node_idx": 6430,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                6430,
                7210,
                19417,
                17679,
                19935,
                2060
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: estimating bayes factors via posterior simulation with the laplace-metropolis estimatorthe key quantity needed for bayesian hypothesis testing and model selection is the marginal likelihood for a model, also known as the integrated likelihood, or the marginal probability of the data. in this paper we describe a way to use posterior simulation output to estimate marginal likelihoods. we describe the basic laplace-metropolis estimator for models without random effects. for models with random effects the compound laplace-metropolis estimator is introduced. this estimator is applied to data from the world fertility survey and shown to give accurate results. batching of simulation output is used to assess the uncertainty involved in using the compound laplace-metropolis estimator. the method allows us to test for the effects of independent variables in a random effects model, and also to test for the presence of the random effects. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_6438",
        "graph": {
            "node_idx": 6438,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    3,
                    6,
                    4,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                6438,
                17460,
                8791,
                6541,
                23302,
                24502,
                25047,
                9305
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: similarity concepts and retrieval methodsreihe fabel-report status: extern dokumentbezeichner: org/reports/nr-13 erstellt am: 22.12.93 korrigiert am: 02.02.94 issn 0942-413x \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_6441",
        "graph": {
            "node_idx": 6441,
            "edge_index": [
                [
                    0,
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                6441,
                6440,
                10153,
                18749,
                5721,
                24757,
                6442,
                14028,
                7419
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: planet: an active network testbedactive networking addresses the issue of slow network evolution by making the network programmable and extensible. we believe that an understanding of the tradeoffs of this new approach can only be gained by experience in using this technology to build real networking systems. to this end, we have built a programming system, plan, that embodies several of the key design tradeoffs; in particular, plan supports both programmable packets and dynamic server extensions. we have used plan to build a non-trivial network, planet. planet is an active internetwork in which all packets are plan programs and in which new services can be dynamically added to the network. planet is implemented in user-space using a byte-code interpreted version of the caml language running on on linux pcs and currently supports 100 mbps ethernet and ip as link layers. on 300 mhz pentium-ii's over 100 mbps ethernet, planet routers can achieve 48 mbps and can switch over 5000 packets per second. in addition to our basic performance measurements, we also present several experiments that demonstrate how planet's flexibility can support a variety of strategies for coping with contention. in general, planet permits us to explore the rather large design space of active networking. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_6443",
        "graph": {
            "node_idx": 6443,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                6443,
                17461
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: foldover-free image warpingan image warping method is presented that deforms an image continuously without foldover, while observing a given set of trajectories of feature elements. any intermediate image during the morph is homeomorphic to the initial image and the morphing process is a homotopy. the method permits points, line-segments, and polygons to be included as features in the image. our method is based on time-varying triangulation, that is, triangulation changes as features move. accordingly, the deformation mapping is updated locally for the part for which the triangulation changes. experimental results are included to demonstrate the feasibility of our approach and complexity of the algorithm is analyzed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_6450",
        "graph": {
            "node_idx": 6450,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                6450,
                17463,
                23279
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: integrating rules and cases for the classification taskthe recent progress in case based reasoning has shown that one of the most important challenges in developing future ai methods will be to combine and synergistically utilize general and case-based knowledge. in this paper a very rudimentary kind of integration for the classification task, based on simple heuristics, is sketched: \"to solve a problem, first try to use the conventional rule-based approach. if it does not work, try to remember a similar problem you have solved in the past and adapt the old solution to the new situation\". this heuristic approach is based on the knowledge base that consists of rule base and exception case base. the method of generating this kind of knowledge base from a set of examples is described. the proposed approach is tested, and compared with alternative approaches. the experimental results show that the presented integration method can lead to an improvement in accuracy and comprehensibility. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_6475",
        "graph": {
            "node_idx": 6475,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                6475,
                21950,
                21952
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: independent on-line monitoring of evolving systemswe argue that the trustworthiness of evolving software systems can be significantly enhanced by a rigorous process of independent on-line monitoring. such monitoring can prevent fraud, encourage careful maintenance, and serve as an early detector of irregularities in the state and behavior of a system. unfortunately, there is a conflict between the concepts of on-line and independent monitoring. this conflict is due to the fact that on-line monitoring requires the embedding of some kinds of sensors in the base-system. but the introduction of such sensors requires a degree of cooperation with the developers of the base system, and may interfere with the operations of that system, contrary to the requirements of independent monitoring. we describe a way to resolve this conflict by applying the concept of law-governed architecture. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_6482",
        "graph": {
            "node_idx": 6482,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                6482,
                24312,
                3707,
                24195,
                24199,
                19608,
                10227,
                9433,
                23797
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the use and performance of explicit communication primitives in cache-coherent multiprocessor systemsrecent developments in shared-memory multiprocessor systems advocate using off-the-shelf hardware to provide basic communication mechanisms and using software to implement cache coherence policies. the exposure of communication mechanisms to software opens many oppor tunities for enhancing application performance. in this paper we propose a set of communication primitives that are absent from pure cache coherent schemes. the communication primitives, implemented on a communication co-processor, introduce a flavor of message passing and permit protocol optimization, without sacrificing the simplicity of the shared memory systems. to assess the overhead of the software implementation of the primitives and protocols, we compare, via simulation, the execution of three programs from the splash-2 suite on four environments: a pram model, a hardware cache coherence scheme, a software scheme imple menting only the basic cache coherence protocol, and an optimized software solution supporting the additional communication primitives and running with applications annotated with those primitives. with the parameters we chose for the communication processor, the overall memory system overhead of the basic software scheme is at least 50% higher than that of the hardware implementation. with the adequate insertion of the communication primitives, the optimized software solution has a performance comparable to that of the hardware scheme. these results show that the trend towards software-controlled cache coherence is justified since there is no loss in performance and the software solution is more flexible and scalable. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_6513",
        "graph": {
            "node_idx": 6513,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                6513,
                17485,
                23894
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: anonymity in a mobile computing environmentin a mobile computing environment, it is desirable to protect information about the movements and activities of mobile entities from onlookers. solutions to this problem of providing anonymity have to be developed with the constraints of mobile computing environments in mind. in this paper, it is argued that this issue merits investigation. a brief survey of the nature of anonymity provided in proposed or existing mobile computing environments is presented. it is argued further that achieving limited but practical anonymity using standard cryptographic techniques is feasible. example solutions are presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_6542",
        "graph": {
            "node_idx": 6542,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                6542,
                9305,
                18391,
                6449,
                18974
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automated acquisition of user preferencesdecision support systems often require knowledge of users' preferences. however, preferences may vary among individual users or be difficult for users to articulate. this paper describes how user preferences can be acquired in the form of preference predicates by a learning apprentice system and proposes two new instance-based algorithms for preference predicate acquisition: 1arc and compositional instance-based learning (cibl). an empirical evaluation using simulated preference behavior indicated that the instance-based approaches are preferable to decision-tree induction and perceptrons as the learning component of a learning apprentice system if representation of the relevant characteristics of problem-solving states requires a large number of attributes, if attributes interact in a complex fashion, or if there are very few training instances. conversely, decision-tree induction or perceptron learning is preferable if there are a \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_6548",
        "graph": {
            "node_idx": 6548,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    9,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    11,
                    27,
                    2,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    0,
                    34,
                    11,
                    35,
                    33,
                    36,
                    37,
                    38
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                6548,
                13734,
                17728,
                18012,
                17933,
                7515,
                207,
                22573,
                56,
                16382,
                3341,
                16383,
                5888,
                17771,
                18126,
                20251,
                11672,
                14566,
                206,
                5887,
                16690,
                5808,
                8172,
                9110,
                6150,
                21519,
                13735,
                24359,
                7428,
                14755,
                4458,
                3690,
                4274,
                20908,
                19952,
                3339,
                21716,
                9111,
                21721
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: sound polymorphic type inference for objectsa polymorphic, constraint-based type inference algorithm for an object-oriented language is defined. a generalized form of type, polymorphic recursively constrained types, are inferred. these types are expressive enough for typing objects, since they generalize recursive types and f-bounded polymorphism. the well-known tradeoff between inheritance and subtyping is mitigated by the type inference mechanism. soundness and completeness of type inference are established. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_6598",
        "graph": {
            "node_idx": 6598,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                6598,
                21667,
                22638
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: conformational analysis of molecular chains using nano-kinematicswe present algorithms for 3-d manipulation and conformational analysis of molecular chains, when bond length, bond angles and related dihedral angles remain fixed. these algorithms are useful for local deformations of linear molecules, exact ring closure in cyclic molecules and molecular embedding for short chains. other possible applications include structure prediction, protein folding, conformation energy analysis and 3d molecular matching and docking. the algorithms are applicable to all serial molecular chains and make no asssumptions about their geometry. we make use of results on direct and inverse kinematics from robotics and mechanics literature and show the correspondence between kinematics and conformational analysis of molecules. in particular, we pose these problems algebraically and compute all the solutions making use of the structure of these equations and matrix computations. the algorithms have been implemented and perform well in practice. in particular, they take tens of milliseconds on current workstations for local deformations and chain closures on molecular chains consisting of six or fewer rotatable dihedral angles. categories: 3d protein modeling, 3d molecular matching and docking, multiple alignment of genetic sequences \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_6614",
        "graph": {
            "node_idx": 6614,
            "edge_index": [
                [
                    1,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                6614,
                17507,
                6615
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: path independence for authentication in large-scale systemsauthenticating the source of a message in a large distributed system can be difficult due to the lack of a single authority that can tell for whom a channel speaks. this has lead many to propose the use of a path of authorities, each able to authenticate the next, such that the first authority in the path can be authenticated by the message recipient and the last authority in the path can authenticate the message source. in this paper we suggest the use of multiple such paths, no two of which share a common authority, to provide independent confirmation of the message source. we formalize the problem of finding a maximum set of such paths of bounded length in a graph-theoretic framework, in which the problem can be seen to be np-hard. we propose approximation algorithms for this problem and evaluate their accuracy on a graph induced by a database of pgp certificates. we also introduce the pathserver for pgp, a service for finding maximum sets of such paths to support authentication in pgp-based applications. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_6623",
        "graph": {
            "node_idx": 6623,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    3,
                    1,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                6623,
                6464,
                6463,
                24940,
                6465
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: vision-based lateral control of vehicles: look-ahead and delay issuesrecent interest in highway automation and current advances in real-time image processing provide a suitable testbed for employing the visual information extracted from image sequences in the feedback loop of the control system. the main advantage of vision-based control for steering is that of the availability of information about the road ahead of the vehicle, which is essential for a human driver. this information is extracted from the road imagery using an algorithm for robust detection of lane markers followed by a linear fit at various look-ahead ranges, with known camera geometry [tmw96]. the main objective of the controller is to keep the vehicle in the center of the road while maintaining its orientation parallel to the road tangent. the relative position of the vehicle with respect to the road is captured by the offset y l from the centerline and the yaw angle \" l of the vehicle with respect to the road at some look-ahead distance l. considering the full dynamical model of the vehicle, various strategies for controller design are presented. we investigate the choice of the look-ahead distance l, which varies with the longitudinal velocity and is affected by the quality of the offset estimates. further we characterize the effect of the delay caused by vision processing and the use of curvature information in the controller design. several controller design techniques and closed loop simulations are presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_6628",
        "graph": {
            "node_idx": 6628,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                6628,
                17514,
                363,
                16458,
                373,
                342,
                385
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hashing functions can simplify zero-knowledge protocol design (too)in crypto93, damg-ard showed that any constant-round protocol in which the verifier sends only independent, random bits and which is zero-knowledge against the honest verifier can be transformed into a protocol (for the same problem) that is zero-knowledge in general. his transformation was based on the interactive hashing technique of naor, ostrovsky, venkatesan and yung, and thus the resulting protocol had very large round-complexity. we adopt damg-ard's methods, using ordinary hashing functions, instead of the abovementioned interactive hashing technique. typically, the protocols we derive have much lower round-complexity than those derived by damg-ard's transformation. as in damg-ard's transformation, our transformation preserves statistical/perfect zero-knowledge and does not rely on any computational assumptions. however, unlike damg-ard's transformation, the new transformation is not applicable to argument systems or to proofs of knowledge. y dept. of applied math. and computer science, weizmann institute of science, rehovot, israel. work done while visiting brics, basic research in computer science, centre of the danish national research foundation. supported in part by grant no. 92-00226 from the united states - israel binational reseach foundation (bsf), jerusalem, israel. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_6639",
        "graph": {
            "node_idx": 6639,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2,
                    3,
                    4,
                    7,
                    2,
                    1,
                    8,
                    9,
                    0,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                6639,
                9188,
                21954,
                14026,
                10160,
                6638,
                12257,
                19117,
                17885,
                18522,
                19872,
                384,
                21018,
                21958,
                24106
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: micro-payments based on ikpmicro-payments are payments too small in amount to warrant the overhead costs of current financial clearing networks. furthermore one can expect that content servers for the global information infrastructure (gii) will have to process so many of these low value transactions that computationally complex and costly cryptographic protocols will be impractical. this report proposes a micro-payment scheme that can be bootstrapped with the already well-known payment protocols for larger amounts, but does not depend on them for each micro-transaction. special attention is given to its integration into ibm's \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_6647",
        "graph": {
            "node_idx": 6647,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    6,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                6647,
                9137,
                6648,
                6646,
                20329,
                18443,
                11950,
                11808,
                11807,
                11804,
                11806,
                25030,
                20331,
                20332,
                20334,
                22741
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: empirical studies of the genetic algorithm with non-coding segmentsthe genetic algorithm (ga) is a problem solving method that is modelled after the process of natural selection. we are interested in studying a specific aspect of the ga: the effect of non-coding segments on ga performance. non-coding segments are segments of bits in an individual that provide no contribution, positive or negative, to the fitness of that individual. previous research on non-coding segments suggests that including these structures in the ga may improve ga performance. understanding when and why this improvement occurs will help us to use the ga to its full potential. in this article, we discuss our hypotheses on non-coding segments and describe the results of our experiments. the experiments may be separated into two categories: testing our program on problems from previous related studies, and testing new hypotheses on the effect of non-coding segments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_6657",
        "graph": {
            "node_idx": 6657,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                6657
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hula: an efficient protocol for reliable delivery of messageswe present a new protocol for reliable delivery of messages over a network that might lose, duplicate, reorder, or arbitrarily delay packets. it is the first protocol that guarantees exactly-once and ordered delivery on a connection while avoiding precursory handshakes. avoiding handshakes reduces the overhead for sending small, intermittent messages as in remote procedure calls and protocols like http. like other practical protocols, it permits discarding information for idle connections. the protocol works by combining existing handshake-based and time-based protocols. it uses loosely synchronized clocks to avoid handshakes. a handshake is executed only upon an unexpectedly long packet delay or clock skew. thus, unexpected conditions degrade performance but do not compromise reliability. the resultant protocol has the reliability of handshake-based protocols and the efficiency of time-based protocols. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_6662",
        "graph": {
            "node_idx": 6662,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    3,
                    11,
                    5,
                    12,
                    13,
                    8,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    3,
                    29,
                    30,
                    31,
                    32,
                    33
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10
                ]
            ],
            "node_list": [
                6662,
                10790,
                8653,
                24486,
                15677,
                24726,
                734,
                19497,
                24902,
                3716,
                4417,
                5218,
                10820,
                11342,
                17108,
                9552,
                17669,
                19658,
                4060,
                7791,
                6201,
                2072,
                21538,
                23997,
                17425,
                4248,
                4460,
                19068,
                9812,
                3768,
                21908,
                14019,
                23894,
                3507
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: pseudo devices: user-level extensions to the sprite file systema pseudo-device is a mechanism in the sprite network file system that lets a user-level server process emulate a file or i/o device. pseudo-devices are accessed like regular files or devices, and they exist in the file system name space. pseudo-devices are implemented by transparently mapping client operations on the pseudo-device into a request-response exchange with a server process. the interface to pseudo-devices is general enough to be a transport mechanism for a user-level rpc system. it also provides a stream-oriented interface with write-behind and read-ahead for an asynchronous connection between clients and server. sprite uses pseudo-devices to implement at user level its terminal drivers, the internet protocol suite, and the x-11 window system server. the pseudo-device implementation provides as fast or faster communication, both local and remote, than a unix udp socket connection. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_6671",
        "graph": {
            "node_idx": 6671,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    6,
                    12,
                    2,
                    12,
                    13,
                    14,
                    15,
                    2,
                    3,
                    16,
                    17,
                    18,
                    7,
                    19,
                    20,
                    21,
                    12,
                    4,
                    22,
                    23,
                    8,
                    24,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6
                ]
            ],
            "node_list": [
                6671,
                2698,
                10746,
                9220,
                4709,
                8280,
                10814,
                25111,
                21961,
                22287,
                6772,
                8281,
                8546,
                13961,
                22138,
                11591,
                24897,
                6614,
                9667,
                4943,
                12265,
                6516,
                19800,
                335,
                2273
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a security risk of depending on synchronized clocksmany algorithms or protocols, in particular cryptographic protocols such as authentication protocols, use synchronized clocks and depend on them for correctness. this note describes a scenario where a clock synchronization failure renders a protocol vulnerable to an attack even after the faulty clock has been resynchronized. the attack exploits a postdated message by first suppressing it and replaying it later. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_6673",
        "graph": {
            "node_idx": 6673,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                6673,
                2698,
                6579,
                8164,
                20398,
                6772,
                8281,
                10814,
                5744,
                7457,
                3686,
                6576,
                18362,
                18876,
                6577
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: preventing denial and forgery of causal relationships in distributed systemsin a distributed system, it is often important to detect the causal relationships between events, where event e 1 is causally before event e 2 if e 1 happened before e 2 and could possibly have affected the occurrence of e 2 . in this paper we argue that detecting causal relationships among events can be important for security, in the sense that it may be essential to the correct implementation of a security policy that a process be able to determine if two events are causally related, and if so, how. we formulate attacks on causality in terms of causal denial and forgery, formalize possible security goals with respect to causality, and present simple algorithms to attain these goals in some situations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_6678",
        "graph": {
            "node_idx": 6678,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                6678,
                8160,
                12364,
                2076,
                18007,
                20748,
                16595,
                11641,
                2077,
                17276,
                2078,
                3010,
                19825,
                19833,
                23711
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: what your computer really needs to know, you learned in kindergartenresearch in distributed ai has led to computational techniques for providing ai systems with rudimentary social skills. this paper gives a brief survey of distributed ai, describing the work that strives for social skills that a person might acquire in kindergarten, and highlighting important unresolved problems facing the field. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_6715",
        "graph": {
            "node_idx": 6715,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                6715,
                1130,
                9856,
                5763,
                813,
                18449,
                7232,
                21673,
                454,
                1296,
                24742
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: semantics-based parallel cost models and their use in provably efficient implementationsthis research was sponsored in part by the wright laboratory, aeronautical systmes center, air force materiel command, usaf, and the advanced research projects agency (arpa) under grand number f33615-93-1-1330 and contract number f19628-91-c-0168. it was also supported in part by an nsf young investigator award and by finmeccanica. the views and conclusions contained in this document are those of the author and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of wright laboratory or the u.s. government. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_6749",
        "graph": {
            "node_idx": 6749,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    4,
                    8,
                    9,
                    5,
                    10,
                    6,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                6749,
                17547,
                2920,
                19507,
                20040,
                21723,
                2259,
                6748,
                20893,
                20905,
                13657,
                9873,
                10216,
                14914,
                24954,
                24537,
                16615,
                10220,
                14916,
                22691,
                14879
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: voxel based object simplificationwe present a simple, robust, and practical method for object simplification for applications where gradual elimination of high frequency details is desired. this is accomplished by sampling and low-pass filtering the object into multi-resolution volume buffers and applying the marching cubes algorithm to generate a multi-resolution triangle-mesh hierarchy. our method simplifies the genus of objects and can also help existing object simplification algorithms achieve better results. at each level of detail a multi-layered mesh can be used for an optional and efficient antialiased rendering. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_6759",
        "graph": {
            "node_idx": 6759,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                6759,
                20682
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: transforming the ego-centered internal representation of an autonomous robot with the cascaded neural networkthis paper addresses the problem how the ego-centered internal representation of a robot is to be transformed upon robot movement if the robot's environment is represented in an occupancy grid. the transformation rules are derived and it is shown that for a single change in the robot's position, the parameters of this transformation can best be estimated with monte carlo sampling. a neural network architecture is introduced as a computational model of the monte carlo estimation method, which can calculate estimates of all parameters in parallel. the cascaded neural network is an extension to this architecture, which is capable of learning the relation between the change in the robot's configuration and the parameters of the corresponding transformation of occupancy grids. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_6796",
        "graph": {
            "node_idx": 6796,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2,
                    4,
                    2,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                6796,
                24333,
                10444,
                7121,
                2161,
                19588
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: discrete-time transitivity and accessibility: analytic systems 1this paper studies the problem, and establishes the desired implication for analytic systems in several cases: (i) compact state space, (ii) under a poisson stability condition, and (iii) in a generic sense. in addition, the paper studies accessibility properties of the \"control sets\" recently introduced in the context of dynamical systems studies. finally, various examples and counterexamples are provided relating the various lie algebras introduced in past work. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_6803",
        "graph": {
            "node_idx": 6803,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                6803,
                17562,
                471,
                18816
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: culling dynamical systems in virtual environmentsculling dynamical systems which are not in view can offer significant speedups when rendering virtual environments. however, three problems arise, which we term consistency, completeness and causality. the consistency problem is concerned with ensuring that any predictions a viewer may make about the state of an object are satisfied, even if the object is culled for some period of time. completeness is ensuring that everything that would happen within view when not culling still happens when culling is enabled. modeling causality means maintaining causal relationships and constraints between events and objects. we concentrate on the consistency problem. our solutions distinguish three regimes, based on how well a viewer can predict and the various tools that can be applied to generate new state consistent with such predictions. we present examples explaining the tools, and a user experiment demonstrating that viewers cannot detect inconsistencies if the tools are applied correctly. the speedups obtained when culling range from 0.5 to 10, and scale ap proximately to the number of systems in view. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_6826",
        "graph": {
            "node_idx": 6826,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    3,
                    22,
                    23,
                    24,
                    0,
                    25,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                6826,
                7285,
                1622,
                1847,
                11033,
                4244,
                17695,
                17862,
                7112,
                20831,
                14005,
                2683,
                12854,
                17209,
                17007,
                6660,
                11535,
                10554,
                24746,
                22893,
                9340,
                18063,
                1848,
                23825,
                7277,
                9572
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: backpropagation separates where perceptrons dofeedforward nets with sigmoidal activation functions are often designed by minimizing a cost criterion. it has been pointed out before that this technique may be outperformed by the classical perceptron learning rule, at least on some problems. in this paper, we show that no such pathologies can arise if the error criterion is of a threshold lms type, i.e., is zero for values \"beyond\" the desired target values. more precisely, we show that if the data are linearly separable, and one considers nets with no hidden neurons, then an error function as above cannot have any local minima that are not global. simulations of networks with hidden units are consistent with these results, in that often data which can be classified when minimizing a threshold lms criterion may fail to be classified when using instead a simple lms cost. in addition, the proof gives the following stronger result, under the stated hypotheses: the continuous gradient adjustment procedure is such that from any initial weight configuration a separating set of weights is obtained in finite time. this is a precise analogue of the perceptron learning theorem. the results are then compared with the more classical pattern recognition problem of threshold lms with linear activations, where no spurious local minima exist even for nonseparable data: here it is shown that even if using the threshold criterion, such bad local minima may occur, if the data are not separable and sigmoids are used. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_6852",
        "graph": {
            "node_idx": 6852,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    3,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    4,
                    18,
                    7,
                    16,
                    19,
                    20,
                    21,
                    20,
                    22,
                    23,
                    24,
                    25,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    5,
                    5,
                    5,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                6852,
                16832,
                5774,
                13210,
                21267,
                8950,
                21827,
                14457,
                9686,
                1730,
                2441,
                7065,
                10643,
                11668,
                21001,
                8680,
                22373,
                2440,
                4059,
                22344,
                14456,
                6533,
                14552,
                22465,
                9685,
                22521,
                23660
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an empirical study of the reliability of unix utilitiesoperating system facilities, such as the kernel and utility programs, are typically assumed to be reliable. in our recent experiments, we have been able to crash 25-33% of the utility programs on any version of unix that were tested. this report describes these tests and an analysis of the program bugs that caused the crashes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_6855",
        "graph": {
            "node_idx": 6855,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    2,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                6855,
                17570,
                17847,
                7724,
                9511,
                22506,
                12620,
                21690
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a quantitative analysis of loop nest localitythis paper analyzes and quantifies the locality characteristics of numerical loop nests in order to suggest future directions for architecture and software cache optimizations. since most programs spend the majority of their time in nests, the vast majority of cache optimization techniques target loop nests. in contrast, the locality characteristics that drive these optimizations are usually collected across the entire application rather than the nest level. indeed, researchers have studied numerical codes for so long that a number of commonly held assertions have emerged on their locality characteristics. in light of these assertions, we use the perfect benchmarks to take a new look at measuring locality on numerical codes based on references, loop nests, and program locality properties. our results show that several popular assertions are at best overstatements. for example, we find that temporal and spatial reuse have balanced roles within a loop nest and most reuse across nests and the entire program is temporal. these results are consistent with high hit rates, but go against the commonly held assumption that spatial reuse dominates. another result contrary to popular assumption is that misses within a nest are overwhelmingly conflict misses rather than capacity misses. capacity misses are a significant source of misses for the entire program, but mostly correspond to potential reuse between different loop nests. our locality measurements reveal important differences between loop nests and programs; refute some popular assertions; and provide new insights for the compiler writer and the architect. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_6856",
        "graph": {
            "node_idx": 6856,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    5,
                    16,
                    17,
                    18,
                    19,
                    20,
                    6,
                    21,
                    20,
                    22,
                    23,
                    24,
                    15,
                    25,
                    6,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    19,
                    35,
                    36,
                    37,
                    38,
                    15,
                    6,
                    0,
                    39,
                    40,
                    41,
                    9,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                6856,
                17570,
                777,
                2220,
                12645,
                242,
                397,
                12077,
                20596,
                7082,
                7031,
                18508,
                9380,
                941,
                3388,
                3662,
                14572,
                877,
                12170,
                9324,
                22647,
                14144,
                14549,
                812,
                1836,
                7984,
                603,
                22507,
                5490,
                13712,
                4584,
                1199,
                23014,
                9024,
                7340,
                19632,
                944,
                855,
                1917,
                15179,
                9390,
                21852,
                22082,
                22094,
                22097,
                22306,
                22312,
                5950,
                9207
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: finding and exploiting parallelism in an ocean simulationprogram: experience, results and implications abstract how programmers will code and compile large application programs for execution on parallel processors is perhaps the biggest challenge facing the widespread adoption of multiprocessing. to gain insight into this problem, an ocean simulation application was converted to a parallel version. the parallel program demonstrated near-linear speed-up on an encore multimax, a sixteen processor bus-based shared-memory machine. parallelizing an existing sequential application| not just a single loop or computational kernel|leads to interesting insights about what issues are significant in the process of finding and implementing parallelism, and what the major challenges are. three levels of approach to the problem of finding parallelism|loop-level parallelization, program restructuring, and algorithm modification|were attempted, with widely varying results. loop-level parallelization did not scale sufficiently. high level restructuring was useful for much of the application, but obtaining an efficient parallel program required algorithmic changes to one portion of it. implementation issues for scalable performance, such as data locality and synchronization, are also discussed. the nature, requirements and success of the various transformations lend insight into the design of parallelizing tools and parallel programming environments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_6861",
        "graph": {
            "node_idx": 6861,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    5,
                    15,
                    4,
                    17,
                    18,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                6861,
                17575,
                2773,
                7266,
                7498,
                22908,
                4041,
                6645,
                17881,
                7051,
                10500,
                4879,
                19521,
                3164,
                5732,
                2191,
                3307,
                7499,
                22911,
                15323
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on learning visual concepts and dnf formulaewe consider the problem of learning dnf formulae in the mistake-bound and the pac models. we develop a new approach, which is called polynomial explainability, that is shown to be useful for learning some new subclasses of dnf (and cnf) formulae that were not known to be learnable before. unlike previous learnability results for dnf (and cnf) formulae, these subclasses are not limited in the number of terms or in the number of variables per term; yet, they contain the subclasses of k-dnf and k-term-dnf (and the corresponding classes of cnf) as special cases. we apply our dnf results to the problem of learning visual concepts and obtain learning algorithms for several natural subclasses of visual concepts that appear to have no natural boolean counterpart. on the other hand, we show that learning some other natural subclasses of visual concepts is as hard as learning the class of all dnf formulae. we also consider the robustness of these results under various types of noise. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_6862",
        "graph": {
            "node_idx": 6862,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                6862
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: ensemble training: some recent experiments with postal zip datarecent findings suggest that a classification scheme based on an ensemble of networks is an effective way to address overfitting. we study optimal methods for training an ensemble of networks. some recent experiments on postal zip-code character data suggest that weight decay may not be an optimal method for controlling the variance of a classifier. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_6890",
        "graph": {
            "node_idx": 6890,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                6890,
                6814,
                20656,
                20658,
                10877,
                19696
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: meta-environments for software productionresearchers who create software production environments face considerable problems. software production environments are large systems that are costly to develop. furthermore, software production environments which support particular software engineering methods may not be applicable to a large number of software production projects. these conditions have formed a trend towards research into ways which will lessen the cost of developing software production environments. in particular, the trend has been towards the construction of meta-environments from which specific software production environments can be created. in this paper, we attempt to categorize more than 60 meta-environment efforts. for each of the categories, we review research efforts which illustrate different approaches within that category. we conclude by presenting an emerging common thread of requirements which links this field together. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_6895",
        "graph": {
            "node_idx": 6895,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                6895,
                9835,
                6897,
                9951,
                9799,
                10623,
                21854,
                22011,
                14075,
                13933,
                7177,
                9881,
                13965,
                23805,
                16132,
                15821,
                23821
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a comparison of two practical multicast routing schemesdesigning an interdomain multicast routing scheme that makes efficient use of network resources while delivering good performance to applications is a significant challenge. a variety of schemes have been proposed, but little has been done to compare the schemes systematically over a rich set scenarios. in this work we develop a framework to do systematic evaluation of multicast routing schemes, and apply it to two practical schemes: distance vector multicast routing procotol and core based trees. we conclude that core based trees has the potential to make more efficient use of resources, with modest performance penalty. however, this requires mechanisms to choose good cores. we suggest a heuristic for evaluating the goodness of a core and moving towards a good core. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_6899",
        "graph": {
            "node_idx": 6899,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7,
                    8,
                    9,
                    6,
                    10,
                    2,
                    0,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                6899,
                10996,
                6766,
                22787,
                19820,
                4202,
                14212,
                7553,
                22541,
                18040,
                18536,
                2391,
                20392,
                11891,
                6898,
                12683
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: approximation algorithms for precedence-constrained scheduling problems on parallel machines that run at different speeds (extendedwe present new approximation algorithms for the problem of scheduling precedence-constrained jobs on parallel machines that are uniformly related. that is, there are n jobs and m machines; each job j requires p j units of processing, and is to be processed on one machine without interruption; if it is assigned to machine i, which runs at a given speed s i , it takes p j =s i time units. there also is a partial order on the jobs, where j k implies that job k may not start processing until job j has been completed. we shall consider two objective functions: c max = max j c j , where c j denotes the completion time of job j, and p for the first objective, the best previously known result is an o( m)-approximation algorithm, which was shown by jaffe more than 15 years ago. we shall give an o(log m)- approximation algorithm. we shall also show how to extend this result to obtain an o(log m)-approximation algorithm for the second objective, albeit with a somewhat larger constant. these results also extend to settings in which each job j has a release date r j before which the job may not begin processing. in addition, we obtain stronger performance guarantees if there are a limited number of distinct speeds. our results are based on a new linear programming-based technique for estimating the speed at which each job should be run, and a variant of the list scheduling algorithm of \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_6914",
        "graph": {
            "node_idx": 6914,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                6914,
                2033,
                17729,
                16592
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an instance of adaptive constraint propagationconstraint propagation algorithms vary in the strength of propagation they apply. this paper investigates a simple configuration for adaptive propagation the process of varying the strength of propagation to reflect the dynamics of search. we focus on two propagation methods, arc consistency (ac) and forward checking (fc). ac-based algorithms apply a stronger form of propagation than fc-based algorithms; they invest greater computational effort to detect inconsistent values earlier. the relative payoff of maintaining ac during search as against fc may vary for different constraints and for different intermediate search states. we present a scheme for adaptive arc propagation (aap) that allows the flexible combination of the two methods. meta-level reasoning and heuristics are used to dynamically distribute propagation effort between the two. one instance of aap, anti-functional reduction (afr), is described in detail here. afr achieves precisely the same propagation as a pure ac algorithm while significantly improving its average performance. the strategy is to gradually reduce the scope of ac propagation during backtrack search to exclude those arcs that may be subsequently handled as effectively by fc. experimental results confirm the power of \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_6915",
        "graph": {
            "node_idx": 6915,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                6915,
                2033,
                19231,
                19457,
                19474,
                16592,
                17729
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a new approach to integrate mixed integer programming with clpthis paper represents an integration of mip and clp by combining components of the clp system eclipse and the mip system cplex. our approach is introduced in three stages. firstly we present an automatic transformation which maps general clp programs onto such clp programs that any disjunction is eliminated in favour of auxiliary binary variables. secondly we present improvements of this mapping by using a committed choice operator and translations of pre-defined non-linear constraints. thirdly we introduce a new hybrid algorithm which reduces the search space of the problem progressively by calling finite domain propagation in eclipse as well as dual simplex in cplex. the advantages of this integration are illustrated by solving efficiently difficult sample problems, which the clp solver and the mip solver alone are not able to solve in reasonable time. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_6925",
        "graph": {
            "node_idx": 6925,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    3
                ]
            ],
            "node_list": [
                6925,
                6248,
                6922,
                10561,
                6923,
                20760,
                6926,
                4638
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: random walks in markov chain monte carlo using ordered overrelaxationtechnical report no. 9508, department of statistics, university of toronto markov chain monte carlo methods such as gibbs sampling and simple forms of the metropolis algorithm typically move about the distribution being sampled via a random walk. for the complex, high-dimensional distributions commonly encountered in bayesian inference and statistical physics, the distance moved in each iteration of these algorithms will usually be small, because it is difficult or impossible to transform the problem to eliminate dependencies between variables. the inefficiency inherent in taking such small steps is greatly exacerbated when the algorithm operates via a random walk, as in such a case moving to a point n steps away will typically take around n 2 iterations. such random walks can sometimes be suppressed using \"overrelaxed\" variants of gibbs sampling (a.k.a. the heatbath algorithm), but such methods have hitherto been largely restricted to problems where all the full conditional distributions are gaussian. i present an overrelaxed markov chain monte carlo algorithm based on order statistics that is more widely applicable. in particular, the algorithm can be applied whenever the full conditional distributions are such that their cumulative distribution functions and inverse cumulative distribution functions can be efficiently computed. the method is demonstrated on an inference problem for a simple hierarchical bayesian model. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_6943",
        "graph": {
            "node_idx": 6943,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                    7,
                    8,
                    9,
                    3,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                6943,
                165,
                24341,
                24769,
                14619,
                10001,
                164,
                17648,
                24522,
                5258,
                22084,
                24700
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: scheduling with compiler transformations: the tcel approachwe present tcel (time-constrained event language), which possesses first-class timing constructs, and whose semantics is based on time-constrained relationships between observable events. since the only timing constraints are imposed by observable events, the unobservable code can be automatically moved to achieve consistency between the program's worst-case execution time and its real-time requirements. based on our initial success in applying compiler transformations to sequential programs, we present a task transformation technique for control domain applications driven by rate monotonic scheduling. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_6947",
        "graph": {
            "node_idx": 6947,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                6947,
                16302,
                23959
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: representing arguments as background knowledge for constraining generalisationthe use of statistical measures to constrain generalisa-tion in learning systems has proved successful in many domains, but can only be applied where large numbers of examples exist. in domains where few training examples are available, other mechanisms for constraining gener-alisation are required. in this paper, we propose a representation of background knowledge based on arguments for and against a hypothesis rather than as statements in logic or probabilistic relations, and show how it can be used to constrain generalisation from single examples (sometimes referred to as `case-based reasoning'). examples are characterised by the set of arguments for and against a hypothesis of interest, and the resolution of conflicting arguments in a current problem is obtained by firstly locating an old example where the same or a similar conflict occurred, then secondly generalising the solution in the old example to also apply to the new problem. this allows learning to occur in domains where few training examples exist and background knowledge is available. we provide a description of this method in logical form, and analyse the assumptions under which it is valid, its limitations and possible future extensions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_6969",
        "graph": {
            "node_idx": 6969,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                6969,
                17608,
                19554
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic constraint satisfaction using case-based reasoning techniquesthe dynamic constraint satisfaction problem (dcsp) formalism has been gaining attention as a valuable and often necessary extension of the static csp framework. dynamic constraint satisfaction enables csp techniques to be applied more extensively, since it can be applied in domains where the set of constraints and variables involved in the problem evolves with time. at the same time, the case-based reasoning (cbr) community has been working on techniques by which to reuse existing solutions when solving new problems. we have observed that dynamic constraint satisfaction matches very closely the case-based reasoning process of case adaptation. these observations emerged from our previous work on combining cbr and csp to achieve a constraint-based adaptation. this paper summarizes our previous results, describes the similarity of the challenges facing both dcsp and case adaptation, and shows how csp and cbr can together begin to address these chal lenges. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_6970",
        "graph": {
            "node_idx": 6970,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    3,
                    11,
                    12,
                    2,
                    5,
                    13,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                6970,
                30,
                33,
                3579,
                16051,
                3577,
                13527,
                29,
                10417,
                14664,
                23720,
                16052,
                4455,
                18532,
                3575,
                3578
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: software tools for automating the migration from dce to corbaa subset of this paper appeared in the proceedings of iss 97: world telecommunications congress, ieee toronto, canada, september, 1997. abstract next-generation telecommunication software must be flexible and reusable. these requirements motivate the use of object-oriented (oo) middleware like the common object request broker architecture (corba). however, many existing telecommunication software products have already been written using the distributed computing environment (dce) rpc toolkit. to reduce porting effort and to minimize unnecessary rework, it is essential to provide a smooth migration path from dce to corba. this paper provides two contributions to the study of migration strategies from dce to corba. first, we describe a migration tool we developed that provides source-level interoperability between dce rpc and corba. our tool automatically translates dce interface definition language (idl) into corba idl and generates code that integrates existing dce-based code with stubs and skeletons generated by corba idl compilers. second, we present our lessons learned applying this migration tool to a project at bellcore. our experience using the tool on existing applications at bellcore indicates that source-level interoperability provides a low-cost, yet powerful solution. in addition, the time required to develop the tool (about 9 person months) was substantially less compared to developing a full scale dce-ciop protocol. we also found out that minimal human intervention was necessary to achieve interoperability. the disadvantages of using source-level interoperability arise from the fact that not all constructs in the source domain can be mapped onto the target domain. therefore, source-level interoperability may provide solutions to only a subset of constructs of the source domain (dce in our case). in practice, this was not a problem as long as programmers followed certain development guidelines. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_6992",
        "graph": {
            "node_idx": 6992,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    4
                ]
            ],
            "node_list": [
                6992,
                17616,
                9229,
                23253,
                16374,
                24050
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an executable subset of vdm-sl, in an sa/rt frameworkin this article we present the executable specification language iptes meta-iv based on the formal specification language vdm-sl. the language has been fitted to work in an sa/rt framework and the article presents how it supports the specification of the data transformation part of sa/rt. furthermore we present some of the advanced constructs of the language seen as an executable specification language in its own right. finally we present how an iptes meta-iv interpreter is used in combination with a high-level timed petri net executor to execute sa/rt models. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_6993",
        "graph": {
            "node_idx": 6993,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                6993,
                17616,
                24723
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: iptes incremental prototyping technology for embedded real-time systems interchange of information between the nodes isin esprit project no. ep5570 called iptes (iptes is an acronym for \"incremental prototyping technology for embedded real-time systems\") a methodology and a supporting environment to support the boehm's spiral principles are being developed. the prototyping environment will enable the specification and verification of executable system models so that different parts of the system may represent different modeling levels, and yet they can be executed as a total system. also problems in connection with distributed software development are addressed in the iptes environment. typically it is difficult to define the interface protocols between the processors (nodes) of a multi-processor real-time system. in the iptes project the concept of distributed prototyping is proposed as a solution. each development team working on their processor (node) can test their own physical model against the logical model of the rest of the system. the iptes environment provides a set of modules to help in the process of creating, analyzing and testing distributed heterogeneous prototypes. internally, the environment is based on a representation of the system in terms of high level time petri nets with shared places. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_7057",
        "graph": {
            "node_idx": 7057,
            "edge_index": [
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                7057,
                20177,
                20175
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an empirical comparison of progressive and wavelet radiositythis paper presents a comparison of basic progressive and wavelet ra-diosity algorithms. several variants of each algorithm were run on a set of scenes at several parameter settings, and results were examined in terms of their error, speed, and memory consumption. we did not compare more advanced variations such as clustering or discontinuity meshing. our results show that progressive ra-diosity with substructuring works fairly well for all scenes. among wavelet methods, the haar basis works best, while higher order methods suffer because of extreme memory consumption and because poor visibility handling causes dis continuous, blocky shadows. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7063",
        "graph": {
            "node_idx": 7063,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    1,
                    10,
                    11,
                    2,
                    12,
                    13,
                    14,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                7063,
                1049,
                7065,
                13803,
                2346,
                1055,
                13800,
                13804,
                7064,
                22421,
                8231,
                18030,
                853,
                21285,
                22471
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: register promotion in c programsthe combination of pointers and pointer arithmetic in c makes the task of improving c programs somewhat more difficult than improving programs written in simpler languages like fortran. while much work has been published that focuses on the analysis of pointers, little has appeared that uses the results of such analysis to improve the code compiled for c. this paper examines the problem of register promotion in c and presents experimental results showing that it can have dramatic effects on memory traffic. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_7067",
        "graph": {
            "node_idx": 7067,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                7067,
                24350,
                10424,
                13438,
                19320,
                16082,
                21465
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient rate-controlled bulk data transfer using multiple multicast groupscontrolling the rate of bulk data multicast to a large number of receivers is difficult due to the heterogeneity among the end-systems' capabilities and their available network bandwidth. if the data transfer rate is too high, some receivers will lose data, and retrans-missions will be required. if the data transfer rate is too low, an inordinate amount of time will be required to transfer the data. in this paper, we examine an approach towards rate-controlled multicast of bulk data in which the sender uses multiple multicast groups to transmit data at different rates to different sub-groups of receivers. we present simple algorithms for determining the transmission rate associated with each multicast channel, based on static resource constraints, e.g., network bandwidth bottlenecks. transmission rates are chosen so as to minimize the average time needed to transfer data to all receivers. analysis and simulation are used to show that our policies for rate selection perform well for large and diverse receiver groups and make efficient use of network bandwidth. moreover, we find that only a small number of multicast groups are needed to reap most of the possible performance benefits. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_7068",
        "graph": {
            "node_idx": 7068,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                7068,
                24350,
                10422,
                11306,
                21854,
                16082,
                14077,
                19320,
                23755,
                23756,
                23130,
                22011,
                14075
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multicast feedback suppression using representativesmost existing feedback control mechanisms based on probabilistic suppression address the feedback implosion problem by suppressing feedback using timers based on round-trip time (rtt) information. this approach requires that all receivers compute rtt to the data source. we present an algorithm whose major benefit derives from the fact that it does not need to compute rtt from receivers to the source, and does not require knowledge of group membership or network topology. we use a small set of representative receivers and probabilistic suppression to limit feedback. we believe that our approach will perform well in real networks. simulations using randomly-generated network topologies of varying sizes with pessimistic network loss rates show that representatives considerably reduce the amount of feedback compared to a purely suppression-based scheme. for various multicast group sizes, a few representatives can keep the amount of feedback low while not degrading feedback timeliness. keywords: multicast, feedback, suppression, representatives \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_7097",
        "graph": {
            "node_idx": 7097,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    11,
                    20,
                    3,
                    21,
                    22,
                    23,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                7097,
                1002,
                8561,
                5752,
                19724,
                14314,
                7096,
                7099,
                175,
                7098,
                13634,
                23178,
                15855,
                23764,
                15752,
                18695,
                10711,
                18861,
                7062,
                6734,
                23179,
                24366,
                1008,
                24611
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: matchmaking and brokeringin this paper we define the notions of agent matchmaking and brokering behaviors that are used while processing requests among initially unacquainted sets of agents. these behaviors are basic components of common organizational roles and thus must be understood by computational agents. broker-ing and matchmaking behaviors can be used to construct organizational forms such as centralized or distributed markets, ad hoc teams, and bureaucratic functional or product hierarchies. each behavior brings with it certain performance characteristicscost, robustness, and adaptiveness qualitiesthat are related to characteristics of the external environment and of the agents themselves. for example, while brokered systems are more vulnerable to certain failures, they are also able to cope more quickly with a rapidly fluctuating agent workforce. we present several agent design constraints and related models, which are experimentally validated using the warren multi-agent portfolio management system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7098",
        "graph": {
            "node_idx": 7098,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    0,
                    3,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    8,
                    17
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                7098,
                1002,
                8561,
                13634,
                5752,
                7096,
                175,
                2688,
                23178,
                15855,
                23764,
                15752,
                18695,
                10711,
                18861,
                7062,
                6734,
                23179
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: coordination of multiple intelligent software agents andwe are investigating techniques for developing distributed and adaptive collections of information agents that coordinate to retrieve, filter and fuse information relevant to the user, task and situation, as well as anticipate user's information needs. in our system of agents, information gathering is seamlessly integrated with decision support. the task for which particular information is requested of the agents does not remain in the user's head but it is explicitly represented and supported through agent collaboration. in this paper we present the distributed system architecture, agent collaboration interactions, and a reusable set of software components for structuring agents. the system architecture has three types of agents: interface agents interact with the user receiving user specifications and delivering results. they acquire, model, and utilize user preferences to guide system coordination in support of the user's tasks. task agents help users perform tasks by formulating problem solving plans and carrying out these plans through querying and exchanging information with other software agents. information agents provide intelligent access to a heterogeneous collection of information sources. we have implemented this system framework and are developing collaborating agents in diverse complex real world tasks, such as organizational decision making, investment counseling, health care, and electronic commerce. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7117",
        "graph": {
            "node_idx": 7117,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    5,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    8,
                    10
                ]
            ],
            "node_list": [
                7117,
                17644,
                18816,
                19052,
                19077,
                10108,
                19841,
                10758,
                6661,
                23118,
                15807,
                13696,
                20292,
                11743,
                20298,
                11734,
                17523
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: animating human athleticsthis paper describes algorithms for the animation of men and women performing three dynamic athletic behaviors: running, bicycling, and vaulting. we animate these behaviors using control algorithms that cause a physically realistic model to perform the desired maneuver. for example, control algorithms allow the simulated humans to maintain balance while moving their arms, to run or bicycle at a variety of speeds, and to perform a handspring vault. algorithms for group behaviors allow a number of simulated bicyclists to ride as a group while avoiding simple patterns of obstacles. we add secondary motion to the animations with spring-mass simulations of clothing driven by the rigid-body motion of the simulated human. for each simulation, we compare the computed motion to that of humans performing similar maneuvers both qualitatively through the comparison of real and simulated video images and quantitatively through the comparison of simulated and biomechanical data. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7147",
        "graph": {
            "node_idx": 7147,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                7147,
                1143,
                16499,
                3423,
                118
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: lineality removal for copositive-plus normal maps 1we are concerned with solving affine variational inequalities defined by a linear map a and a polyhedral set c. most of the existing pivotal methods for such inequalities or mixed linear complementarity problems depend on the existence of extreme points in c or a certain non-singularity property of a with respect to the lineality of c. in this paper, we prove that if a is copositive-plus with respect to the recession cone of c, then the lineality space can be removed without any further assumptions. the reductions given here extend the currently known pivotal methods to solve affine variational inequalities or prove that no solution exists, whenever a is copositive-plus withe respect to the recession cone of c. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_7165",
        "graph": {
            "node_idx": 7165,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                7165,
                17660
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hybrid array shower trajectory determination using the mia and hires detectorshires-mia data are used to evaluate the advantages of time-constrained hybrid tra \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_7176",
        "graph": {
            "node_idx": 7176,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                7176,
                17668,
                22180
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: load balancing in a distributed processing system for high-energy physics (ufmulti)experiments in high energy physics (hep) generate tremendous amounts of data. for example, the accelerator at cern is expected to generate petabytes per year. new hep discoveries require that the experimental data be carefully analyzed to identify the events of interest. to take advantage of distributed processing, we have developed a package, ufmulti, which allows physicists to specify and execute a complex distributed application. in this paper, we report on the load balancing module of ufmulti. our algorithm takes advantage of the particular structures of typical hep computations to perform very effective load balancing. for example, our dynamic load balancer takes advantage of buffered data to partially allocate a processor between tasks. as a result, it often provides better performance than any static allocation of processors to tasks. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_7188",
        "graph": {
            "node_idx": 7188,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    2,
                    13,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                7188,
                5932,
                1156,
                2803,
                4450,
                1155,
                20150,
                16500,
                16939,
                9441,
                6092,
                16998,
                17261,
                1574,
                19742,
                7075
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiagent hybrid system design using game theory and optimal control 1a methodology for designing hybrid controllers for large scale, multiagent systems is presented. our approach is based on optimal control and game theory. the hybrid design is seen as a game between two players: the control, which is to be chosen by the designer and the disturbances that encode the actions of other agents (in a multi-agent setting), the actions of high level controllers or the usual unmodeled environmental disturbances. the two players compete over cost functions that encode properties that the closed loop hybrid system needs to satisfy (e.g., safety). the control \"wins\" the game if it can keep the system \"safe\" for any allowable disturbance. the solution to the game theory problem provides the designer with continuous controllers as well as sets of safe states where the control \"wins\" the game. the sets of safe states are used to construct an interface to the discrete domain that guarantees the safe operation of the combined hybrid system. the design methodology is illustrated by means of examples. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7195",
        "graph": {
            "node_idx": 7195,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                7195,
                17672
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the synthesis kernelthe synthesis distributed operating system combines efficient kernel calls with a high-level, orthogonal interface. the key idea is the use of a code synthesizer in the kernel to generate specialized (thus short and fast) kernel routines for specific situations. we have three methods to synthesize code: factoring invariants to bypass redundant computations; collapsing layers to eliminate unnecessary procedure calls and context switches; and executable data structures to shorten data structure traversal time. applying these methods, the kernel call synthesized to read /dev/mem takes about 15 microseconds on a 68020 machine. a simple model of computation called a synthetic machine supports parallel and distributed processing. the interface to synthetic machine consists of six operations on four kinds of objects. this combination of a high-level interface with the code synthesizer avoids the traditional trade-off in operating systems between powerful interfaces and efficient implementations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_7213",
        "graph": {
            "node_idx": 7213,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                7213,
                17679,
                19048
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: stacked density estimationtechnical report no. 97-36, information and computer science department, university of california, irvine \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_7241",
        "graph": {
            "node_idx": 7241,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    4,
                    15,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                7241,
                7097,
                8561,
                16216,
                23179,
                1002,
                5752,
                19724,
                15752,
                18695,
                10711,
                18861,
                7062,
                6734,
                23178,
                23869,
                23872
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: modeling information agents: advertisements, organizational roles, and dynamic behaviorone of the most important uses of agent models is for problem-solving coordination. coordination has been defined as managing the interdependencies between activities, or pragmatically as choosing, ordering, and locating actions in time in an attempt to maximize a possibly changing set of decision criteria. coordination activities include not only localized agent interactions over specific problems, but also longer-term agent organizations that can support current and future problem-solving activity. models that support coordination can be divided into three classes: models of other agents' current intended actions, schedules, and/or plans; models of other agents' objectives (desires, goals); and models of other agents' capabilities. this paper will focus on the longer-term models of capabilities that agents need in order to organize effectively to solve problems. such models deal with an agent's capabilities and long-term commitments to certain classes of actions. besides discussing the models themselves, we will discuss the basic behaviors agents should use to construct, communicate, and update these models. finally, we will discuss how these models can support several different organizational forms such as economic markets, wiederholdian federations, and bureaucratic functional units. the work will be presented in the context of an implemented agent architecture for internet information gathering in dynamic domains such as financial portfolio management (called warren). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7255",
        "graph": {
            "node_idx": 7255,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                7255,
                10053,
                19034,
                14967
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on centering neural network weight updatestechnical report idsia-19-97 abstract. it has long been known that neural networks can learn faster when their input and hidden unit activities are centered about zero; recently we have extended this approach to also encompass the centering of error signals (schraudolph and sejnowski, 1996). here we generalize this notion to all factors involved in the weight update, leading us to propose centering the slope of hidden unit activation functions as well. slope centering removes the linear component of backpropagated error; this improves credit assignment in networks with shortcut connections. benchmark results show that this can speed up learning significantly without adversely affecting the trained network's generalization ability. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_7261",
        "graph": {
            "node_idx": 7261,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    8,
                    12,
                    13,
                    10,
                    4,
                    14,
                    2,
                    6,
                    15,
                    16,
                    8,
                    12,
                    10,
                    17,
                    18,
                    19,
                    14,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    20,
                    27,
                    28,
                    29,
                    30,
                    31,
                    5,
                    32,
                    8,
                    30,
                    33,
                    10,
                    34,
                    35,
                    36,
                    28
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                7261,
                10767,
                18341,
                10483,
                19370,
                6681,
                20,
                12208,
                4407,
                1459,
                22401,
                3164,
                20909,
                22373,
                17531,
                16025,
                12620,
                10556,
                88,
                214,
                12643,
                12789,
                15513,
                3193,
                18588,
                7976,
                12203,
                1049,
                7260,
                4409,
                1544,
                21039,
                12536,
                1458,
                22456,
                212,
                9857
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reducing branch costs via branch alignmentseveral researchers have proposed algorithms for basic block reordering. we call these branch alignment algorithms. the primary emphasis of these algorithms has been on improving instruction cache locality, and the few studies concerned with branch prediction reported small or minimal improvements. as wide-issue architectures become increasingly popular the importance of reducing branch costs will increase, and branch alignment is one mechanism which can effectively reduce these costs. in this paper, we propose an improved branch alignment algorithm that takes into consideration the architectural cost model and the branch prediction architecture when performing the basic block reordering. we show that branch alignment algorithms can improve a broad range of static and dynamic branch prediction architectures. we also show that a programs performance can be improved by approximately 5% even when using recently proposed, highly accurate branch prediction architectures. the programs are compiled by any existing compiler and then transformed via binary transformations. when implementing these algorithms on a alpha axp 21604 up to a 16% reduction in total execution time is achieved. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_7280",
        "graph": {
            "node_idx": 7280,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                    7,
                    2,
                    8,
                    9,
                    3,
                    6,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                7280,
                7461,
                11658,
                7371,
                17752,
                18054,
                8313,
                6465,
                15315,
                11622,
                12917,
                12908,
                12922
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: extended goursat normal forms with applications to nonholonomic motion planningthe theme of this paper is the generalization of goursat normal forms for pfaffian systems with co-dimension greater than two. there are necessary and sufficient conditions for the existence of coordinates that transform a pfaffian system with co-dimension greater than two into an extended goursat normal form, which is the dual of the multiple-chain, single-generator chained form mentioned in our earlier work. in this paper, we concentrate on how to find such coordinate transformations for multi-steering, multi-trailer mobile robot systems so that we can use available steering and stabilization algorithms for nonholonomic motion planning. we present a methodology for constructing a coordinate transformation and apply it to the example of a five-axle, two-steering mobile robot. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_7287",
        "graph": {
            "node_idx": 7287,
            "edge_index": [
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                7287,
                17695,
                19588
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on characterizations of the input-to-state stability propertywe show that the well-known lyapunov sufficient condition for \"input-to-state stability\" is also necessary, settling positively an open question raised by several authors during the past few years. additional characterizations of the iss property, including one in terms of nonlinear stability margins, are also provided. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_7349",
        "graph": {
            "node_idx": 7349,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    4,
                    1,
                    2,
                    0,
                    8,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                7349,
                4608,
                18520,
                1137,
                5757,
                11552,
                9884,
                16667,
                733,
                1136
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning when reformulation is appropriate for iterative designit is well known that search-space reformulation can improve the speed and reliability of numerical optimization in engineering design. we argue that the best choice of reformulation depends on the design goal, and present a technique for automatically constructing rules that map the design goal into a reformulation chosen from a space of possible reformulations. we tested our technique in the domain of racing-yacht-hull design, where each reformulation corresponds to incorporating constraints into the search space. we applied a standard inductive-learning algorithm, c4.5, to a set of training data describing which constraints are active in the optimal design for each goal encountered in a previous design session. we then used these rules to choose an appropriate reformulation for each of a set of test cases. our experimental results show that using these reformulations improves both the speed and the reliability of design optimization, outperforming competing methods and approaching the best performance possible. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_7350",
        "graph": {
            "node_idx": 7350,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    3,
                    11,
                    12,
                    1,
                    13,
                    14,
                    15,
                    6,
                    16,
                    17,
                    18,
                    19,
                    20,
                    6,
                    21,
                    22,
                    16,
                    23,
                    24,
                    25,
                    26,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                7350,
                2484,
                25048,
                18311,
                20457,
                10441,
                8059,
                20450,
                11992,
                21632,
                10439,
                9285,
                11043,
                8270,
                11951,
                11994,
                5967,
                11944,
                20456,
                17961,
                5088,
                23037,
                23038,
                11804,
                11980,
                11963,
                25052
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolution of mapmaking: learning, planning, and memory using genetic programmingan essential component of an intelligent agent is the ability to observe, encode, and use information about its environment. traditional approaches to genetic programming have focused on evolving functional or reactive programs with only a minimal use of state. this paper presents an approach for investigating the evolution of learning, planning, and memory using genetic programming. the approach uses a multi-phasic fitness environment that enforces the use of memory and allows fairly straightforward comprehension of the evolved representations . an illustrative problem of 'gold' collection is used to demonstrate the usefulness of the approach. the results indicate that the approach can evolve programs that store simple representations of their environments and use these representations to produce simple plans. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_7404",
        "graph": {
            "node_idx": 7404,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                7404,
                17728,
                18012,
                22220
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: frameworks for intra- and interprocedural dataow analysistechnical report 96-11-02 november 1996 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_7438",
        "graph": {
            "node_idx": 7438,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                7438,
                20781
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: nonlinearity, hyperplane ranking and the simple genetic algorithmseveral metrics are used in empirical studies to explore the mechanisms of convergence of genetic algorithms. the metric is designed to measure the consistency of an arbitrary ranking of hyperplanes in a partition with respect to a target string. walsh coefficients can be calculated for small functions in order to characterize sources of linear and nonlinear interactions. a simple deception measure is also developed to look closely at the effects of increasing nonlinearity of functions. correlations between the metric and deception measure are discussed and relationships between and convergence behavior of a simple genetic algorithm are studied over large sets of functions with varying degrees of nonlinearity. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_7446",
        "graph": {
            "node_idx": 7446,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                7446,
                10245,
                14108,
                19815,
                9534,
                8531
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the minimum feature set problemthis paper appeared in neural networks 7 (1994), no. 3, pp. 491-494. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_7460",
        "graph": {
            "node_idx": 7460,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    4,
                    8,
                    9,
                    10,
                    11,
                    12,
                    4,
                    13,
                    14,
                    15,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                7460,
                17752,
                7281,
                7117,
                19841,
                23942,
                7461,
                18054,
                17644,
                18816,
                19052,
                19077,
                10108,
                10758,
                6661,
                23118,
                15807
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic simulation of splashing fluidsin this paper we describe a method for modeling the dynamic behavior of splashing fluids. the model simulates the behavior of a fluid when objects impact or float on its surface. the forces generated by the objects create waves and splashes on the surface of the fluid. to demonstrate the realism and limitations of the model, images from a computer-generated animation are presented and compared with video frames of actual splashes occuring under similar initial conditions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7496",
        "graph": {
            "node_idx": 7496,
            "edge_index": [
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                7496,
                17760,
                19540
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: score: a compiler representation for heterogeneous systemsheterogeneous parallel systems incorporate different models of parallelism within a single machine or across machines and are well suited for many diverse applications [1, 2, 3]. these systems offer a wealth of underutilized resources for achieving high performance, but are more difficult to program than homogeneous systems. compilers can and should assist in handling this complexity. previous research has not considered the impact of architectural heterogeneity on the compiler structure [4]. a compiler for heterogeneous systems needs to order transformations based on component architectures, represent diverse architectural features, allow extension to cover new machines, and reuse its transformations and intermediate representation (ir) to target different architectures. a compiler's ir plays a central role in supporting these capabilities. this paper discusses each of these implications in detail and presents an intermediate representation, score, that meets the needs of heterogeneity. in addition to incorporating nodes to represent a variety of architectural features, score supports a new bi-level representation of important language constructs and employs a novel approach to defining the interface between transformations and ir nodes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_7501",
        "graph": {
            "node_idx": 7501,
            "edge_index": [
                [
                    1,
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                7501,
                2571,
                2573,
                18724,
                18929,
                19901
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mmpi: asynchronous message management for the message-passing interfacethe message-passing interface (mpi) standard defines an asynchronous message passing functionality through primitive nonblocking send and receive operations. applications which use asynchronous message passing within mpi must assume responsibility for managing the mpi nonblocking send and receive primitives. for an application with dynamic interprocessor communication requirements, asynchronous message management is a complex task. the asynchronous message management for mpi (mmpi) library described in this report has been developed to simplify dynamic asynchronous message passing with mpi. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_7504",
        "graph": {
            "node_idx": 7504,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    3,
                    10,
                    11,
                    12,
                    13,
                    2,
                    3,
                    14,
                    15,
                    16,
                    13,
                    17,
                    18,
                    8,
                    19,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                7504,
                2818,
                13246,
                21290,
                21291,
                3715,
                3529,
                3040,
                3080,
                22300,
                13261,
                5117,
                13460,
                17541,
                6962,
                2561,
                5357,
                10318,
                9288,
                5150
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the design of the seer predictive caching systemsupporting portable computers in a disconnected environment will require persistent caching of files without user intervention. seer is a system that uses semantic information to predict which files the user is likely to work on, and arranges to transparently cache them on the portable platform prior to disconnection. we present the overall design of the seer system and the algorithms used to determine semantic relationships. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_7537",
        "graph": {
            "node_idx": 7537,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                7537,
                17779,
                8819,
                18264
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: scalable backoff language modelswhen a trigram backoff language model is created from a large body of text, trigrams and bigrams that occur few times in the training text are often excluded from the model in order to decrease the model size. generally, the elimination of n-grams with very low counts is believed to not significantly affect model performance. this project investigates the degradation of a trigram back-off model's perplexity and word error rates as bigram and trigram cutoffs are increased. the advantage of reduction in model size is compared to the increase in word error rate and perplexity scores. more importantly, this project also investigates alternative ways of excluding bigrams and trigrams from a backoff language model, using criteria other than the number of times an n-gram occurs in the training text. specifically, a difference method has been investigated where the difference in the logs of the original and backed off trigram and bigram probabilities is used as a basis for n-gram exclusion from the model. we show that excluding trigrams and bigrams based on a weighted version of this difference method results in better perplexity and word error rate performance than excluding trigrams and bigrams based on counts alone. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_7548",
        "graph": {
            "node_idx": 7548,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    4,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                7548,
                17787,
                5151,
                20630,
                21314,
                17108,
                21291,
                9109,
                22125
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an empirical study of a wide-area distributed file systemthe evolution of the andrew file system (afs) into a wide-area distributed file system has encouraged collaboration and information dissemination on a much broader scale than ever before. in this paper, we examine afs as a provider of wide-area file services to over a hundred organizations around the world. we discuss usage characteristics of afs derived from empirical measurements of the system. our observations indicate that afs provides robust and efficient data access in its current configuration, thus confirming its viability as a design point for wide-area distributed file systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_7560",
        "graph": {
            "node_idx": 7560,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5,
                    6,
                    0,
                    2,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                7560,
                7331,
                24868,
                8717,
                5625,
                8403,
                481,
                23899,
                23900
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: simple selection of utile control rules in speedup learningmany recent approaches to avoiding the utility problem in speedup learning rely on sophisticated utility measures and significant numbers of training data to accurately estimate the utility of control knowledge. empirical results presented here and elsewhere indicate that a simple selection strategy of retaining all control rules derived from a training problem explanation quickly defines an efficient set of control knowledge from few training problems. this simple selection strategy provides a low-cost alternative to example-intensive approaches for improving the speed of a problem solver. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_7589",
        "graph": {
            "node_idx": 7589,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                7589
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experimentation with a transcranial magnetic stimulation system for functional brain mappingwe describe functional brain mapping experiments using a transcranial magnetic stimulation (tms) device. this device, when placed on a subject's scalp, stimulates the underlying neurons by generating focused magnetic field pulses. a brain mapping is then generated by measuring responses of different motor and sensory functions to this stimulation. the key process in generating this mapping is the association of the 3d positions and orientations of the tms probe on the scalp to a 3d brain reconstruction such as is feasible with a magnetic resonance image (mri). we have developed a system which not only generates functional brain maps using such a device, but also provides real-time feedback to guide the technician in placing the probe at appropriate points on the head for achieving the desired map resolution. functional areas we have mapped are the motor and visual cortex. validation experiments to date have consisted of repeatability and symmetry tests for mapping the same subjects several times. applications of the technique include neuranatomy research, surgical planning and guidance, treatment and disease monitoring, and therapeutic procedures. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_7593",
        "graph": {
            "node_idx": 7593,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    3,
                    1,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                7593,
                8335,
                1500,
                7596,
                7592,
                7594
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: \"optimal\" collecting semantics for analysis in a hierarchy of logic program semanticsin this paper we apply abstract interpretation to systematically derive, compose and compare semantics according to their expressive power. the main results are: (1) a definition of a hierarchy of collecting semantics, including well known semantics for logic programs, where semantics can be related to each other by abstract interpretation; (2) a characterization of collecting and abstract semantics in terms of collecting and abstract models for a program; (3) a correspondence between collecting and abstract models providing a \"logical\" interpretation of the typical loss of precision of abstract interpretation-based analysis; (4) a systematic approach to derive and compose collecting semantics in a lattice-theoretic environment; (5) a constructive characterization for the \"best\" collecting semantics for analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_7594",
        "graph": {
            "node_idx": 7594,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2,
                    4,
                    1,
                    5,
                    0,
                    1,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                7594,
                8335,
                1500,
                7595,
                7596,
                7592
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: weak relative pseudo-complements of closure operatorswe define the notion of weak relative pseudo-complement on meet semi-lattices, and we show that it is strictly weaker than relative pseudo-complementation, but stronger than pseudo-complementation. our main result is that if a complete lattice l is meet-continuous, then every closure operator on l admits weak relative pseudo-complements with respect to continuous closure operators on l. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_7596",
        "graph": {
            "node_idx": 7596,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                7596,
                8335,
                7592,
                1500
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: compositional optimization of disjunctive abstract interpretationswe define the inverse operation for disjunctive completion, introducing the notion of least disjunctive basis for an abstract domain d: this is the most abstract domain inducing the same disjunctive completion as d. we show that the least disjunctive basis exists in most cases, and study its properties in relation with reduced product of abstract interpretations. the resulting framework is powerful enough to be applied to arbitrary abstract domains for analysis, providing advanced algebraic methods for domain manipulation and optimization. these notions are applied to abstract domains for analysis of functional and logic programming languages. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_7606",
        "graph": {
            "node_idx": 7606,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                7606,
                16172,
                20653,
                23836
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: software agents: an overviewagent software is a rapidly developing area of research. however, the overuse of the word agent has tended to mask the fact that, in reality, there is a truly heterogeneous body of research being carried out under this banner. this overview paper presents a typology of agents. next, it places agents in context, defines them and then goes on, inter alia, to overview critically the rationales, hypotheses, goals, challenges and state-of-the-art demonstrators of the various agent types in our typology. hence, it attempts to make explicit much of what is usually implicit in the agents literature. it also proceeds to overview some other general issues which pertain to all the types of agents in the typology. this paper largely reviews software agents, and it also contains some strong opinions that are not necessarily widely accepted by the agent community. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7614",
        "graph": {
            "node_idx": 7614,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    2,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3
                ]
            ],
            "node_list": [
                7614,
                2472,
                18765,
                13377,
                16640,
                2105,
                2469,
                7613,
                8024,
                1890,
                22903,
                13365,
                21399
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: max np-completeness made easywe introduce a simple technique to obtain reductions between optimization constraint satisfaction problems. the technique uses the probabilistic method to reduce the size of disjunctions. as a first application, we prove the max np-completeness of max 3sat without using the pcp theorem (thus solving an open question posed in khanna et al. (1994)). successively, we show that the \"planar\" restrictions of several optimization constraint satisfaction problems admit linear-time approximation schemes (thus improving the results of khanna and motwani \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_7624",
        "graph": {
            "node_idx": 7624,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    0,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    4,
                    5
                ]
            ],
            "node_list": [
                7624,
                5830,
                4814,
                20167,
                11550,
                9583,
                5320,
                5910,
                18650,
                24234,
                24623,
                20169,
                18745
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: treatment planning for a radiosurgical system with general kinematicsin radiosurgery a beam of radiation is used as an ablative surgical instrument to destroy brain tumors. treatment planning consists of computing a sequence of beam configurations for delivering a necrotic dose to the tumor, without damaging healthy tissue or particularly critical structures. in current systems, kinematic limitations severely constrain beam motion. this often results in inappropriate dose distributions. a new radiosurgical system has been implemented to overcome this disadvantage. in this system, a compact radiation source of high energy is moved by a 6-dof robotic arm. we describe algorithms for computing a motion with specified characteristics for this new system. treatment plans used at test sites with earlier systems are compared to plans computed with the described algorithms. the experience reported shows that full kinematic flexibility combined with treatment planning algorithms allows for better protection of healthy tissue and higher dosage in tumors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_7625",
        "graph": {
            "node_idx": 7625,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    4,
                    3,
                    4,
                    1,
                    2,
                    4,
                    0,
                    1,
                    2,
                    3,
                    4,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                7625,
                9101,
                9102,
                7626,
                7627
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a new structure from motion ambiguitywe demonstrate the existence of a new approximate ambiguity in structure from motion which occurs as generically as the bas-relief ambiguity but applies more strongly to scenes with larger depth variation. it occurs for moderate translations and field of view (as for the bas-relief ambiguity) and applies to multi-frame, finite-motion sequences where the camera moves roughly along a line, as well as to optical flow. previous work on the bas-relief ambiguity gave a partial characterization of the error sensitivities in recovering the camera heading, assuming that the scene was non-planar and that the heading was sufficiently different from the view direction. our analysis completes the understanding of the error sensitivities under these conditions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_7628",
        "graph": {
            "node_idx": 7628,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    3,
                    4,
                    3,
                    4,
                    1,
                    2,
                    4,
                    5,
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                7628,
                9101,
                9102,
                7626,
                7627,
                7625
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: structure from linear or planar motionswe recently demonstrated a new approach to mul-tiframe structure from motion from point features which, in the appropriate domain, provably reconstructs structure and motion correctly. the algorithm works for general motion and large perspective effects. in this paper, we describe how to adapt our approach to translational motion lying along a line or in a plane, with arbitrary rotations. an analysis of the bas-relief effect for multiple-motion sequences is also presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_7633",
        "graph": {
            "node_idx": 7633,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    3,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    4,
                    6,
                    7
                ]
            ],
            "node_list": [
                7633,
                24398,
                10557,
                9196,
                10033,
                25035,
                10594,
                13579,
                4638,
                19018,
                21584
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the em algorithm for mixtures of factor analyzerstechnical report crg-tr-96-1 may 21, 1996 (revised feb 27, 1997) abstract factor analysis, a statistical method for modeling the covariance structure of high dimensional data using a small number of latent variables, can be extended by allowing different local factor models in different regions of the input space. this results in a model which concurrently performs clustering and dimensionality reduction, and can be thought of as a reduced dimension mixture of gaussians. we present an exact expectation-maximization algorithm for fitting the parameters of this mixture of factor analyzers. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, neural networks"
            }
        ]
    },
    {
        "id": "cora_test_7661",
        "graph": {
            "node_idx": 7661,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                7661,
                18771,
                10956,
                9691,
                9943
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: space-efficient inference in dynamic probabilistic networksdynamic probabilistic networks (dpns) are a useful tool for modeling complex stochastic processes. the simplest inference task in dpns is monitoring | that is, computing a posterior distribution for the state variables at each time step given all observations up to that time. recursive, constant-space algorithms are well-known for monitoring in dpns and other models. this paper is concerned with hindsight | that is, computing a posterior distribution given both past and future observations. hindsight is an essential subtask of learning dpn models from data. existing algorithms for hindsight in dpns use o(sn ) space and time, where n is the total length of the observation sequence and s is the state space size for each time step. they are therefore impractical for hindsight in complex models with long observation sequences. this paper presents an o(s log n ) space, o(sn log n ) time hindsight algorithm. we demonstrates the effectiveness of the algorithm in two real-world dpn learning problems. we also discuss the possibility of an o(s)-space, o(sn )-time algorithm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_7667",
        "graph": {
            "node_idx": 7667,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                7667,
                17825,
                18518
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: constructive induction of cartesian product attributesconstructive induction is the process of changing the representation of examples by creating new attributes from existing attributes. in classification, the goal of constructive induction is to find a representation that facilitates learning a concept description by a particular learning system. typically, the new attributes are boolean or arithmetic combinations of existing attributes and the learning algorithms used are decision trees or rule learners. we describe the construction of new attributes that are the cartesian product of existing attributes. we consider the effects of this operator on a bayesian classifier an a nearest neighbor algorithm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_7683",
        "graph": {
            "node_idx": 7683,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    4,
                    4,
                    10,
                    6,
                    7,
                    2,
                    4,
                    3,
                    4,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    4,
                    4,
                    6,
                    7,
                    8,
                    8,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                7683,
                17835,
                13575,
                18812,
                13578,
                21589,
                13640,
                13595,
                8104,
                9693,
                13577
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: movement, activity, and action: the role of knowledge in the perception of motionm.i.t media laboratory perceptual computing section technical report no. 413 appears in the royal society workshop on knowledge-based vision in man and machine, london, england | february, 1997 to appear: proceedings of the royal socoiety abstract we present several approaches to the machine perception of motion and discuss the role and levels of knowledge in each. in particular we describe different techniques of motion understanding as focusing on one of movement, activity, or action. movements are the most atomic primitives, requiring no contextual or sequence knowledge to be recognized; movement is often addressed using either view- invariant or view specific geometric techniques. activity refers to sequences of movements or states, where the only real knowledge required is the statistics of the sequence; much of the recent work in gesture understanding falls within this category of motion perception. finally, actions are larger scale events which typically include interaction with the environment and causal relationships; action understanding straddles the gray division between perception and cognition, computer vision and artificial intelligence. we illustrate these levels with examples drawn mostly from our work in understanding motion in video imagery and argue the utility of such a division is that it makes explicit the representational competencies and manipulations necessary for perception. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_7685",
        "graph": {
            "node_idx": 7685,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    0,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2
                ]
            ],
            "node_list": [
                7685,
                9824,
                12834,
                12835
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: robustness analysis of bayesian networks with finitely generated convex sets of distributionsthis paper presents exact solutions and convergent approximations for inferences in bayesian networks associated with finitely generated convex sets of distributions. robust bayesian inference is the calculation of bounds on posterior values given perturbations in a probabilistic model. the paper presents exact inference algorithms and analyzes the circumstances where exact inference becomes intractable. two classes of algorithms for numeric approximations are developed through transformations on the original model. the first transformation reduces the robust inference problem to the estimation of probabilistic parameters in a bayesian network. the second transformation uses lavine's bracketing algorithm to generate a sequence of maximization problems in a bayesian network. the analysis is extended to the *-contaminated, the lower density bounded, the belief function, the sub-sigma, the density bounded, the total variation and the density ratio classes of distributions. c fl1996 carnegie mellon university \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_7692",
        "graph": {
            "node_idx": 7692,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                7692,
                3518,
                14865,
                808,
                18978,
                8365,
                1844,
                23453
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: flow control in high-speed networks with long delaysthe flow control component of a transport layer protocol regulates the natural data transmission rate of an application to match the service rate offered by the network. in this paper, we study the problems that arise when a flow control protocol has to deal with long delays in receiving information about network state, and has large amounts of data transmitted but unacknowledged. we describe three representative flow control protocols, and study their behavior on a suite of three benchmark scenarios. our simulations indicate that in networks with large delays, protocols that are insensitive to the state of the network, or that require multiple round trip times to attain the optimal transmission rate, will perform poorly. the packet-pair protocol, which avoids these problems, is shown to perform well under rather adverse conditions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_7695",
        "graph": {
            "node_idx": 7695,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                7695,
                3518,
                808,
                18978,
                8365,
                1844
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the usefulness of explicit congestion notification in broadband networkscurrent proposals for feedback flow control in broadband networks include the use of explicit congestion notification (ecn) bits, which carry information about congestion inside the network. the effectiveness of ecn-based control methods depend on the number of ecn bits used and the delay cells carrying these bits incur before reaching the source. we develop a stochastic fluid model for a single virtual circuit that captures both the ecn feedback information and the sharing of transmission resources with other virtual circuits. we apply statistical estimation techniques to estimate the instantaneous level of congestion inside the network and define a flow control policy based on these estimates. we evaluate the performance of our control policy through simulation. in particular, we compare loss probabilities as a function of the number of ecn bits and the feedback delay. finally, we compare our flow control method to the popular leaky-bucket method. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_7723",
        "graph": {
            "node_idx": 7723,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    4,
                    11,
                    12,
                    13,
                    14,
                    5,
                    1,
                    15,
                    4,
                    16,
                    7,
                    0,
                    17,
                    18,
                    0,
                    8,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                7723,
                17847,
                10430,
                856,
                19329,
                19694,
                21421,
                21545,
                21549,
                13508,
                10950,
                6908,
                2627,
                855,
                7340,
                851,
                4416,
                4693,
                8837
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automatic synchronization elimination in synchronous forallsipd, university of karlsruhe, germany, email: (phlipp j heinze) @ ira.uka.de this paper appeared in: frontiers'95: the fifth symposium on the frontiers of massively parallel computation, pages 350-357, mclean, virginia, february 6-9, 1995 abstract this paper investigates a promising optimization technique that automatically eliminates redundant synchronization barriers in synchronous foralls. we present complete algorithms for the necessary program restructurings and subsequent code generation. furthermore, we discuss the correctness, complexity, and performance of our restructuring algorithm before we finally evaluate its practical usefulness by quantitative experimentation. the experimental evaluation results are very encouraging. an implementation of the optimization algorithms in our modula-2* compiler eliminated more than 50% of the originally present synchronization barriers in a set of seven parallel benchmarks. this barrier reduction improved the execution times of the generated programs by over 40% on a maspar mp-1 with 16384 processors and by over 100% on a sequential workstation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_7725",
        "graph": {
            "node_idx": 7725,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                7725
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: extraction of concise and realistic 3-d models from real datawe have developed a novel algorithm for extracting concise 3-d surface models of a scene from real sensor data that can be used for virtual reality modeling of the world. our algorithm produces an accurate and realistic description of a scene even in the presence of sensor noise, sparse data and incomplete scene descriptions. we have demonstrated order of magnitude reduction in the number of faces used to describe a scene using data from multibaseline omnidirectional stereo, structure from motion, and a light stripe range finder. the algorithm takes as input a surface mesh describing the scene and a co-registered image. it outputs a surface mesh with fewer vertices and faces to which the appearance of the scene is mapped. our simplification and noise reduction algorithm is based on a segmentation of the input surface mesh into surface patches using a least squares fitting of planes. simplification is achieved by extracting, approximating and triangulating the bound-aries between surface patches. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7729",
        "graph": {
            "node_idx": 7729,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                7729,
                6370
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the bdim agent toolkit designthe bdim (belief, desire, intention, message) agent toolkit is a collection of java classes designed to enable rapid prototyping of new architectures for bdi agents. its cornerstone is a java package, bdim, which is a framework for defining plans and beliefs. two alternative packages providing run-time support for bdim are part of the toolkit. the first, simplebdi, implements an unsophisticated agent architecture, similar to existing bdi systems. the second, tomas (transaction oriented multi agent system), adopts the distributed nested transaction paradigm to perform automatic concurrency control and multi-agent coordination. this paper presents the detailed designs and usage guidelines of bdim, simplebdi and tomas. acknowledgements the authors would like to thank evan harris for his precious comments. the research was supported by an australian research council grant, the key centre for knowledge based systems, and the cooperative research centre for intelligent decision systems. p. busetta was supported by an australian postgraduate award (apa) scholarship. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7733",
        "graph": {
            "node_idx": 7733,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4
                ]
            ],
            "node_list": [
                7733,
                17848,
                7265,
                1584,
                13312,
                17690,
                16549,
                7534,
                8230,
                20619,
                9936,
                6388,
                14326,
                13737,
                23168,
                23750,
                11872,
                15201
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic time windows and generalized virtual clock: combined closed-loop/open-loop congestion control g a fairness criterionthis paper presents mechanisms for congestion control of data traffic in high speed wide area networks (hswans). the network model assumes reservation of resources based on average requirements. the mechanisms address (a) the different time scales for network congestion (short term and medium-term), (b) admission control that allows controlled variance of traffic as a function of medium-term congestion (dynamic time windows), and (c) prioritized switch scheduling, based on a new fairness criterion for short term congestion (pulse). this latter criterion is proposed as the appropriate fairness measure for hswans. preliminary performance studies show that when network utilization approaches unity, the dynamic time window admission control can protect the network from buffer overruns and excessive queuing delays, and when network utilization level is smaller, the admission control may be relaxed to allow a controlled amount of variance that attempts to simultaneously meet the performance goals of the end-user and that of the network provider. the pulse prioritized switch scheduling algorithm proposed and studied in this paper is a generalization of the virtual clock algorithm [zhang 91]. g simulation and (limited) analytical results for expected queu ing times in switches, \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_7763",
        "graph": {
            "node_idx": 7763,
            "edge_index": [
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                7763,
                13729,
                1377
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: distribution of the loss period for some queues in continuous and discrete timefor soft real-time communication systems, packet loss due to excessive delay rather than average delay becomes the critical performance issue. while most previous studies of real-time systems measure loss as a time-average fraction of excessively delayed packets, this paper characterizes the stochastic properties of time-out loss periods for infinite queues, that is, uninterrupted intervals during which the virtual wait is at or above some fixed threshold. we present analytic expressions and numerical techniques for computing both \"time-based\" measures such as the distribution of periods during which all arriving packets are lost due to excessive delay as well as \"packet-based\" measures such as the distribution of the number of consecutively lost packets and the number of successful packets between such periods of loss. both continuous and discrete-time systems are examined. it is shown that the assumption of random packet loss severely underestimates the number of consecutively lost packets. also, the loss period is found to be independent of the waiting time threshold for the g/m/1 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_7796",
        "graph": {
            "node_idx": 7796,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                7796,
                1254,
                19853,
                34,
                7797,
                16693,
                1222,
                4264,
                1253,
                11711,
                2116,
                1583
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a polymorphic future and first-class function type for concurrent object-oriented programminga \"future\" is a typed synchronization mechanism used to represent a value that will come into existence at some point in time after the creation of the future. in this paper, a polymorphic future type is introduced that differs from previous mechanisms in that it provides a first-class, extensible facility for expressing synchronized access to the typed result value of a concurrent computation. the proposed mechanism requires write-once/read-many synchronization, which is implemented in terms of common thread synchronization primitives, thereby ensuring a high-degree of efficiency. the type definition and type specialization features of c++ are used to illustrate how one would implement a polymorphic future type in a strongly typed object-oriented language supporting polymorphic type definitions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_7803",
        "graph": {
            "node_idx": 7803,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                7803,
                10962
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: analyzing gas using markov models with semantically ordered and lumped statesat the previous foga workshop, we presented some initial results on using markov models to analyze the transient behavior of genetic algorithms (gas) being used as function optimizers (gafos). in that paper, the states of the markov model were ordered via a simple and mathematically convenient lexicographic ordering used initially by nix and vose. in this paper, we explore alternative orderings of states based on interesting semantic properties such as average fitness, degree of homogeneity, average attractive force, etc. we also explore lumping techniques for reducing the size of the state space. analysis of these reordered and lumped markov models provides new insights into the transient behavior of gas in general and gafos in particular. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_7820",
        "graph": {
            "node_idx": 7820,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                7820,
                6738,
                18325,
                9671,
                18317,
                8918,
                19150
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: drrm: dynamic resource reservation managermuch of the success of the internet can be attributed to the ip \"hour-glass\" model: ip provides a consistent, best-effort service interface that has allowed the relatively independent development of applications and underlying networking technology. as network services and applications become more complex, so does the task of mapping an application to the appropriate service. we propose a dynamic resource reservation manager (drrm ) that maps application streams into network services. this entity will shield applications from the details of network services, in the same spirit as the hour-glass model of ip. we describe the architecture and implementation of a drrm , and investigate a key problem that must be solved: determining locations to renegotiate connection parameters. we consider the complexity of finding the optimal locations, and propose heuristics for both on-line and offline cases. we evaluate the performance of the heuristics using several application models. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_7825",
        "graph": {
            "node_idx": 7825,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    1,
                    3,
                    15,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                7825,
                175,
                12059,
                7824,
                3473,
                17843,
                177,
                8561,
                7241,
                23178,
                18179,
                8657,
                7099,
                21798,
                1001,
                12060
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: distributed sensor interpretation: modeling agent interpretations in dresuncmpsci technical report 93-75 september 1993 abstract the dresun testbed for research on distributed situation assessment (dsa) was developed to explore the implications of having agents with more sophisticated evidential representations and control capabilities than the agents that were used in our earlier research with the distributed vehicle monitoring testbed (dvmt). in dresun, communication among the agents is driven by the goal of determining the global consistency of local agent solutions, with unresolved global consistency questions viewed as sources of uncertainty about the correctness of local agent solutions. this paper reports on issues that have arisen in modeling the beliefs of other agents when dealing with inter-agent communication of incomplete and conflicting evidence, and evidence at multiple levels of abstraction. experimentation showed that extensions to the dresun model of external evidence were necessary to better represent the uncertainties that occur when dresun agents exchange such information. these are important issues since dsa agents typically must exchange much information in order to meet their goals. furthermore, because dsa agents require evidential representations, this work is different from dai work that has used justification-based representations of belief and has focused on methods for automatically maintaining (some level of) global consistency. initial experimentation has been done with a variety of simulated distributed aircraft monitoring scenarios involving local solutions that are globally inconsistent and local solution uncertainty that can be resolved only through agent interactions. these experiments suggest that dresun agents have the flexibility to support the complex communication protocols and highly directed information exchanges that we believe are necessary to resolve global inconsistencies in dsa applications. fl this paper is a revised and extended version of the paper, \"resolving global inconsistency in distributed sensor interpretation: modeling agent interpretations in dresun\" that appeared in the proceedings of the 12th international workshop on distributed artificial intelligence, may, 1993. this work was supported by the department of the navy, office of the chief of naval research, under contract n00014-92-j-1450. the content of the information does not necessarily reflect the position or the policy of the government, and no official endorsement should be inferred. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7828",
        "graph": {
            "node_idx": 7828,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    0,
                    11,
                    3,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                7828,
                10370,
                746,
                19349,
                22884,
                17825,
                16952,
                8064,
                18090,
                7827,
                2904,
                6996,
                10202
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improved boosting algorithms using confidence-rated predictionswe describe several improvements to freund and schapire's adaboost boosting algorithm, particularly in a setting in which hypotheses may assign confidences to each of their predictions. we give a simplified analysis of adaboost in this setting, and we show how this analysis can be used to find improved parameter settings as well as a refined criterion for training weak hypotheses. we give a specific method for assigning confidences to the predictions of decision trees, a method closely related to one used by quinlan. this method also suggests a technique for growing decision trees which turns out to be identical to one proposed by kearns and mansour. we focus next on how to apply the new boosting algorithms to multiclass classification problems, particularly to the multi-label case in which each example may belong to more than one class. we give two boosting methods for this problem. one of these leads to a new method for handling the single-label case which is simpler but as effective as techniques suggested by freund and schapire. finally, we give some experimental results comparing a few of the algorithms discussed in this paper. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_7856",
        "graph": {
            "node_idx": 7856,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                7856,
                17885
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: model-based design and verification of security protocols using lotoswe explain how the formal language lotos can be used to specify security protocols and cryptgraphic operations. we describe how to model security properties as safety properties and how a model-based verification method can be used to verify the robustness of a protocol against attacks of an intruder. we illustrate our technique on a concrete registration protocol. we find a simpler protocol that remains secure, and a more sophisticated protocol that allows a better distinction between intruder's attacks and ordinary errors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_7871",
        "graph": {
            "node_idx": 7871,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                7871,
                10345,
                19256
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: imposing hard constraints on soft snakesan approach is presented for imposing generic hard constraints on deformable models at a low computational cost, while preserving the good convergence properties of snake-like models. we believe this capability to be essential not only for the accurate modeling of individual objects that obey known geometric and semantic constraints but also for the consistent modeling of sets of objects. many of the approaches to this problem that have appeared in the vision literature rely on adding penalty terms to the objective functions. they rapidly become untractable when the number of constraints increases. applied mathematicians have developed powerful constrained optimization algorithms that, in theory, can address this problem. however, these algorithms typically do not take advantage of the specific properties of snakes. we have therefore designed a new algorithm that is closely related to lagrangian methods but is tailored to accommodate the particular brand of deformable models used in the image understanding community. we demonstrate the validity of our approach first in two dimensions using synthetic images and then in three dimensions using real aerial images to simultaneously model terrain, roads, and ridgelines under consistency constraints. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_7886",
        "graph": {
            "node_idx": 7886,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    3,
                    4,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                7886,
                2970,
                20486,
                7508,
                20733,
                12967,
                14630,
                23197,
                4917,
                2076,
                2980,
                12349,
                12350
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on social laws for artificial agent societies: off-line designwe are concerned with the utility of social laws in a computational environment, laws which guarantee the successful coexistence of multiple programs and programmers. in this paper we are interested in the off line design of social laws, where we as designers must decide ahead of time on useful social laws. in the first part of this paper we suggest the use of social laws in the domain of mobile robots, and prove analytic results about the usefulness of this approach in that setting. in the second part of this paper we present a general model of social law in a computational system, and investigate some of its properties. this includes a definition of the basic computational problem involved with the design of multi-agent systems, and an investigation of the automatic synthesis of useful social laws in the framework of a model which refers explicitly to social laws. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7889",
        "graph": {
            "node_idx": 7889,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                7889,
                17897
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: randomized multi-source broadcast protocols in multi-hop radio networksin [lba93], a suite of randomized broadcast protocols was presented for the problem of broadcasting a message in arbitrary multi-hop radio networks. these protocols improved upon that of bar-yehuda et al. in most of the typical cases. unfortunately, in those protocols it is assumed that only a single broadcast by a single node is in progress at any point in time. hence, those protocols are of limited use in practice. in this paper, we present a suite of randomized multi-source broadcast protocols in multi-hop radio networks, in which more than one broadcast can be in progress at any point in time. the protocols are compared with each other in several typical cases. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_7918",
        "graph": {
            "node_idx": 7918,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    10,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    4,
                    21,
                    7,
                    22,
                    10,
                    7,
                    10,
                    23,
                    16,
                    18,
                    24,
                    25,
                    3,
                    21,
                    26,
                    27
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    10
                ]
            ],
            "node_list": [
                7918,
                17907,
                10628,
                5725,
                9394,
                11706,
                4991,
                14355,
                20840,
                20841,
                16087,
                5848,
                25036,
                22158,
                23705,
                5724,
                17658,
                6261,
                19041,
                19425,
                19479,
                20281,
                3286,
                17064,
                24733,
                16489,
                22284,
                23759
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a model-based approach to reactive self-configuring systemsthis paper describes livingstone, an implemented kernel for a model-based reactive self-configuring autonomous system. it presents a formal characterization of livingstone's representation formalism, and reports on our experience with the implementation in a variety of domains. livingstone provides a reactive system that performs significant deduction in the sense/response loop by drawing on our past experience at building fast propositional conflict-based algorithms for model-based diagnosis, and by framing a model-based configuration manager as a propositional feedback controller that generates focused, optimal responses. livingstone's representation formalism achieves broad coverage of hybrid hardware/software systems by coupling the transition system models underlying concurrent reactive languages with the qualitative representations developed in model-based reasoning. livingstone automates a wide variety of tasks using a single model and a single core algorithm, thus making significant progress towards achieving a central goal of model-based reasoning. livingstone, together with the hsts planning and scheduling engine and the raps executive, has been selected as part of the core autonomy architecture for nasa's first new millennium spacecraft. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_7926",
        "graph": {
            "node_idx": 7926,
            "edge_index": [
                [
                    1,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                7926,
                7927,
                20142
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: two-handed direct manipulation on the responsive workbenchwe have built a system that allows users to naturally manipulate virtual 3d models with both hands on the responsive workbench, a tabletop vr device. our design is largely based upon guiard's observations of how humans distribute work between the two hands in the real world. we show how to apply these principles for the workbench environment and describe many issues encountered during the design. we first develop a framework for two-handed interaction and then explore a variety of two-handed 3d tools and interactive techniques. related issues include how constraints are implemented and controlled by the two hands and how transitions between one-handedand two-handed tasks occur seemlessly. informal observations of the system in practice show that users can perform navigation and manipulation tasks easily and with little training using the two-handed environment. one of our interesting findings was that users often performed two-handed manipulations by combining two otherwise independent one-handed tools in a synergistic fashion. in these cases, we did not program two-handed behaviors explicitly into the system; instead they emerged naturally. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7945",
        "graph": {
            "node_idx": 7945,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    7,
                    2,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                7945,
                10395,
                944,
                15749,
                24201,
                8463,
                3985,
                945,
                19551,
                11015,
                3710,
                9024
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: machine abstractions and locality issues in studying parallel systemstechnical report git-cc-93/63 october 1993 abstract we define a set of overhead functions that capture the salient artifacts representing the interaction between parallel application characteristics and architectural features. an execution-driven simulation testbed is used to separate these overheads in a parallel system. using this testbed and a set of applications, we address two important issues. the first concerns the use of machine abstractions for performance studies of parallel systems. the second deals with quantifying the impact of locality on the performance of applications. the key conclusions from this study are that the newly proposed model logp is an effective one for abstracting the network, and that ignoring locality can significantly affect the application performance. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, memory management"
            }
        ]
    },
    {
        "id": "cora_test_7946",
        "graph": {
            "node_idx": 7946,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    4,
                    7,
                    3,
                    4,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    6,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                7946,
                17919,
                13488,
                21520,
                21521,
                22064,
                14153,
                13489
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient algorithms for inverting evolutionevolution is a stochastic process which operates on the dna of species. the evolutionary process leaves tell-tale signs in the dna which can be used to construct phylogenies, or evolutionary trees, for a set of species. maximum likelihood estimations (mle) methods seek the evolutionary tree which is most likely to have produced the dna under consideration. while these methods are widely accepted and intellectually satisfying, they are computationally intractable. in this paper, we address the intractability of mle methods as follows. we introduce a metric on \"evolutionary\" stochastic process, and show that this metric is meaningful by giving a lower-bound on the learnability of the true phylogeny in terms of our metric measure. we complement this result with a simple and efficient algorithm for inverting the stochastic process of evolution, that is, for building the tree from observations on the dna of the species. put another way, we show that we can pac-learn phylogenies. though there have been many heuristics suggested for this problem, our algorithm is the first algorithm with a guaranteed convergence rate, and further, this rate is within a polynomial of the lower-bound rate we establish. our algorithm is also the the first polynomial time algorithm which is guaranteed to converge at all to the correct tree. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_7960",
        "graph": {
            "node_idx": 7960,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                7960,
                7963,
                7964
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: data complexity for virtual reality: where do all the triangles go?screen space rendering statistics were gathered from 150 3d objects, each modeled by between 2k and 40k triangles. while there is wide variance by individual object, the overall trend is that the distribution of triangles by screen size is roughly exponential in the direction of small triangles. from a subjective esthetics point of view, tessellations required 10k visible triangles per quarter million pixels covered for acceptable results. the ability of modern computers to simulate the interaction of human senses with the physical world is the technology that makes virtual reality possible. it falls to the technology of 3d computer graphics to attend to the needs of the most important of these senses: vision. everything we see in virtual space must be created by computer graphics rendering techniques. limitations of computer graphics technology thus limit the visuals that can be used in virtual reality applications. most current 3d graphics rendering hardware requires the virtual world to be represented at some level as collections of 3d triangles. both the basic shape and fine detail of virtual objects are captured by these triangles. beyond mere esthetics, some minimum quantity of triangles must be used to make objects both recognizable and functional. the brutally minimalistic triangulations of most present virtual reality systems are at best 3d icons; industrial virtual reality applications will require more detail. to gain a better understanding of this representation complexity, a study was made of the rendering characteristics of 150 objects, ranging from 2k through 40k triangles in size. combined with theoretical analysis, estimates of realistic display requirements for virtual reality applications can be made. models of current and future hardware triangle rendering throughput, along with estimates of useful rendering frame rates, yields an envelope of feasible scene triangle budgets, which can be contrasted with the application needs. it is beyond the scope of this paper to exhaustively document every alternative rendering primitive to the triangle, and describe why in many cases triangles require less computation. the point is not that triangles are the best rendering primitives; for example both nurbs and texture mapping are qualitatively superior; but that most such techniques achieve higher quality at very high computational costs. this section will briey discuss some of the alternatives to triangles, and the trade-offs involved. what about the lowly line? most industrial 3d graphics used in the world today is still done with 3d lines, and modern antialiasing line rendering techniques can achieve very high quality results. the problem with lines is that for virtual reality they dont do a very good job of mimicking real \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7961",
        "graph": {
            "node_idx": 7961,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                7961
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: \"reducing lags in virtual reality systems using motion-sensitive level of detail\"most virtual reality systems suffer from a time lag which can detrimentally affect the user's performance. this paper describes the major components of this lag and details the factors which contribute towards it. the use of level of detail (lod) is one possible way to reduce the lag. this technique is normally implemented on a distance-based criterion (i.e. lower levels of detail are used when an object is far away); however, i am currently investigating the use of level of detail in relation to the velocity of each object in a virtual environment. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7962",
        "graph": {
            "node_idx": 7962,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                7962
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a survey of level of detail support in current virtual reality solutionsthe technique of level of detail (lod) offers a powerful method of reducing the computational burden of a virtual reality (vr) system. as a result, it represents a valuable and important facility which one would expect to find in all serious vr graphics systems. this survey aims to present many of the rendering engines commonly employed in state-of-the-art vr solutions and details the degree of support which these systems provide for lod. the investigation reveals a significant lack of support for this facility over the range of packages reviewed. consequently, a call is made for improved lod support in future vr products. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7963",
        "graph": {
            "node_idx": 7963,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                7963
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a measure for perceived detail in computer-generated imagestechnical report ecs-csg-19-96 department of computer science, university of edinburgh, edinburgh, eh9 3jz abstract this report will present a procedure for assessing the degree of visual detail which a user can perceive in an arbitrary computer-generated image. this will involve describing an image in terms of its component spatial frequencies (c/deg); a measure which is commonly employed in the field of visual perception to characterise the efficacy of the human visual system. the text will present a brief introduction to this visual metric, and then demonstrate how a full-colour computer-generated image can be described in terms of this metric. the approach advocated here is based upon an image segmentation algorithm: fourier techniques will be considered, and shown to be inappropriate for this particular application. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_7970",
        "graph": {
            "node_idx": 7970,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                7970,
                18198
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: declarative diagnosis revisitedwe extend the declarative diagnosis methods to the diagnosis w.r.t. computed answers. we show that absence of uncovered atoms implies completeness for a large class of programs. we then define a top-down diagnoser, which uses one oracle only, does not require to determine in advance the symptoms and is driven by a (finite) set of goals. finally we tackle the problem of effectivity, by introducing (finite) partial specifications. we obtain an effective diagnosis method, which is weaker than the general one in the case of correctness, yet can efficiently be implemented in both a top-down and in a bottom-up style. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_7978",
        "graph": {
            "node_idx": 7978,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    2,
                    3,
                    4,
                    5,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    5
                ]
            ],
            "node_list": [
                7978,
                9411,
                18625,
                19118,
                19374,
                10487
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: from e-r to a-r modelling strategic actor relationships for business process reengineeringas information systems are increasingly being called upon to play vital roles in organizations, conceptual modelling techniques need to be extended to relate information structures and processes to business and organizational objectives. we propose a framework which focuses on the modelling of strategic actor relationships (a-r) for a richer conceptual model of business processes in their organizational settings. organizations are viewed as being made up of social actors who are intentional have motivations, wants, and beliefs and strategic they evaluate their relationships to each other in terms of opportunities and vulnerabilities. the framework supports formal modelling of the network of dependency relationships among actors, and the systematic exploration and assessment of alternative process designs in reengineering. the semantics of the modelling concepts are axiomatically characterized. by embedding the framework in the telos language, the framework can also potentially serve as an early-requirements phase tool in a comprehensive information system development environment. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_7983",
        "graph": {
            "node_idx": 7983,
            "edge_index": [
                [
                    1,
                    1
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                7983,
                7982
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: revising bayesian network parameters using backpropagationthe problem of learning bayesian networks with hidden variables is known to be a hard problem. even the simpler task of learning just the conditional probabilities on a bayesian network with hidden variables is hard. in this paper, we present an approach that learns the conditional probabilities on a bayesian network with hidden variables by transforming it into a multi-layer feedforward neural network (ann). the conditional probabilities are mapped onto weights in the ann, which are then learned using standard backpropagation techniques. to avoid the problem of exponentially large anns, we focus on bayesian networks with noisy-or and noisy-and nodes. experiments on real world classification problems demonstrate the effectiveness of our technique. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_8020",
        "graph": {
            "node_idx": 8020,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8020,
                17938
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: run-time techniques for parallelizing sparse matrix problemssparse matrix problems are difficult to parallelize efficiently on message-passing machines, since they access data through multiple levels of indirection. inspector/executor strategies, which are typically used to parallelize such problems impose significant preprocessing overheads. this paper describes the runtime support required by new compilation techniques for sparse matrices and evaluates their performance, highlighting optimizations and improvements over previous techniques. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_8028",
        "graph": {
            "node_idx": 8028,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    4,
                    4
                ]
            ],
            "node_list": [
                8028,
                17942,
                18315,
                19161,
                8027
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a modified hme architecture for text-dependent speaker identificationa modified hierarchical mixtures of experts (hme) architecture is presented for text-dependent speaker identification. a new gating network is introduced to the original hme architecture for the use of instantaneous and transitional spectral information in text-dependent speaker identification. the statistical model underlying the proposed architecture is presented and learning is treated as a maximum likelihood problem; in particular, an expectation-maximization (em) algorithm is also proposed for adjusting the parameters of the proposed architecture. an evaluation has been carried out using a database of isolated digit utterances by 10 male talkers. experimental results demonstrate that the proposed architecture outperforms the original hme architecture in text-dependent speaker identification. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_8046",
        "graph": {
            "node_idx": 8046,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    0,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                8046,
                17952,
                9302,
                3990,
                16864,
                25046
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: applications of the situation calculus to formalizing control and strategic information: the prolog cut operatorwe argue that the situation calculus is a natural formalism for representing and reasoning about control and strategic information. as a case study, in this paper we provide a situation calculus semantics for the prolog cut operator, the central search control operator in prolog. we show that our semantics is well-behaved when the programs are properly stratified. we also show that according to this semantics, the conventional implementation of the negation-as-failure operator using cut is provably correct with respect to the stable model semantics. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_8077",
        "graph": {
            "node_idx": 8077,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    3
                ]
            ],
            "node_list": [
                8077,
                17972,
                23235,
                15547
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: parcel manipulation and dynamics with a distributed actuator array: the virtual vehiclewe are developing a materials handling system where many small simple actuators cooperate to transport and to manipulate large objects in the plane. a discrete set of cells, each comprising two actuators, are fixed in a planar array. by coordinating the actuators in the cells on which an objects rests, an object can be transported and manipulated. in essence, this system is an improvement over traditional conveyor systems in that objects can be re-oriented, as well as conveyed. such an array provides flexible materials handling in which many objects independently can be manipulated and transported at the same time. the array is coordinated in a distributed manner where each cell has its own controller and each controller communicates with its neighbors. towards the goal of motion planning, in this paper we consider the dynamics of parcel transport and manipulation. the parcel dynamics are based on an exact discrete representation of the system, unlike other methods where a continuity assumption is made. two types of contact models are considered. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_8093",
        "graph": {
            "node_idx": 8093,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    1,
                    12,
                    13,
                    3,
                    14,
                    9,
                    15,
                    1,
                    16,
                    17,
                    18,
                    19,
                    7,
                    9,
                    15,
                    1,
                    3,
                    4,
                    7,
                    8,
                    7,
                    7,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    8,
                    9
                ]
            ],
            "node_list": [
                8093,
                4002,
                14852,
                21704,
                10229,
                10231,
                23068,
                15885,
                15886,
                16204,
                421,
                2627,
                13361,
                8092,
                22647,
                24004,
                13437,
                13719,
                21703,
                13721,
                23859
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: symbolic array dataflow analysis for array privatization and program parallelization 1array dataflow information plays an important role for successful automatic parallelization of fortran programs. this paper proposes a powerful symbolic array dataflow analysis to support array privatization and loop parallelization for programs with arbitrary control flow graphs and acyclic call graphs. our scheme summarizes array access information using guarded array regions and propagates such regions over a hierarchical supergraph (hsg). the use of guards allows us to use the information in if conditions to sharpen the array dataflow analysis and thereby to handle difficult cases which elude other existing techniques. the guarded array regions retain the simplicity of set operations for regular array regions in common cases, and they enhance regular array regions in complicated cases by using guards to handle complex symbolic expressions and array shapes. scalar values that appear in array subscripts and loop limits are substituted on the fly during the array information propagation, which disambiguates the symbolic values precisely for set operations. we present efficient algorithms that implement our scheme. initial experiments of applying our analysis to perfect benchmarks show promising results of improved array privatization. key words: parallelizing compiler, array dataflow analysis, interprocedural analysis, array privatization, symbolic analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_8104",
        "graph": {
            "node_idx": 8104,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                8104,
                13575,
                13578,
                13577
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast lighting independent background subtractionm.i.t media laboratory perceptual computing section technical report no. 437 appears in: abstract this paper describes a new method of fast background subtraction based upon disparity verification that is invariant to run-time changes in illumination. using two or more cameras, the method requires the off-line construction of disparity fields mapping the primary (or key) background image to each of the additional reference background images. at runtime, segmentation is performed by checking color intensity values at corresponding pixels. if more than two cameras are available, more robust segmentation can be achieved and in particular, the occlusion shadows can be generally eliminated as well. because the method only assumes fixed background geometry, the technique allows for illumination variation at runtime. and, because no disparity search is performed at run time, the algorithm is easily implemented in real-time on conventional hardware. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_8112",
        "graph": {
            "node_idx": 8112,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                8112,
                17983,
                14846,
                16087,
                23705
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: heavy-tailed phenomena in combinatorial searchrandomized search methods have greatly extended our ability to solve hard computational problems. however, these methods often exhibit a surprisingly large variability in performance. in particular, the solution time for different runs on the same problem instance can vary over several orders of magnitude, and is thus highly unpredictable. we explore this phenomenon by studying the cost profiles of search techniques on hard combinatorial problems. our results reveal intriguing properties of such profiles: the distributions are characterized by heavy tails of the pareto-levy form with infinite moments. such non-standard distributions are closely related to fractal phenomena, and have been observed in areas as diverse as economics, statistical physics, and geophysics. our work is the first finding of these distributions in a pure computational setting. the heavy-tailed nature of computational phenomena explains some puzzling behavior of the cost profiles, which have been discussed and documented in the literature. in addition, it explains the effectiveness of various recent algorithmic strategies used in solving combinatorial problems, and suggests the design of other more efficient search strategies. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_8117",
        "graph": {
            "node_idx": 8117,
            "edge_index": [
                [
                    0,
                    1
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                8117,
                21018
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast batch verification for modular exponentiation and digital signaturesan extended abstract of this paper appears in advances in cryptology - eurocrypt 98 proceedings, abstract many tasks in cryptography (e.g., digital signature verification) call for verification of a basic operation like modular exponentiation in some group: given (g; x; y) check that g x = y. this is typically done by re-computing g x and checking we get y. we would like to do it differently, and faster. the approach we use is batching. focusing first on the basic modular exponentiation operation, we provide some probabilistic batch verifiers, or tests, that verify a sequence of modular exponentiations significantly faster than the naive re-computation method. this yields speedups for several verification tasks that involve modular exponentiations. focusing specifically on digital signatures, we then suggest a weaker notion of (batch) verification which we call \"screening.\" it seems useful for many usages of signatures, and has the advantage that it can be done very fast; in particular, we show how to screen a sequence of rsa signatures at the cost of one rsa verification plus hashing. fl department of computer science & engineering, mail code 0114, university of california at san diego, 9500 gilman drive, la jolla, ca 92093, usa. e-mail: mihir@cs.ucsd.edu. url: http://www-cse.ucsd.edu/ users/mihir. supported in part by nsf career award ccr-9624439 and a 1996 packard foundation fellowship in science and engineering. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_8118",
        "graph": {
            "node_idx": 8118,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    4
                ]
            ],
            "node_list": [
                8118,
                8117,
                10104,
                10167,
                13872,
                23413,
                21018,
                8442,
                9471,
                19122
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast exponentiation with precomputation: algorithms and lower boundsin several cryptographic systems, a fixed element g of a group of order n is repeatedly raised to many different powers. in this paper we present a practical method of speeding up such systems, using precomputed values to reduce the number of multiplications needed. in practice this provides a substantial improvement over the level of performance that can be obtained using addition chains, and allows the computation of g n for n &lt; n in o(log n= log log n ) multiplications. we show that this method is asymptotically optimal given polynomial storage, and for specific cases, within a small factor of optimal. we also show how these methods can be parallelized, to compute powers in time o(log log n ) with o(log n= log 2 log n ) processors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_8143",
        "graph": {
            "node_idx": 8143,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    0,
                    2,
                    9,
                    10,
                    5,
                    8,
                    2,
                    3,
                    10,
                    5,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5
                ]
            ],
            "node_list": [
                8143,
                3895,
                18320,
                18957,
                8880,
                9945,
                8142,
                17669,
                9946,
                3894,
                19635
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the rhodos space manager 1993the space manager is a kernel server within the rhodos environment that is charged with the task of creation, altering and deleting spaces. this report presents a general overview of how these tasks have been implemented and presents information for a user to be able to use these services. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_8157",
        "graph": {
            "node_idx": 8157,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    0,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    11,
                    21,
                    29,
                    30,
                    31,
                    22,
                    32,
                    33,
                    34,
                    35,
                    26,
                    4,
                    21,
                    8,
                    22,
                    36,
                    11,
                    37,
                    38,
                    39,
                    5,
                    40,
                    41,
                    34,
                    6,
                    42,
                    43,
                    33,
                    31,
                    44,
                    13,
                    7,
                    45
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                8157,
                18001,
                1329,
                6456,
                1332,
                1326,
                7483,
                5981,
                22185,
                20399,
                1240,
                2164,
                12224,
                12672,
                12518,
                17592,
                3775,
                22287,
                12677,
                9213,
                7398,
                12406,
                1331,
                7181,
                12624,
                12211,
                11896,
                14539,
                1241,
                12221,
                12212,
                20629,
                8848,
                12210,
                10584,
                11897,
                1330,
                13480,
                23928,
                11884,
                1325,
                12673,
                21120,
                12178,
                11255,
                1328
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: total ordering of messages in broadcast domainstechnical report cs92-9 november 24, 1992 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_8167",
        "graph": {
            "node_idx": 8167,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                8167,
                7747,
                18466,
                7712,
                22909
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: submitted to nips*97, section: visual processing. presentation preference: oral. complex cells and object recognitionnearest-neighbor correlation-based similarity computation in the space of outputs of complex-type receptive fields can support robust recognition of 3d objects. our experiments with four collections of objects resulted in mean recognition rates between 84% (for subordinate-level discrimination among 15 quadruped animal shapes) and 94% (for basic-level recognition of 20 everyday objects), over a 40 ffi fi 40 ffi range of viewpoints, centered on a stored canonical view and related to it by rotations in depth. this result has interesting implications for the design of a front end to an artificial object recognition system, and for the understanding of the faculty of object recognition in primate vision. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_8178",
        "graph": {
            "node_idx": 8178,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                8178,
                14370,
                15662,
                22370,
                14394,
                22310,
                8763,
                23378
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: subjectivity and genvoca generators1 the tenet of subjectivity is that no single interface can adequately describe any object; interfaces to the same object will vary among different applications. thus, objects with standardized interfaces seem too brittle a concept to meet the demands of a wide variety of applications. yet, objects with standardized interfaces is a central idea in domain modeling and software generation. standard interfaces make objects plug-compatible and interchangeable, and it is this feature that is exploited by generators to synthesize high-performance, domain-specific software systems. interestingly, generated systems have customized interfaces that can be quite different from the interfaces of their constituent objects. in this paper, we reconcile this apparent contradiction by showing that the objects (components) in the genvoca model of software generation are not typical software modules; their interfaces and bodies mutate upon instantiation to a standard that is application-dependent. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_8186",
        "graph": {
            "node_idx": 8186,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    5,
                    3,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    4
                ]
            ],
            "node_list": [
                8186,
                8188,
                22074,
                22128,
                8187,
                14197
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: complementarity and nondegeneracy in semidefinite programmingprimal and dual nondegeneracy conditions are defined for semidefinite programming. given the existence of primal and dual solutions, it is shown that primal nondegeneracy implies a unique dual solution and that dual nondegeneracy implies a unique primal solution. the converses hold if strict complementarity is assumed. primal and dual nondegeneracy assumptions do not imply strict complementarity, as they do in lp. the primal and dual nondegeneracy assumptions imply a range of possible ranks for primal and dual solutions x and z. this is in contrast with lp where nondegeneracy assumptions exactly determine the number of variables which are zero. it is shown that primal and dual nondegeneracy and strict complementarity all hold generically. numerical experiments suggest probability distributions for the ranks of x and z which are consistent with the nondegeneracy conditions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_8201",
        "graph": {
            "node_idx": 8201,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8201
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: software product quality: theory, model, and practiceexisting proposals for software product quality have not been underpinned by the sort of empirical theory and supporting models that are found in most scientific endeavours. the present proposal provides a set of axioms and supporting software and quality models needed to construct a comprehensive model for software product quality. this model has been developed using a requirements-design-implementation strategy to ensure that it meets the needs of a number of different interest groups. a significant advantage of the proposed model is that it allows the problem of software product quality to be broken down into intellectually manageable chunks. other important features of the model are that it has enough structure to characterize software product quality for large and complex systems and it will support practical specification and verification of quality requirements. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_8209",
        "graph": {
            "node_idx": 8209,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    3,
                    3,
                    6,
                    7,
                    1,
                    2,
                    0,
                    3,
                    8,
                    6,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                8209,
                11717,
                18891,
                11718,
                16335,
                8210,
                23992,
                23995,
                11519,
                24001
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: acquiring knowledge from users in a reflective architectureas a system acquires more knowledge about a task it should be able to take a more active role in learning additional knowledge. to do so, it must be able to reflect upon the knowledge that it has|at each moment| and understand what every piece of knowledge, old and new, contributes to the task. this is the approach taken in expect, a system that represents and manipulates many different types of knowledge distinctly and explicitly, and is able to determine what additional knowledge it needs to learn from a user based on its current knowledge about the task. this kind of active participation in the learning process is essential in learning complex tasks, not only from users but also from any other external sources of knowledge, be it information servers or other agents. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_8216",
        "graph": {
            "node_idx": 8216,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8216,
                11480
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: measures for silhouettes resemblance and representative silhouettes of curved objectswe claim that the task of object recognition necessitates a measure for image likelihood, that is: a measure for the probability that a given image is obtained from a familiar (pre-investigated) object. moreover, in a system where objects are represented by 2d images, the best performance is achieved if those images are selected according to a maximum likelihood principle. this is equivalent to maximum stability of the image, or minimal change under a viewpoint perturbation. all of those qualities involve a quantitative comparison of similarity between images. we propose different metric functions which can be imposed on the image space of curved three dimensional objects. we use these metrics to detect the representative views (most stable and most likely views) of three test models. we find the same representative views under all the investigated metrics, suggesting that local maxima of stability and likelihood are metric independent. our method of image comparison is based solely on the appearance of the occluding contour, hence our method is suitable for object recognition from silhouettes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_8225",
        "graph": {
            "node_idx": 8225,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    3,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                8225,
                15403,
                4318,
                19308,
                23107,
                2557,
                18181,
                9874,
                7233
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: position estimation for mobile robots in dynamic environmentsfor mobile robots to be successful, they have to navigate safely in populated and dynamic environments. while recent research has led to a variety of localization methods that can track robots well in static environments, we still lack methods that can robustly localize mobile robots in dynamic environments, in which people block the robot's sensors for extensive periods of time or the position of furniture may change. this paper proposes extensions to markov localization algorithms enabling them to localize mobile robots even in densely populated environments. two different filters for determining the believability of sensor readings are employed. these filters are designed to detect sensor readings that are corrupted by humans or unexpected changes in the environment. the technique was recently implemented and applied as part of an installation, in which a mobile robot gave interactive tours to visitors of the deutsches museum bonn. extensive empirical tests involving datasets recorded during peak traffic hours in the museum demonstrate that this approach is able to accurately estimate the robot's position in more than 98% of the cases even in such highly dynamic environments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_8231",
        "graph": {
            "node_idx": 8231,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    1,
                    2,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                8231,
                18030,
                7065,
                1049,
                853,
                21285,
                22471
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: heap analysis and optimizations for threaded programstraditional compiler optimizations such as loop invariant removal and common sub-expression elimination are standard in all optimizing compilers. the purpose of this paper is to present new versions of these optimizations that apply to programs using dynamically-allocated data structures, and to show the effect of these optimizations on the performance of multithreaded programs. in this paper we show how heap pointer analyses can be used to support better dependence testing, new applications of the above traditional optimizations, and high-quality code generation for multithreaded architectures. we have implemented these analyses and optimizations in the earth-c compiler to study their impact on the performance of generated multithreaded code. we provide both static and dynamic measurements showing the effect of the optimizations applied individually, and together. we note several general trends, and discuss the performance tradeoffs, and suggest when specific optimizations are generally beneficial. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_8251",
        "graph": {
            "node_idx": 8251,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                8251,
                18036,
                4838,
                22183,
                4353,
                3572,
                17766,
                6000,
                7169,
                7246,
                898,
                3520,
                1697,
                8000
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a model for projection and actionin designing autonomous agents that deal competently with issues involving time and space, there is a tradeoff to be made between guaranteed response-time reactions on the one hand, and flexibility and expressiveness on the other. we propose a model of action with probabilistic reasoning and decision analytic evaluation for use in a layered control architecture. our model is well suited to tasks that require reasoning about the interaction of behaviors and events in a fixed temporal horizon. decisions are continuously reevaluated, so that there is no problem with plans becoming obsolete as new information becomes available. in this paper, we are particularly interested in the tradeoffs required to guarantee a fixed reponse time in reasoning about nondeterministic cause-and-effect relationships. by exploiting approximate decision making processes, we are able to trade accuracy in our predictions for speed in decision making in order to improve expected per formance in dynamic situations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_8268",
        "graph": {
            "node_idx": 8268,
            "edge_index": [
                [
                    1,
                    2,
                    1
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                8268,
                3977,
                8576
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: compilation of constraint systems to procedural parallel programsthis paper describes the first results from research 1 on the compilation of constraint systems into task level parallel programs in a procedural language. this is the only research, of which we are aware, which attempts to generate efficient parallel programs for numerical computations from constraint systems. computations are expressed as constraint systems. a dependence graph is derived from the constraint system and a set of input variables. the dependence graph, which exploits the parallelism in the constraints, is mapped to the target language code, which represents parallel computation structures as generalized dependence graphs. finally, parallel c programs are generated. the granularity of the derived dependence graphs depends upon the complexity of the operations represented in the type system of the constraint specification language. to extract parallel programs of appropriate granularity, the following features have been included: (i) modularity, (ii) operations over structured types as primitives, (iii) definition of sequential c functions. a prototype of the compiler has been implemented. the execution environment or software architecture is specified separately from the constraint system. the domain of matrix computations has been targeted for applications. some examples have been programmed. initial results are very encouraging. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_8274",
        "graph": {
            "node_idx": 8274,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8274,
                24792
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: assuring distributed trusted machthe distributed trusted mach (dtmach) program is developing a design for a high-assurance, secure, distributed system based on mach. to achieve this goal, it is first necessary to identify the general threats against which dtmach must protect. the next step is to identify control mechanisms that are sufficient to protect against each of the threats. the dtmach design makes extensive use of type enforcement in addressing the threats. this paper describes the general threats and the countermeasures provided by dtmach. doing so provides more evidence of the usefulness of type enforcement in general and the high assurance provided by the dtmach type enforcement policy. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_8292",
        "graph": {
            "node_idx": 8292,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8292,
                18048
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: protocol portability through module encapsulationbecause protocol software is difficult and expensive to implement and test, it is often ported between systems, instead of being rewritten from scratch. unfortunately, porting protocol software can be nearly as difficult as from-scratch development, due to inherent differences in subsystem design and services provided. thus, protocol subsystems can have a profound effect on the portability of a protocol implementation. in this paper, we propose an approach permitting the incorporation of new protocols into a subsystem other than their native one, without the drawbacks or expense of porting and original development. our approach is based on protocol module encapsulation, which allows unmodified protocol code developed for one protocol subsystem to be used within another. we relate our experiences designing, implementing, and measuring the performance of our protocol encapsulation modules, using an appletalk protocol stack as a baseline. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_8314",
        "graph": {
            "node_idx": 8314,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    0
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                8314,
                1300,
                18912,
                5299,
                288,
                9431,
                1134,
                9767,
                5582,
                8908,
                14145
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: two fundamental limits on dataflow multiprocessingreport no. ucb/csd 92/716 computer science division university of california, berkeley abstract: this paper examines the argument for dataflow architectures in two fundamental issues in multiprocessing[5]. we observe two key problems. first, the justification of extensive multithreading is based on an overly simplistic view of the storage hierarchy. second, the local greedy scheduling policy embodied in dataflow is inadequate in many circumstances. a more realistic model of the storage hierarchy imposes significant constraints on the scheduling of computation and requires a degree of parsimony in the scheduling policy. in particular, it is important to establish a scheduling hierarchy that reflects the underlying storage hierarchy. however, even with this improvement, simple local scheduling policies are unlikely to be adequate. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_8319",
        "graph": {
            "node_idx": 8319,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                8319,
                14659,
                22022,
                22498,
                23849,
                23852
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: programming the web: an application-oriented language for hypermedia service programmingmawl is an application language for programming interactive world wide web services. the language is small, because no construct was introduced without compelling justification; as with yacc [8], general-purpose computation is done in a host language. mawl offers conveniences such as control abstraction, persistent state management, synchronization, and shared memory. in addition, the mawl compiler performs static checking designed to prevent common web programming errors. in this paper we discuss the design and engineering of mawl in the context of our general language design philosophy. we also include an appendix of commentary on several short mawl programs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_8340",
        "graph": {
            "node_idx": 8340,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                8340,
                9170,
                2076,
                12827,
                12826,
                16206
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: social entropy: a new metric for learning multi-robot teamsas robotics research expands into multiagent tasks and learning, investigators need new tools for evaluating the artificial robot societies they study. is it enough, for example, just to say a team is \"heterogeneous?\" perhaps heterogeneity is more properly viewed on a sliding scale. to address these issues this paper presents new metrics for learning robot teams. the metrics evaluate diversity in societies of mechanically similar but behaviorally heterogeneous agents. behavior is an especially important dimension of diversity in learning teams since, as they learn, agents choose between hetero- or homogeneity based solely on their behavior. this paper introduces metrics of behavioral difference and behavioral diversity. behavioral difference refers to disparity between two specific agents, while diversity is a measure of an entire society. social entropy, inspired by shannon's information entropy [5], is proposed as a metric of behavioral diversity. it captures important components of diversity including the number and size of castes in a society. the new metrics are illustrated in the evaluation of an example learning robot soccer team. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_8356",
        "graph": {
            "node_idx": 8356,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                8356,
                18073,
                18118
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: foundations of logic programmingthis is a survey of the theory of logic programs with classical negation and negation as failure. the semantics of this class of programs is based on the notion of an answer set. the operation of prolog is described in terms of proof search in the sldnf calculus. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_8366",
        "graph": {
            "node_idx": 8366,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                8366,
                3837,
                16428,
                18109,
                24979,
                7097,
                21986,
                12364,
                23771,
                8160,
                19695,
                23993
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a strategic negotiations model with applications to an international crisisnote: this paper appears in ieee transactions on systems, man, and cybernetics, abstract the area of automated negotiation has been of particular interest in ai due to the important role negotiations play in facilitating understanding and the achievement of cooperation among entities with differing interests, whether they be individuals, organizations, governments, or automated agents. this paper presents a strategic model for negotiation of alternative offers, with specific application to international crises. in this model, both players can opt out, and while one loses over time, the other gains (up to a point). specific issues are: conflicting objectives and utility functions of parties and the impact of time on bargaining behavior in crisis. the general model has relevance to the hostage crisis from which it was built, and subsequent applicability in building an automated negotiation agent for experimental and training purposes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_8379",
        "graph": {
            "node_idx": 8379,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    5,
                    9,
                    0,
                    5,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    4,
                    4,
                    4,
                    7
                ]
            ],
            "node_list": [
                8379,
                18619,
                18631,
                12400,
                12240,
                20779,
                21213,
                14187,
                23541,
                20652,
                22114
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: novel view synthesis in tensor spacewe present a new method for synthesizing novel views of a 3d scene from few model images in full correspondence. the core of this work is the derivation of a tensorial operator that describes the transformation from a given tensor of three views to a novel tensor of a new configuration of three views. by repeated application of the operator on a seed tensor with a sequence of desired virtual camera positions we obtain a chain of warping functions (tensors) from the set of model images to create the desired virtual views. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_8405",
        "graph": {
            "node_idx": 8405,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    4,
                    5,
                    6,
                    1,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                8405,
                10625,
                1761,
                4963,
                19472,
                21527,
                4964
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: acquiring visual-motor models for precision manipulation with robot handsdextrous high degree of freedom (dof) robotic hands provide versatile motions for fine manipulation of potentially very different objects. however, fine manipulation of an object grasped by a multifinger hand is much more complex than if the object is rigidly attached to a robot arm. creating an accurate model is difficult if not impossible. we instead propose a combination of two techniques: the use of an approximate estimated motor model, based on the grasp tetrahedron acquired when grasping an object, and the use of visual feedback to achieve accurate fine manipulation. we present a novel active vision based algorithm for visual servoing, capable of learning the manipulator kinematics and camera calibration online while executing a manipulation task. the approach differs from previous work in that a full, coupled image jacobian is estimated online without prior models, and that a trust region control method is used, improving stability and convergence. we present an extensive experimental evaluation of visual model acquisition and visual servoing in \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_8407",
        "graph": {
            "node_idx": 8407,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                8407,
                10895,
                8408,
                19715
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: direct estimation of rotation from two frames via epipolar searcha direct method for estimating the rotational motion between two image frames is developed. the algorithm does not require knowledge of image correspondences, optical flow or scene structure and only assumes approximate knowledge of the translational motion. spatial and temporal intensity gradients are avoided, resulting in an algorithm that is noise resistant. moreover, the algorithm does not assume a particular projection model and is valid for both orthographic and perspective models. it is based on a statistical measure of epipolar misalignment. specifically, that (1) the intensity histograms of corresponding epipolar lines are invariant (ignoring occlusions) and, more importantly, that (2) the histograms of \"almost corresponding\" epipolar lines are similar. this latter property is a function of the spatial correlation present in the image and it is empirically demonstrated to be well behaved over a large class of scenes. these epipolar properties of histograms, i.e. that the difference between two histograms is a minimum when the two epipolar lines truly correspond and (approximately) increases monotonically with the degree of misalignment between two \"epipolar\" lines, allows the rotational motion to be estimated in a straightforward manner as a 3-dimensional \"epipolar search\". experimental results are presented on the sri jisct stereo database to empirically support the epipolar properties of intensity histograms. the calibrated nasa helicopter flight sequence is then analyzed to quantify the accuracy with which the rotations can be estimated. experimental results indicate that very precise rotational estimates can be achieved. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_8420",
        "graph": {
            "node_idx": 8420,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    6,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    3,
                    19,
                    20,
                    18,
                    21,
                    22,
                    23,
                    20,
                    19,
                    24,
                    16,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    3,
                    31,
                    15,
                    32,
                    8,
                    33,
                    5,
                    31,
                    29,
                    32,
                    34,
                    35,
                    27,
                    36,
                    18,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "node_list": [
                8420,
                13412,
                10569,
                200,
                1432,
                8421,
                21421,
                1460,
                7798,
                2856,
                9488,
                9746,
                19100,
                24768,
                204,
                14588,
                199,
                8794,
                1458,
                5433,
                1881,
                208,
                19186,
                205,
                1558,
                8980,
                11060,
                1556,
                79,
                1461,
                25077,
                5432,
                5434,
                24735,
                3193,
                19878,
                24704,
                7428,
                16692,
                15845,
                20108,
                57,
                83,
                23229,
                3214,
                756,
                24029,
                633,
                11586,
                20006,
                11175,
                24898,
                8428,
                24909,
                21977
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: classes versus prototypes in object-oriented languagessmalltalk uses classes to describe the common properties of related objects. unfortunately, the use of classes and metaclasses is the source of a number of complications. this paper discusses prototypes as an alternative to classes and metaclasses. in a prototype-based language, copying rather than instantiation is the mechanism provided to the user for making new objects. inheritance constraints are proposed as a way of representing object hierarchies and supporting the automatic updating of related objects when edits are made. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_8425",
        "graph": {
            "node_idx": 8425,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                8425,
                2857,
                446,
                8426,
                18638
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: control flow analysis of prolog (extended remix) how to translate a prolog program into aupmail technical report no. 112 abstract in order to represent control information compactly, the paper proposes a method to structure the solution of the analysis to share information. compressing the control information reduces the size of the control information at least by half for 18 out of 26 benchmarks, and for some programs by an order of magnitude or more. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_8432",
        "graph": {
            "node_idx": 8432,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    6,
                    1,
                    2,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                8432,
                1329,
                6932,
                8431,
                20399,
                2164,
                17592,
                12519,
                12672,
                12518,
                1328,
                3775,
                20629,
                12677
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automatic reconfiguration in the presence of failureswe describe a new kind of distributed system service, the availability management service, responsible for ensuring that the critical services of a distributed system remain continuously available to users despite arbitrary numbers of concurrent node removals and node restarts caused by failures, maintenance and growth. the presentation stresses the main ideas behind this new service, and outlines a simple design that depends upon the existence of synchronous membership and atomic broadcast group communication services. extensions of this initial design to deal with asynchronous group communica tion services are also briefly discussed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_8457",
        "graph": {
            "node_idx": 8457,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                8457,
                13593,
                13640
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: temporal multi-scale models for flow and accelerationa model for computing image flow in image sequences containing a very wide range of instantaneous flows is proposed. this model integrates the spatio-temporal image derivatives from multiple temporal scales to provide both reliable and accurate instantaneous flow estimates. the integration employs robust regression and automatic scale weighting in a generalized brightness constancy framework. in addition to instantaneous flow estimation the model supports recovery of dense estimates of image acceleration and can be readily combined with parameterized flow and acceleration models. a demonstration of performance on image sequences of typical human actions taken with a high frame-rate camera, is given. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_8467",
        "graph": {
            "node_idx": 8467,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    1,
                    8,
                    9,
                    10,
                    11,
                    2,
                    3,
                    4,
                    12,
                    3,
                    1,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                8467,
                11367,
                3774,
                20288,
                11719,
                21426,
                8470,
                905,
                4422,
                4249,
                5749,
                19729,
                21909,
                11103,
                15187,
                22935,
                22934,
                16072,
                23747,
                2149
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: resource partitioning for multi-party real-time communicationfor real-time communication services to achieve widespread usage, it is important that the network's management be allowed to control the services effectively. an important management capability concerns resource partitioning, i.e., distributing the different resources available at any given server (network node or link) among a number of partitions, where the admission control and establishment computations for a given connection need to consider only the connections in the same partition, and are completely independent of the connections accepted in other partitions. resource partitioning is useful for a number of applications, including the creation of virtual private subnetworks, and of mechanisms for advance reservation of real-time network services, fast establishment of real-time connections, and mobile computing with real-time communication. in previous work, we presented a scheme for resource partitioning in a guaranteed performance networking environment with edd-based packet scheduling disciplines. we now present the results of our continuing research, giving admission control tests for resource partitioning for two additional scheduling disciplines, fifo and rcsp, as well. we also simulate our resource partitioning scheme in a multi-party application scenario. our simulations confirm that resource fragmentation losses due to resource partitioning are small, and that resource partitioning reduces the admission control computation overhead. a somewhat surprising result from the simulation experiments is that, under circumstances that arise naturally in multi-party communication scenarios, resource partitioning results in higher overall connection acceptance rate. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_8480",
        "graph": {
            "node_idx": 8480,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                8480
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an all-pay auction approach to reallocationthe auction has been advocated as a valuable metaphor in the design of decentralized mechanisms for various problems. the walrasian auction was proposed as a suitable mechanism for resource reallocation in distributed planning. economic theory offers ample opportunities to develop distributed walrasian mechanisms for reallocation in \"markets\" with many agents and infinitely divisible resources. however, in cases where resources are essentially indivisible and markets relatively small, the perspective is considerably worse. in this paper, we address such reallocation problems. after pointing out the deficiencies of walrasian-like mechanisms in the chosen problem context, we propose an alternative mechanism based on the metaphor of an all-pay auction. the key feature of this informed gambling mechanism is that agents are required to commit themselves to exchange proposals in the face of uncertainty about the market situation. we present an example that illustrates how the mechanism renders acceptable reallocations where walrasian mechanisms fail. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_8506",
        "graph": {
            "node_idx": 8506,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    2,
                    10,
                    11,
                    12,
                    5,
                    13,
                    3,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                8506,
                4206,
                8074,
                10795,
                17695,
                7287,
                2160,
                1098,
                1100,
                8075,
                1243,
                10751,
                5321,
                19588,
                4166,
                22781
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: further comments on the stabilizability of the angular velocity of a rigid body 1we prove that the angular velocity equations can be smoothly stabilized with a single torque controller for bodies having an axis of symmetry. this complements a recent result of aeyels and szafranski. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_8536",
        "graph": {
            "node_idx": 8536,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    1,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                8536,
                8130,
                8238,
                8131,
                11929,
                11932,
                8239
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: practical methods for proving termination of general logic programstermination of logic programs with negated body atoms (here called general logic programs) is an important topic. one reason is that many computational mechanisms used to process negated atoms, like clark's negation as failure and chan's constructive negation, are based on termination conditions. this paper introduces a methodology for proving termination of general logic programs w.r.t. the prolog selection rule. the idea is to distinguish parts of the program depending on whether or not their termination depends on the selection rule. to this end, the notions of low-, weakly up-, and up-acceptable program are introduced. we use these notions to develop a methodology for proving termination of general logic programs, and show how interesting problems in non-monotonic reasoning can be formalized and implemented by means of terminating general logic programs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_8544",
        "graph": {
            "node_idx": 8544,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    10,
                    11,
                    1,
                    12,
                    2,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5
                ]
            ],
            "node_list": [
                8544,
                12265,
                8546,
                8280,
                2875,
                13961,
                21825,
                21960,
                6615,
                10746,
                9880,
                4943,
                6516,
                4709,
                19800,
                335,
                21961,
                2874,
                19350,
                21901
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: encrypted key exchange: password-based protocols secure against dictionary attacksclassical cryptographic protocols based on user-chosen keys allow an attacker to mount password-guessing attacks. we introduce a novel combination of asymmetric (public-key) and symmetric (secret-key) cryptography that allow two parties sharing a common password to exchange confidential and authenticated information over an insecure network. these protocols are secure against active attacks, and have the property that the password is protected against off-line \"dictionary\" attacks. there are a number of other useful applications as well, including secure public telephones. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_8545",
        "graph": {
            "node_idx": 8545,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                8545,
                12265,
                8281,
                22134,
                6615,
                4943
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: logics for cryptographic protocols virtues and limitationsin this note we offer a perspective on the virtues and limitations of several logics for cryptographic protocols focusing primarily on the logics of authentication. we emphasize the scope limitations of these logics rather than their virtues because (1) we consider their virtues to be better understood and accepted than their limitations, and (2) we hope to stimulate further research that will expand their scope. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_8553",
        "graph": {
            "node_idx": 8553,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    2,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    8,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7
                ]
            ],
            "node_list": [
                8553,
                24474,
                7584,
                24673,
                24867,
                24979,
                4317,
                9922,
                20842,
                23179,
                17799,
                17895,
                18695,
                4949,
                20227,
                11357,
                22500,
                9688,
                20841,
                18109,
                21589,
                13922,
                8554,
                16095,
                23771,
                23993,
                12360,
                12365
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: toward a semantics for an agent communications language based on speech-actsimplementations of systems based on distributed agent architectures require an agent communications language that has a clearly defined semantics. without one, neither agents nor developers can be sure what another agent's commitment to perform a task means (to name just one speech act). this paper demonstrates that a semantics for an agent communications language can be founded on the premise that intera-gent communications constitute a task-oriented dialogue in which agents are building, maintaining, and disbanding teams through their performance of communicative acts. this view requires that definitions of basic communicative acts, such as requesting, be recast in terms of the formation of a joint intention | a mental state that has been suggested underlies team behavior. thus, a model of teamwork based on joint intentions is shown to provide the coherence for interagent dialogue, and provides motivation for its step-by-step progression in virtue of the performance of communication actions. to illustrate these points, a semantics is developed for a number of communication fl this research was supported by a grant from the new energy development organization (japan) and by the advanced research projects agency (contract number dabt63-95-c-0007) of the department of defense. the results presented here do not reflect the position or policy of the either the japanese government or the us government. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_8579",
        "graph": {
            "node_idx": 8579,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    3,
                    5,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                8579,
                4416,
                10182,
                15413,
                3105,
                11052,
                21947,
                20022
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a constraint-based communication placement frameworkcommunication placement and optimization is an important step in the compilation of data-parallel languages. we present a framework that maximizes latency hiding by determining, in two separate phases, the earliest safe placement for sends and the latest balanced placement for the corresponding receives. the compositional structure of our technique allows machine-dependent resource constraints, which can effect the correctness of the placement and restrict the achievable communication and computation overlap, to influence the communication placement. we use constrained buffer size to illustrate constraint analysis and constraint-based communication placement. finally, we indicate how communication optimizations, like message vectorization, partially redundant communication elimination, message coalescing, and vector message pipelining, can be incorporated into the framework. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_8583",
        "graph": {
            "node_idx": 8583,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8583,
                18160
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: simultaneous refinement of pose and sensor registrationcomputer science technical report \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, vision and pattern recognition"
            }
        ]
    },
    {
        "id": "cora_test_8599",
        "graph": {
            "node_idx": 8599,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8599,
                18169
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning in distributed systems and multi-agent environmentsthe paper begins with the discussion on why we should be concerned with machine learning in the context of distributed ai. the rest of the paper is dedicated to various problems of multi-agent learning. first, a common framework for comparing different existing systems is presented. it is pointed out that it is useful to distinguish when the individual agents communicate. some systems communicate during the learning phase, others during the problem solving phase, for example. it is also important to consider how, that is in what language, the communication is established. the paper analyses several systems in this framework. particular attention is paid to previous work done by the authors in this area. the paper covers use of redundant knowledge, knowledge integration, evaluation of hypothesis by a community of agents and resolution of language differences between agents. _______________ (*) this paper has been prepared with a specific purpose in mind - to provide a basis for the panel on learning in distributed systems . it was edited by p.brazdil on the basis of the individual contributions received and/or papers made available. the names of the authors are shown in the alphabetic order. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_8678",
        "graph": {
            "node_idx": 8678,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8678,
                20529
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: computer-generated watercolorthis paper describes the various artistic effects of watercolor and shows how they can be simulated automatically. our watercolor model is based on an ordered set of translucent glazes, which are created independently using a shallow-water fluid simulation. we use a kubelka-munk compositing model for simulating the optical effect of the superimposed glazes. we demonstrate how computer-generated watercolor can be used in three different applications: as part of an interactive watercolor paint system, as a method for automatic image watercolorization, and as a mechanism for non-photorealistic rendering of three-dimensional scenes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_8699",
        "graph": {
            "node_idx": 8699,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                8699,
                11211,
                584,
                17748,
                8844,
                7003,
                10504,
                20628,
                17279,
                10797,
                16882,
                12774
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a processor-efficient scheme for supporting fault-tolerance in rate-monotonic schedulingwe address the issue of supporting fault-tolerance in a real-time system, where the deadlines of periodic tasks are guaranteed by the rate-monotonic algorithm. the problem is stated as one to minimize the total number of processors required to execute a set of periodic tasks, each of which, for fault-tolerance purposes, has multiple versions. a simple but effective algorithm is proposed to solve the task allocation problem. the algorithm is shown to have superior worst-case and average-case performance. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_8715",
        "graph": {
            "node_idx": 8715,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                8715,
                18233,
                7051,
                18684,
                5921,
                9726,
                8017
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the sample complexity of noise-tolerant learningin this paper, we further characterize the complexity of noise-tolerant learning in the pac model. specifically, we show a general lower bound of log(1=ffi) on the number of examples required for pac learning in the presence of classification noise. combined with a result of simon, we effectively show that the sample complexity of pac learning in the presence of classification noise is vc(f) \"(12) 2 : furthermore, we demonstrate the optimality of the general lower bound by providing a noise-tolerant learning algorithm for the class of symmetric boolean functions which uses a sample size within a constant factor of this bound. finally, we note that our general lower bound compares favorably with various general upper bounds for pac learning in the presence of classification noise. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_8716",
        "graph": {
            "node_idx": 8716,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    3,
                    10,
                    11,
                    12,
                    13,
                    14,
                    2,
                    15,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                8716,
                18233,
                746,
                7828,
                22884,
                24213,
                8064,
                16477,
                7827,
                6996,
                17825,
                10202,
                7854,
                23881,
                10370,
                19349
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an experimental comparison of three methods for constructing ensembles of decision trees: bagging, boosting, and randomizationbagging and boosting are methods that generate a diverse ensemble of classifiers by manipulating the training data given to a \"base\" learning algorithm. breiman has pointed out that they rely for their effectiveness on the instability of the base learning algorithm. an alternative approach to generating an ensemble is to randomize the internal decisions made by the base algorithm. this general approach has been studied previously by ali and pazzani and by dietterich and kong. this paper compares the effectiveness of randomization, bagging, and boosting for improving the performance of the decision-tree algorithm c4.5. the experiments show that in situations with little or no classification noise, randomization is competitive with (and perhaps slightly superior to) bagging but not as accurate as boosting. in situations with substantial classification noise, bagging is much better than boosting, and sometimes better than randomization. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_8733",
        "graph": {
            "node_idx": 8733,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    10,
                    14,
                    3,
                    6,
                    9,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    7,
                    23,
                    24,
                    25,
                    26,
                    27
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    8
                ]
            ],
            "node_list": [
                8733,
                1768,
                1382,
                11791,
                2300,
                9328,
                21523,
                21527,
                13495,
                21528,
                23035,
                16527,
                5087,
                2417,
                24063,
                21529,
                5910,
                8404,
                2298,
                20698,
                5911,
                19113,
                8405,
                10661,
                21530,
                24557,
                24991,
                21540
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a tutorial on visual servo controlthis paper provides a tutorial introduction to visual servo control of robotic manipulators. since the topic spans many disciplines our goal is limited to providing a basic conceptual framework. we begin by reviewing the prerequisite topics from robotics and computer vision, including a brief review of coordinate transformations, velocity representation, and a description of the geometric aspects of the image formation process. we then present a taxonomy of visual servo control systems. the two major classes of systems, position-based and image-based systems, are then discussed. since any visual servo system must be capable of tracking image features in a sequence of images, we include an overview of feature-based and correlation-based methods for tracking. we conclude the tutorial with a number of observations on the current directions of the research field of visual servo control. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_8734",
        "graph": {
            "node_idx": 8734,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                8734,
                1768,
                4963,
                4964,
                10625,
                1761,
                8405
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: forming complex dextrous manipulations from task primitivesthis paper discusses the implementation of complex manipulation tasks with a dextrous hand. the approach used is to build a set of primitive manipulation functions and combine them to form complex tasks. only fingertip, or precision, manipulations are considered. each function performs a simple two-dimensional translation or rotation that can be generalized to work with objects of different sizes and using different grasping forces. complex tasks are sequential combinations of the primitive functions. they are formed by analyzing the workspaces of the individual tasks and controlled by finite state machines. we present a number of examples, including a complex manipulationremoving the top of a child-proof medicine bottlethat incorporates different hybrid position/force specifications of the primitive functions of which it is composed. the work has been implemented with a robot hand system using a utah-mit hand. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_8737",
        "graph": {
            "node_idx": 8737,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                8737,
                9489,
                6977,
                17614
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: heterogeneous acoustic measurements for phonetic classificationin this paper we describe our recent efforts to improve acoustic-phonetic modeling by developing sets of heterogeneous, phone-class-specific measurements, and combining these diverse measurements into a probabilistic classification framework. we first describe a baseline classifier using homogeneous measurements. after comparing selected sub-tasks to known human performance, we define sets of phone-class-specific measurements which improve within-class classification performance. subsequently, we combine these heterogeneous measurements into an overall context-independent classification framework. we report on a series of phonetic classification experiments using the timit acoustic-phonetic corpus. our overall framework achieves 79.0% accuracy on the nist core test set. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_8748",
        "graph": {
            "node_idx": 8748,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                8748,
                2239,
                19894,
                6039,
                5637
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an incremental learning approach for completable planningmany real world planning domains are complex and uncertain, preventing complete a priori planning. however, real world planners can also rely on runtime information to facilitate additional planning during execution. the completable approach to planning introduces the idea of complet-able steps, which represent deferred planning decisions. through completable steps, a planner can defer particular goals until execution time, when additional information may be used for their achievement. to maintain the provably correct nature of plans afforded by classical planning, com-pletable steps have the additional requirement of achievability. unfortunately, without additional higher-order knowledge for reasoning about ach-ievability, proving achievability becomes infeasible for any real world domain. we thus developed an incremental approach for learning completable plans. using this approach, instead of proving ach-ievability a planner uses feedback from its experience with the real world to construct completable plans which cover an increasing space of situations. this approach to real-world planning has been successfully tested in a simple simulated ro bot navigation domain. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_8750",
        "graph": {
            "node_idx": 8750,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    4,
                    7,
                    1,
                    8,
                    3,
                    5,
                    9,
                    7,
                    10,
                    1,
                    8,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                8750,
                6391,
                2527,
                2528,
                8008,
                16648,
                6392,
                2529,
                18272,
                17290,
                18021,
                7837,
                18472,
                6450
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: how to retrieve relevant information?the document presents an approach to judging relevance of retrieved information based on a novel approach to similarity assessment. contrary to other systems, we define relevance measures (context in similarity) at query time. this is necessary if since without a context in similarity one cannot guarantee that similar items will also be relevant. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_8758",
        "graph": {
            "node_idx": 8758,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8758,
                18240
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: monte carlo approach to bayesian regression modelingin the framework of a functional response model (i.e. a regression model, or a feedforward neural network) an estimator of a nonlinear response function is constructed from a set of functional units. the parameters defining these functional units are estimated using the bayesian approach. a sample representing the bayesian posterior distribution is obtained by applying the markov chain monte carlo procedure, namely the combination of gibbs and metropolis-hastings algorithms. the method is described for histogram, b-spline and radial basis function estimators of a response function. in general, the proposed approach is suitable for finding bayes-optimal values of parameters in a complicated parameter space. we illustrate the method on numerical examples. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_8762",
        "graph": {
            "node_idx": 8762,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                8762
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: representing action: indeterminacy and ramificationswe define and study a high-level language for describing actions, more expressive than the action language a introduced by gelfond and lif-schitz. the new language, ar, allows us to describe actions with indirect effects (ramifications), nondeterministic actions, and actions that may be impossible to execute. it has symbols for nonpropositional fluents and for the fluents that are exempt from the commonsense law of inertia. temporal projection problems specified using the language ar can be represented as nested abnormality theories based on the situation calculus. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_8788",
        "graph": {
            "node_idx": 8788,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    3,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3
                ]
            ],
            "node_list": [
                8788,
                401,
                21242,
                6478,
                13178,
                8789,
                21244
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: modeling and solution environments for mpec: gams matlabwe describe several new tools for modeling mpec problems that are built around the introduction of an mpec model type into the gams language. we develop subroutines that allow such models to be communicated directly to mpec solvers. this library of interface routines, written in the c language, provides algorithmic developers with access to relevant problem data, including for example, function and jaco-bian evaluations. a matlab interface to the gams mpec model type has been designed using the interface routines. existing mpec models from the literature have been written in gams, and computational results are given that were obtained using all the tools described. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_8794",
        "graph": {
            "node_idx": 8794,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                8794,
                3789,
                24196,
                14276,
                4815,
                208,
                24856,
                8979,
                15603
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: training compilers for better inlining decisionsdepartment of computer science and engineering, fr-35 university of washington seattle, washington 98195 usa technical report 93-05-05 may 1993 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_8799",
        "graph": {
            "node_idx": 8799,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    2,
                    7,
                    3,
                    8,
                    4,
                    5,
                    2,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    4,
                    5,
                    5
                ]
            ],
            "node_list": [
                8799,
                1706,
                18797,
                9667,
                12258,
                15669,
                16556,
                1705,
                20671,
                23386,
                15668
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mixing email with babelincreasingly large numbers of people communicate today via electronic means such as email or news forums. one of the basic properties of the current electronic communication means is the identification of the end-points. however, at times it is desirable or even critical to hide the identity and/or whereabouts of the end-points (e.g., human users) involved. this paper discusses the goals and desired properties of anonymous email in general and introduces the design and salient features of babel anonymous remailer. babel allows email users to converse electronically while remaining anonymous with respect to each other and to other even hostile - parties. a range of attacks and corresponding countermeasures is considered. an attempt is made to formalize and quantify certain dimensions of anonymity and untraceable communication. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_8832",
        "graph": {
            "node_idx": 8832,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                8832,
                18267,
                11068,
                22453,
                3095
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: engineering software design processes to guide process executionusing systematic development processes is an important characteristic of any mature engineering discipline. in current software practice, software design methodologies (sdms) are intended to be used to help design software more systematically. this paper explicitly shows, however, that one well-known example of such an sdm, booch object-oriented design (bood), as described in the literature is far too vague to provide specific guidance to designers, and is too imprecise and incomplete to be considered as a fully systematic process for specific projects. to provide more effective and appropriate guidance and control in software design processes, we applied the process programming concept to the design process. given two different sets of plausible process requirements, we elaborated two more detailed and precise design processes that are responsive to these requirements. we have also implemented, experimented with, and evaluated a prototype (called debus-booch) that supports the execution of these detailed processes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_8834",
        "graph": {
            "node_idx": 8834,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                8834,
                18270,
                18436,
                5895,
                1766,
                1762,
                19620,
                20422
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a new system architecture for applying symbolic learning techniques to robot manipulation tasksin recent years there has been an increasing interest in applying machine learning techniques to robotics [14]. in this paper we present a new system architecture that enables a robot control system to learn on a symbolic level during planning and executing tasks. a user can program the robot by simply demonstrating the tasks it shall perform. by performing inductive generalization and specialization steps the system is able to improve its knowledge bases. the architecture consists of a set of distributed knowledge units which realize a focus of attention necessary for efficient execution and learning, and which also make a competition between different problem solutions possible. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_8861",
        "graph": {
            "node_idx": 8861,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    1,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                8861,
                4273,
                18813,
                20234,
                704,
                1056,
                24408,
                14761,
                23068
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: detecting value-based scalar dependenceprecise value-based data dependence analysis for scalars is useful for advanced compiler optimizations. the new method presented here for flow and output dependence uses factored use and def chains (fud chains), our interpretation and extension of static single assignment. it is precise with respect to conditional control flow and dependence vectors. our method detects dependences which are independent with respect to arbitrary loop nesting, as well as loop-carried dependences. a loop-carried dependence is further classified as being carried by the previous iteration, with distance 1, or by any previous iteration, with direction &lt;. this precision cannot be achieved by traditional analysis, such as dominator information or reaching definitions. to compute anti-dependence, we use factored redef-use chains, which are related to fud chains. we are not aware of any prior work which explicitly deals with scalar data dependence utilizing a sparse graph representation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_8872",
        "graph": {
            "node_idx": 8872,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3
                ]
            ],
            "node_list": [
                8872,
                9109,
                21760,
                14289,
                18430,
                21288,
                13261,
                23168,
                24006
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: performance of cache coherence in stackable filingindividual layers of such a system often need to cache data to improve performance or provide desired functionality. when access to different layers is allowed, cache incoherencies can occur. without a cache coherence solution, layer designers must either restrict layer access and flexibility or compromise the layered structure to avoid potential data corruption. the value of modular designs such as stacking can be questioned without a suitable solution to this problem. this paper presents a general cache coherence architecture for stackable filing, including a standard approach to data identification as a key component to layered coherence protocols. we also present a detailed performance analysis of one implementation of stack cache-coherence, which suggests that very low overheads can be achieved in practice. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_8908",
        "graph": {
            "node_idx": 8908,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                8908,
                18310
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: runtime support for portable distributed data structuresmultipol is a library of distributed data structures designed for irregular applications, including those with asynchronous communication patterns. in this paper, we describe the multipol runtime layer, which provides an efficient and portable abstraction underlying the data structures. it contains a thread system to express computations with varying degrees of parallelism and to support multiple threads per processor for hiding communication latency. to simplify programming in a mul-tithreaded environment, multipol threads are small, finite-length computations that are executed atomically. rather than enforcing a single scheduling policy on threads, users may write their own schedulers or choose one of the schedulers provided by multipol. the system is designed for distributed memory architectures and performs communication optimizations such as message aggregation to improve efficiency on machines with high communication startup overhead. the runtime system currently runs on the thinking machines cm5, intel paragon, and ibm sp1, and is being ported to a network of workstations. multipol applications include an event-driven timing simulator [1], an eigenvalue solver [2], and a program that solves the phylogeny problem [3]. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_8932",
        "graph": {
            "node_idx": 8932,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    3,
                    4
                ]
            ],
            "node_list": [
                8932,
                18325,
                21697,
                13707,
                14681
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an empirical study of secure mpeg video transmissionsmpeg (moving pictures expert group) is an industrial standard for video processing and is widely used in multimedia applications in the internet. however, no security provision is specified in the standard. we conducted an experimental study of previously proposed selective encryption schemes for mpeg video security. this study showed that these methods are inadequate for sensitive applications. we discuss the tradeoffs between levels of security and computational and compression efficiency. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_8938",
        "graph": {
            "node_idx": 8938,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    9
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                8938,
                5654,
                19963,
                6117,
                17369,
                6118,
                14818,
                13593,
                18278,
                22622
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: facial analysis and synthesis using image-based modelsin this paper, we describe image-based modeling techniques that make possible the creation of photo-realistic computer models of real human faces. the image-based model is built using example views of the face, bypassing the need for any three-dimensional computer graphics models. a learning network is trained to associate each of the example images with a set of pose and expression parameters. for a novel set of parameters, the network synthesizes a novel, intermediate view using a morphing approach. this image-based synthesis paradigm can adequately model both rigid and non-rigid facial movements. we also describe an analysis-by-synthesis algorithm, which is capable of extracting a set of high-level parameters from an image sequence involving facial movement using embedded image-based models. the parameters of the models are perturbed in a local and independent manner for each image until a correspondence-based error metric is minimized. a small sample of experimental results is presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_8993",
        "graph": {
            "node_idx": 8993,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                8993,
                5924,
                10175,
                17312,
                3407,
                17712,
                2993,
                21626,
                23174,
                19128,
                23306
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: recursive automatic algorithm selection for inductive learningcoins technical report 94-61 august 1994 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_8995",
        "graph": {
            "node_idx": 8995,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    1,
                    10,
                    11,
                    12,
                    13,
                    1,
                    14,
                    2,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                8995,
                2420,
                21788,
                2873,
                2414,
                4892,
                4888,
                7521,
                2421,
                17625,
                21269,
                13218,
                2415,
                16758,
                20289,
                3698,
                23445,
                15730,
                15778,
                6904,
                24592,
                6800,
                17340,
                2411,
                24473,
                7524,
                21906,
                17191,
                2408,
                23235,
                20480,
                10828,
                23443,
                23444,
                2425,
                23483
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: parallel orientation of polygonal parts. dynamics of a rigid body in frictional contact with rigid35] a. s. rao and k. y. goldberg. grasping planar curved parts with a parallel-jaw gripper. technical report # 299, university of southern california, institute of robotics and intelligent systems (iris), los angeles, calif. 90089-0273, september 1991. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_8996",
        "graph": {
            "node_idx": 8996,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                8996,
                340,
                8997
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the role of shared randomness in two prover proof systemsin this paper we consider which aspects of the two prover model are necessary for their striking language recognition and zero-knowledge capabilities. we approach this question by looking at an alternative, more symmetric model which we call the double verifier model. we find that in this model the shared randomness of the verifiers is key to the language recognition power: if the verifiers don't share randomness the power is pspace; otherwise it is mip = nexptime. we find that the shared randomness of the provers is necessary for zero-knowledge: if the provers don't share randomness, statistical zero-knowledge these results have immediate implications for the standard two-prover model. we see that correlations between the verifier's queries is crucial for the language recognition power of two prover proofs. in particular, the natural analog of ip = am does not hold in the two-prover model unless nexptime = pspace. similarly, we see that shared randomness, or correlation of the provers' answers, is necessary for the statistical zero-knowledge of two prover proofs. is only possible for languages in bpp np ; else it is possible for all of nexptime. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_8999",
        "graph": {
            "node_idx": 8999,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8,
                    9,
                    10,
                    11,
                    4,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    12,
                    13,
                    21,
                    22,
                    23
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5
                ]
            ],
            "node_list": [
                8999,
                18370,
                3165,
                3936,
                5846,
                9656,
                3167,
                2802,
                11916,
                25056,
                7441,
                25102,
                2061,
                6346,
                10818,
                5845,
                11911,
                9695,
                9922,
                20751,
                13037,
                21589,
                650,
                4946
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: plan recognition for real-world autonomous robots: work in progressan agent operating in the real world must be able to coordinate its activities with those of other agents. traditionally, work in multiagent coordination has assumed that agents can communicate about their intentions or that they are coordinated through the efforts of a third party. in many environments, however, reliance on communication or on a coordinating agent is infeasible due to the unpredictable nature of the environment or to negative side-effects of communication. we have developed a multiple-resolution hierarchical scheme by which an agent can use observations to infer the high-level goals of other agents. the research domain to which we have applied our scheme is coordinated motion and navigation among multiple robots, both in simulation and in the real-world. our hierarchical scheme makes probabilistic plan recognition possible in this domain, and it helps to further identify and begin solving crucial issues in plan recognition in physical domains. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9017",
        "graph": {
            "node_idx": 9017,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                9017,
                18381,
                19854,
                25067
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: architecture of intelligence: the problems and current approaches to solutions 1we start by making a distinction between mind and cognition, and by positing that cognition is an aspect of mind. we propose as a working hypothesis a separability hypothesis which posits that we can factor off an architecture for cognition from a more general architecture for mind, thus avoiding a number of philosophical objections that have been raised about the \"strong ai\" hypothesis. we then discuss different positions that have been taken about how biological a theory of intelligence or cognition needs to be. using a coinsorting machine as an example, we discuss a range of positions on representations, and argue that for many purposes, the same body of matter can be interpreted as bearing different representational formalisms. we adopt the view that one way to understand the diversity of architectural theories is to make a distinction between deliberative and subdeliberative architectures. we propose that symbolic architectures, especially those based on logic or problem spaces, are essentially modeled on intuitions about deliberation, while connectionist and other architectures are inspired by phenomena that occur below deliberation. much of the discussion and arguments in the field are not so much about \"facts of the matter\" as they are about analytic stances. thus the search for an architectural level which will explain all the interesting phenomena of cognition is likely to be futile. there are a number of levels which interact, unlike in the computer model, and this interaction makes explanation of even relatively simple cognitive phenomena in terms of one level quite incomplete. a major problem in the study of intelligence and cognition is the range of - often implicit - assumptions about what phenomena these terms are meant to cover. are we just talking about cognition as having and using knowledge, or are we also talking about other mental states such as emotions and subjective awareness? are we talking about intelligence as an abstract set of capacities, or as a set of biological mechanisms and phenomena? these two questions set up two dimensions of discussion about intelligence. after we discuss these dimensions we will discuss information processing, representation, and cognitive architectures. when people think of intelligence and cognition, they often think of an agent being in some knowledge state, that is, having thoughts, beliefs. they also think of the underlying process of cognition as something that changes knowledge states. since knowledge states are particular types of information states the underlying process is thought of as information processing. (we will discuss this in more detail later in the paper.) however, besides these knowledge states, mental phenomena also include such things as emotional states and subjective consciousness. under what conditions can these other mental properties also be attributed to artifacts to which we attribute knowledge states? is intelligence separable from these other mental phenomena? 1 this paper is a slightly revised version of the paper with the same title appearing in current science, \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9018",
        "graph": {
            "node_idx": 9018,
            "edge_index": [
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                9018,
                20075,
                22884
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: classification by pairwise couplingwe discuss a strategy for polychotomous classification that involves estimating class probabilities for each pair of classes, and then coupling the estimates together. the coupling model is similar to the bradley-terry method for paired comparisons. we study the nature of the class probability estimates that arise, and examine the performance of the procedure in real and simulated datasets. classifiers used include linear discriminants, nearest neighbors, and the support vector machine. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_9032",
        "graph": {
            "node_idx": 9032,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9032,
                18392
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a delay analysis of sender-initiated and receiver-initiated reliable multicast protocolsa growing number of network applications require the use of a reliable multicast protocol to disseminate data from a source to a potentially large number of receivers. this paper presents an analytic performance analysis of the packet delay incurred under three generic sender- and receiver-initiated approaches towards reliable multicast. we focus on the host processing requirements of these protocols and derive expressions for average time between the initial arrival of a packet at a sender and its correct reception at a randomly chosen receiver. our numerical results indicate that a nak-based protocol that limits nak generation by intentionally and randomly delaying nak packets can achieve substantially higher throughput than the other two protocols examined, and can do so without suffering an appreciable higher delay over a range of system parameters. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_9051",
        "graph": {
            "node_idx": 9051,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9051,
                18404
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: identifying def/use information of statements that construct and traverse dynamic recursive data structurespointer analysis is essential for optimizing and paralleliz-ing compilers. it examines pointer assignment statements and estimates pointer-induced aliases among pointer variables or possible shapes of dynamic recursive data structures. however, previously proposed techniques perform pointer analysis without the knowledge of traversal patterns of dynamic recursive data structures to be constructed. this paper presents an algorithm to identify the traversal patterns of recursive data structures and propagate this information back to those statements that define the data structures. this approach recognizes the def/use relationships between the statements that define and traverse dynamic recursive data structures. the outcome of this technique will be useful for pointer analysis and parallelization. algorithms to perform pointer analysis and dependence test using the knowledge of traversal patterns will also be presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_9105",
        "graph": {
            "node_idx": 9105,
            "edge_index": [
                [
                    1,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                9105,
                10265
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: constraint based topology design of atm networksin this paper, a novel network design model (constraint-based model) is described, and a network design tool, implemented in java, is used to explore alternative designs for networks joining major u.s. cities. the characteristics of different topologies, such as star, minimum spanning tree (mst), and delau-nay triangulation, are compared under a variety of traffic constraints. our results allow us to characterize the conditions that favor the different topologies. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_9106",
        "graph": {
            "node_idx": 9106,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                9106,
                10265,
                9105
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: designing minimum cost nonblocking communication networksthis paper addresses the problem of topological design of atm (and similar) communication networks. we formulate the problem from a worst-case point of view, seeking network designs that, subject to specified raffic constraints, are nonblocking for point-to-point and multicast virtual circuits. within this model we give various conditions under which star networks are optimal or near-optimal. these conditions are approximately satisfied in many common situations making the results of practical significance. an important consequence of these results is that, where they apply, there is no added cost for nonblocking multicast communication, relative to networks that are nonblocking for point-to-point traffic only. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_9124",
        "graph": {
            "node_idx": 9124,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    3
                ]
            ],
            "node_list": [
                9124,
                18438,
                14060,
                14059,
                23537
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 24 adaptive load sharing in homogenous distrib methodical analysis of adaptive load sharing algorithms, ieee14] y. belhamissi, and m. jegado, scheduling in distributed systems: survey and questions, tech. report 1478, irisa/inria, rennes cedex, france, june 1991. [23] s. zhou, j. wang, x. zheng, and p. delisle, utopia: a load sharing facility for large, heterogeneous distributed computer systems, tech. report 257, computer systems research institute, university of toronto, canada, april 1992. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, distributed"
            }
        ]
    },
    {
        "id": "cora_test_9131",
        "graph": {
            "node_idx": 9131,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    2,
                    10,
                    11,
                    12,
                    9,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                9131,
                10378,
                19010,
                14046,
                10017,
                9129,
                20348,
                10016,
                21983,
                14047,
                14043,
                14044,
                13887
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: user-needs analysis and design methodology for an automated documentation generatortelephone network planning engineers routinely study feeder routes within the telephone network in order to create and refine network capacity expansion (relief) plans. in doing so they make use of a powerful software tool called leis-plan. we are developing an extension to plan called plandoc that will automatically generate natural language narratives documenting the engineers' use of plan. in this paper, we present the user-needs analysis and design methodology we have used in developing the plandoc system. we describe our interviews with various end users to determine if such a system would be desirable and what design factors would make it useful. we show how we model the system on a set of iteratively-revised human-generated narratives. the model narratives determine the function and architecture of the documentation system, and they inform the development of the system components. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_9144",
        "graph": {
            "node_idx": 9144,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9,
                    3,
                    4,
                    10,
                    11,
                    12,
                    13,
                    14,
                    4,
                    0,
                    15,
                    9,
                    7,
                    16,
                    15,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    5,
                    7,
                    7,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                9144,
                18572,
                12905,
                21067,
                21091,
                10788,
                16100,
                7793,
                12925,
                16427,
                12939,
                15873,
                15871,
                19633,
                16428,
                10005,
                10004
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: formalising motivational attitudes of agents using the karo frameworkin this paper we present a formalisation of motivational attitudes, the attitudes that are the driving forces behind the actions of agents. we consider the statics of these attitudes both at the assertion level, i.e. ranging over propositions, and at the practition 1 level, i.e. ranging over actions, as well as the dynamics of these attitudes, i.e. how they change over time. starting from an agent's wishes, which form the primitive, most fundamental motivational attitude, we define its goals as induced by those wishes that do not yet hold, i.e. are unfulfilled, but are within the agent's practical possibility to bring about, i.e. are implementable for the agent. among these unfulfilled, implementable wishes the agent selects those that qualify as its goals. based on its knowledge on its goals and practical possibilities, an agent may make certain commitments. in particular, an agent may commit itself to actions that it knows to be correct and feasible to bring about some of its known goals. as soon as it no longer knows its commitments to be useful, i.e. leading to fulfilment of some goal, and practically possible, an agent is able to undo these commitments. both the act of committing as well as that of undoing commitments is modelled as a special model-transforming action in our framework, which extends the usual state-transition paradigm of propositional dynamic logic. in between making and undoing commitments, an agent is committed to all the actions that are known to be identical for all practical purposes to the ones in its agenda. by modifying the agent's agenda during the execution of actions in a straightforward way, it is ensured that commitments display an acceptable behaviour with regard to composite actions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9156",
        "graph": {
            "node_idx": 9156,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                9156,
                9954
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: boxes in high dimension 1dimacs technical report 97-32 july 1997 1 a preliminary version of this paper appeared in the proceedings of the eurocolt '97 conference, published in volume 1208 of lecture notes in artificial intelligence, pages 3-15. springer-verlag, 1997. the journal version will appear in algoritmica. 2 e-mail: beimel@dimacs.rutgers.edu. http://dimacs.rutgers.edu/~beimel. part of this research was done while the author was a ph.d. student at the technion. 3 e-mail: eyalk@cs.technion.ac.il. http://www.cs.technion.ac.il/~eyalk. this research was supported by technion v.p.r. fund 120-872 and by japan technion society research fund. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_9175",
        "graph": {
            "node_idx": 9175,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                9175,
                5209,
                10920,
                18868,
                24839,
                6442
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: operating system support for protocol boostersprotocol boosters\" are modules inserted into protocol graphs. they allow the protocol's behavior to adapt to its environment. boosters can mask undesirable properties of links or subnets in an internetwork. the method permits use of proprietary protocols and supports end-to-end optimizations. we have implemented protocol boosters support in the freebsd version of unix for intel architecture machines. our prototype embeds boosters in the 4.4 bsd-lite internet protocol (ip) stack. we have measured the performance of two prototype boosters: an encryption booster (for passage across insecure subnets) and a compression booster (for passage across bandwidth-impaired subnets). our measurement data suggests that os support for this method can be constructed with low performance overhead; execution of the protocol elements dominates any overhead introduced by our implementation. we discuss some lessons learned from the implementation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_9179",
        "graph": {
            "node_idx": 9179,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                9179,
                8323,
                18058
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: speaker normalization based on frequency warpingin speech recognition, speaker-dependence of a speech recognition system comes from speaker-dependence of the speech feature, and the variation of vocal tract shape is the major source of inter-speaker variations of the speech feature, though there are some other sources which also contribute. in this paper, we address the approaches of speaker normalization which aim at normalizing speaker's vocal tract length based on frequency warping (fwp). the fwp is implemented in the front-end preprocessing of our speech recognition system. we investigate the formant-based and ml-based fwp in linear and nonlinear warping modes, and compare them in detail. all experimental results are based on our janus3 large vocabulary continuous speech recognition system and the spanish spontaneous scheduling task database (ssst). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_9204",
        "graph": {
            "node_idx": 9204,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    3,
                    4,
                    5,
                    4,
                    5,
                    7,
                    8,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    5,
                    5
                ]
            ],
            "node_list": [
                9204,
                6526,
                16523,
                10809,
                19646,
                16085,
                17491,
                23761,
                23759
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: error correction via a post-processor for continuous speech recognitionthis paper presents a new technique for overcoming several types of speech recognition errors by post-processing the output of a continuous speech recognizer. the post-processor output contains fewer errors, thereby making interpretation by higher-level modules, such as a parser, in a speech understanding system more reliable. the primary advantage to the post-processing approach over existing approaches for overcoming sr errors lies in its ability to introduce options that are not available in the sr module's output. this work provides evidence for the claim that a modern continuous speech recognizer can be used successfully in \"black-box\" fashion for robustly interpreting spontaneous utterances in a dialogue with a human. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_9220",
        "graph": {
            "node_idx": 9220,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    5,
                    1,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                9220,
                10746,
                8546,
                13961,
                22138,
                12265,
                9880,
                21901
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: lower bounds on messages and rounds for network authentication protocolsresearch in authentication protocols has largely focused on developing and analyzing protocols that are secure against certain types of attacks. there is little and only scattered discussion on protocol efficiency. this paper presents results on the lower bounds on the numbers of messages and rounds required for network authentication. for each proven lower bound, an authentication protocol achieving the bound is also given, thus proving that the bound is a tight bound if the given optimal protocol is secure. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_9221",
        "graph": {
            "node_idx": 9221,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                9221,
                10746,
                19800,
                24897,
                8546
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: new protocols for third-party-based authentication and secure broadcastthis paper gives needham-schroeder style third-party-based authentication and key-distribution protocols that do not use conventional cryptosystems such as des. the new protocols use polynomial interpolation and secure keyed one-way hash functions, and are efficient compared with protocols using conventional cryptosystems. the same techniques are generalized to develop protocols for secure broadcast and for secure communication. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_9223",
        "graph": {
            "node_idx": 9223,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9223,
                18495
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the spring system: integrated support for complex real-time systemsthe spring system is a highly integrated collection of software and hardware that synergistically operates to provide end-to-end support in building complex real-time applications. in this paper, we show how spring's specification language, programming language, software generation system, and operating system kernel are applied to build a flexible manufacturing testbed. the same ingredients have also been used to realize a predictable version of a robot pick and place application used in industry. these applications are good examples of complex real-time systems that require flexibility. the goal of this paper is to demonstrate the integrated nature of the system and the benefits of integration; in particular, the use of reflective information and the value of function and time composition. the lessons learned from these applications and the project as a whole are also presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_9277",
        "graph": {
            "node_idx": 9277,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9277,
                7220
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hash tables in logic programming different aspects of hash tables as a data structure inupmail technical report no. 40 abstract hash tables are a new concept in prolog since they can not be efficiently implemented in the language itself. we give informal semantics for hash tables as partial functions on logical terms. we are careful to ensure that we can represent the hash tables as logical terms in order to make the ordinary syntactic unification apply. the implementation is a generalisation of the method suggested by eriksson and rayner. their \"mutable arrays\" are a special case of our multiple version hash tables. the implementation has been used in tricia, an implementation of prolog developed at uppsala university. an earlier version of this paper was presented at the 4th international conference on logic programming. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_9294",
        "graph": {
            "node_idx": 9294,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9294,
                18536
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: biased random walks, lyapunov functions, and stochastic analysis of best fit bin packing (preliminary version)we study the average case performance of the best fit algorithm for on-line bin packing under the distribution ufj; kg, in which the item sizes are uniformly distributed in the discrete range f1=k; 2=k; : : :; j=kg. our main result is that, in the case j = k 2, the expected waste for an infinite stream of items remains bounded. this settles an open problem posed recently by coffman et al [4]. it is also the first result which involves a detailed analysis of the infinite multi-dimensional markov chain underlying the algorithm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_9304",
        "graph": {
            "node_idx": 9304,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9304,
                18543
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: separability is a learner's best friendgeometric separability is a generalisation of linear separability, familiar to many from minsky and papert's analysis of the perceptron learning method. the concept forms a novel dimension along which to conceptualise learning methods. the present paper shows how geometric separability can be defined and demonstrates that it accurately predicts the performance of a at least one empirical learning method. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_9310",
        "graph": {
            "node_idx": 9310,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                9310,
                18552,
                5686,
                4737,
                22100,
                24269,
                19404,
                20455,
                15496,
                25063,
                20563,
                11974,
                23186,
                15495,
                23187
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolution of the topology and the weights of neural networks using genetic programming with agenetic programming is a methodology for program development, consisting of a special form of genetic algorithm capable of handling parse trees representing programs, that has been successfully applied to a variety of problems. in this paper a new approach to the construction of neural networks based on genetic programming is presented. a linear chromosome is combined to a graph representation of the network and new operators are introduced, which allow the evolution of the architecture and the weights simultaneously without the need of local weight optimization. this paper describes the approach, the operators and reports results of the application of the model to several binary classification problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_9328",
        "graph": {
            "node_idx": 9328,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                9328,
                24557,
                24991
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a modular system for robust positioning using feedback from stereo visionthis article introduces a modular framework for robot motion control using stereo vision. the approach is based on a small number of generic motion control operations referred to as primitive skills. each primitive skill uses visual feedback to enforce a specific task-space kinematic constraint between a robot end-effector and a set of target features. by observing both the end-effector and target features, primitive skills are able to position with an accuracy that is independent of errors in hand-eye calibration. furthermore, primitive skills are easily combined to form more complex kinematic constraints as required by different applications. these control laws have been integrated into a system that performs tracking and control on a single processor at real-time rates. experiments with this system have shown that it is extremely accurate, and that it is insensitive to camera calibration error. the system has been applied to a number of example problems, showing that modular, high precision, vision-based motion control is easily achieved with off-the-shelf hardware. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_9334",
        "graph": {
            "node_idx": 9334,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    10,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                9334,
                4693,
                8837,
                21549,
                13508,
                10950,
                10620,
                6583,
                14018,
                2112,
                7723
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: data and process alignment in modula-2*in this paper we present a technique implemented in our optimizing compiler that enhances locality in a source-to-source transformation. analysis of data access patterns and parallel operations leads to an arrangement graph. processing of this graph reveals conflicting arrangements. some assumptions and a heuristic based on dynamic programming enables the compiler to find the best alignment in logarithmic time. the technique has improved runtime performance on benchmarks by over 60%. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_9375",
        "graph": {
            "node_idx": 9375,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                9375,
                18599,
                11360
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a better lower bound for on-line schedulingwe consider the on-line version of the original m-machine scheduling problem: given m machines and n positive real jobs, schedule the n jobs on the m machines so as to minimize the makespan, the completion time of the last job. in the on-line version, as soon as a job arrives, it must be assigned immediately to one of the m machines. we study the competitive ratio of the best algorithm for m-machine scheduling. the largest prior lower bound was that if m 4, then every algorithm has a competitive ratio at least 1+1= 2 1:707. we show that if m is large enough, the competitive ratio of every p \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_9414",
        "graph": {
            "node_idx": 9414,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9414,
                18627
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multi-agent gesture interpretation for robotic cable harnessinggesture-based programming is our paradigm to ease the burden of programming robots. it is an extension of the human demonstration approach that includes encapsulated expertise to guide subtask segmentation and robust real-time execution. a variety of human gestures must be recognized to provide a useful and intuitive interface for the human demonstrator. while the full gesture-based programming environment has not yet been realized, this paper describes a multi-modal gesture recognition system that embodies many of the necessary elements to achieve true gesture-based programming. it begins with recognition of the gestures of a human demonstrating a trajectory. the execution agents then try to repeat the trajectory while observing corrective gestures from the teacher. similar multi-agent networks are used for both training and execution. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_9417",
        "graph": {
            "node_idx": 9417,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                9417,
                4992,
                17065,
                2080
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reactive visual control of multiple non-holonomic robotic agentswe have developed a multiagent robotic system including perception, cognition, and action components to function in a dynamic environment. the system involves the integration and coordination of a variety of diverse functional modules. at the sensing level, our complete multiagent robotic system incorporates detection and recognition algorithms to handle the motion of multiple mobile robots in a noisy environment. at the strategic and decision-making level, deliberative and reactive components take in the processed sensory inputs and select the appropriate actions to reach objectives under the dynamic and changing environmental conditions. at the actuator level, physical robotic effectors execute the motion commands generated by the cognition level. in this paper, we focus on presenting our approach for reactive visual control of multiple mobile robots. we present a tracking and prediction algorithm which handles visually homogeneous agents. we describe our non-holonomic control for single robot navigation, and show how it applies to dynamic path generation to avoid multiple moving obstacles. we illustrate our algorithms with examples from our real implementation. using the approaches introduced, our robotic team won the robocup-97 small-size robot competition at ijcai-97 in nagoya, japan. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_9418",
        "graph": {
            "node_idx": 9418,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                9418,
                4992,
                17065,
                2080,
                9417
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: autonomous soccer robotsthe robocup 97 competition provides an excellent opportunity to demonstrate the techniques and methods of artificial intelligence, autonomous agents and computer vision. on a soccer field the core capabilities a player must have are to navigate the field, track the ball and other agents, recognize the difference between agents, collaborate with other agents, and hit the ball in the correct direction. usc's dreamteam of robots can be described as a group of mobile autonomous agents collaborating in a rapidly changing environment. the key characteristic of this team is that each soccer robot is an autonomous agent, self-contained with all of its essential capabilities onboard. our robots share the same general architecture and basic hardware, but they have integrated abilities to play different roles (goal keeper, defender or forward) and utilize different strategies in their behavior . our philosophy in building these robots is to use the least possible sophistication to make them as robust as possible. in the 1997 robocup competition, the dreamteam played well and won the world championship in the middle sized robot league. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_9423",
        "graph": {
            "node_idx": 9423,
            "edge_index": [
                [
                    1,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                9423,
                18637,
                9424
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cbr on semi-structured documents: the experiencebook and the fallq projectin this article, we present a case-based approach on flexible query answering systems in two different application areas: the experiencebook supports technical diagnosis in the field of system administration. in the fallq project we use our cbr system for document retrieval in an industrial setting. the objective of these systems is to manage knowledge stored in less structured documents. the internal case memory is implemented as a case retrieval net. this allows to handle large case bases with an efficient retrieval process. in order to provide multi user access we chose the client server model combined with a web interface. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_9425",
        "graph": {
            "node_idx": 9425,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    0,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                9425,
                19894,
                10636,
                3010,
                13969,
                8448,
                21911,
                21912,
                13905,
                11079,
                8555
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: agents that explain their own actionscomputer generated battlefield agents need to be able to explain the rationales for their actions. such explanations make it easier to validate agent behavior, and can enhance the effectiveness of the agents as training devices. this paper describes an explanation capability called debrief that enables agents implemented in soar to describe and justify their decisions. debrief determines the motivation for decisions by recalling the context in which decisions were made, and determining what factors were critical to those decisions. in the process debrief learns to recognize similar situations where the same decision would be made for the same reasons. debrief currently being used by the tacair-soar tactical air agent to explain its actions, and is being evaluated for incorporation into other reactive planning agents. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_9426",
        "graph": {
            "node_idx": 9426,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    0,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    12,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                9426,
                1008,
                920,
                23869,
                5752,
                24366,
                4316,
                9427,
                24611,
                19724,
                23178,
                4315,
                23179,
                6755,
                6347,
                917,
                718,
                12777,
                24651,
                7241,
                5835
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: centralized task distribution in the presence of uncertainty and time deadlines authors:this paper focuses on a deadline-based multiagent task decomposition/scheduling of hierarchical task structures in an environment in which one agent is responsible for assigning subtasks and their execution order to a set of agents. the overall task to be decomposed is specified in an extended version of taems task modeling framework in which task quality and execution time are uncertain before execution and are represented in the form of a probability distribution. the master agent generates and assigns an initial subtask schedule to agents, and if necessary will revise agent schedules whenever agents make rescheduling requests. these requests are based on the degree of deviation that has occurred in expected quality and duration as a result of actual method execution. evaluations of scheduler performance indicate a phase transition of rescheduling efficiency with respect to problem difficulty. specifically, while frequent rescheduling was ineffective for both very easy and very difficult problems, it was extremely effective in the transition region (mid-range) of difficulty. 1 the material in this paper is based upon work partially supported by the national science foundation \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9435",
        "graph": {
            "node_idx": 9435,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                9435,
                10688
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: occam's two razors: the sharp and the blunt razor: given two models with the sameoccam's razor has been the subject of much controversy. this paper argues that this is partly because it has been interpreted in two quite different ways, the first of which (simplicity is a goal in itself) is essentially correct, while the second (simplicity leads to greater accuracy) is not. the paper reviews the large variety of theoretical arguments and empirical evidence for and against the \"second razor,\" and concludes that the balance is strongly against it. in particular, it builds on the case of (schaffer, 1993) and (webb, 1996) by considering additional theoretical arguments and recent empirical evidence that the second razor fails in most domains. a version of the first razor more appropriate to kdd is proposed, and we argue that continuing to apply the second razor risks causing significant opportunities to be missed. 1 william of occam's famous razor states that \"nun-quam ponenda est pluralitas sin necesitate,\" which, approximately translated, means \"entities should not be multiplied beyond necessity\" (tornay 1938). it was born in the late middle ages as a criticism of scholastic philosophy, whose theories grew ever more elaborate without any corresponding improvement in predictive power. in the intervening centuries it has come to be seen as one of the fundamental tenets of modern science, and today it is often invoked by learning theorists and kdd practitioners as a justification for preferring simpler models over more complex ones. however, formulating occam's razor in kdd terms it trickier than might appear at first. leaving aside for the moment the question of how to measure simplicity, let generalization error of a model be its error rate on unseen examples, and training-set error be its error on the examples it was learned from. then the formulation that is perhaps closest to occam's original intent is: \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_9436",
        "graph": {
            "node_idx": 9436,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9436,
                18644
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: parallel i/o using a distributed disk cluster: an exercise in tailored prototypingtailored prototyping refers to an emerging process for prototyping software applications, emphasizing a disciplined experimental approach in order for developers to obtain an understanding of system characteristics before committing to costly design decisions. in our approach, the design of software constituting prototype apparatus is driven by experimental hypotheses concerning risk, rather than an application's functional requirements. this paper describes the principles behind tailored prototyping, then illustrates them in concrete terms by describing their application in a pilot project. the pilot used in our illustration is a parallel i/o service | a mechanism designed to deliver pages, in parallel, from a cluster of distributed disks. the performance results show that this parallel i/o system can, in certain circumstances, deliver higher page throughput from multiple remote disks, than with a single local disk. the pilot project exemplifies our prototyping method which is applicable to a wide variety software prototyping activities. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_9437",
        "graph": {
            "node_idx": 9437,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9437,
                18645
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a tight characterization of np with 3 query pcpsit is known that there exists a pcp characterization of np where the verifier makes 3 queries and has a one-sided error that is bounded away from 1; and also that 2 queries do not suffice for such a characterization. thus pcps with 3 queries possess non-trivial verification power and motivate the task of determining the lowest error that can be achieved with a 3-query pcp. recently, h-astad [10] has shown a tight characterization of np by constructing a 3-query pcp verifier with \"error\" arbitrarily close to 1=2. unfortunately, this verifier makes two-sided error and h-astad makes essential use of this feature. one-sided error, on the other hand, is a natural notion to associate with a proof system, since it has the desirable property that every rejected proof has a short counterexample. the question of determining the smallest error for which there exists a 3-query pcp verifier making one-sided error and accepting an np-complete language, however, remained open. we resolve this question by showing that np has a 3-query pcp with a one-sided error that is arbitrarily close to 1=2. this characterization is tight, i.e., the error cannot be lower. this result is in seeming contradiction with the results of trevisan [14] and zwick [16] who show that in order to recognize an np-complete language, the error probability of a pcp verifier making 3 non-adaptive queries and having one-sided error must be at least 5=8. we get around this bottleneck by designing an adaptive 3-query pcp for np. our result yields the first tight analysis of an adaptive pcp; and reveals a previously unsuspected separation between the powers of adaptive and non-adaptive pcps. our design and analysis of adaptive pcps can be extended to higher number of queries as well and we give an example of such a proof system with 5 queries. our adaptive verifiers yield proof systems whose error probabilities match those of previous constructions, while also achieving one-sidedness in the error. this raises new questions about the power of adaptive pcps, which deserve further study. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_9463",
        "graph": {
            "node_idx": 9463,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                9463,
                3795,
                3796,
                3797,
                19575,
                12386
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using animation to design, document and trace object-oriented systemscurrent diagramming techniques for the development and documentation of object-oriented designs largely emphasize capturing relationships among classes. such techniques cannot capture full designs because the static nature of class relationships makes them inadequate for describing the dynamics of object collaboration. other techniques attempt to diagram dynamic behavior but are limited by their media to producing essentially passive description of dynamic operations. what is still needed is a technique that models message ordering, changing visibility and temporal object lifetimes in a manner that is concise and immediate. we have developed an approach in which developers use animation to develop and capture object-oriented designs. this allows developers to design object-oriented scenarios in the way that they visualize them: by animating the actions of the objects in the scenario. the same animation then acts as the documentation for the design. its playback makes immediately evident the temporal relationship of object messages, object creation, object destruction, and changing object visibility. our technique is supported as part of a suite of object-oriented development tools we call groove. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_9469",
        "graph": {
            "node_idx": 9469,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                9469,
                18666,
                19398
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: worst-case interactive communication i: two messages are almost optimal. ieee trans. information theory, [orl91] a.nos93] m. naor, a. orlitsky, and p. shor. three results on interactive communication. ieee trans. information theory, 39(5):1608-1615, septem ber 1993. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_9472",
        "graph": {
            "node_idx": 9472,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9472,
                18667
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a secure and optimally efficient multi-authority election schemein this paper we present a new multi-authority secret-ballot election scheme that guarantees privacy, universal verifiability, and robustness. it is the first scheme for which the performance is optimal in the sense that time and communication complexity is minimal both for the individual voters and the authorities. an interesting property of the scheme is that the time and communication complexity for the voter is independent of the number of authorities. a voter simply posts a single encrypted message accompanied by a compact proof that it contains a valid vote. our result is complementary to the result by cramer, franklin, schoenmakers, and yung in the sense that in their scheme the work for voters is linear in the number of authorities but can be instantiated to yield information-theoretic privacy, while in our scheme the voter's effort is independent of the number of authorities but always provides computational privacy-protection. we will also point out that the majority of proposed voting schemes provide computational privacy only (often without even considering the lack of information-theoretic privacy), and that our new scheme is by far superior to those schemes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_9498",
        "graph": {
            "node_idx": 9498,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9498,
                18689
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: adaptive simulation and control of variable structure control systems in sliding regimesconventional simulation and control methods for sliding mode control systems are limited by the available sampling bandwidth and allowable tracking error. consequently, these methods suffer from harmful chattering. this paper presents an adaptive method for the discrete-time simulation and control of sliding mode control systems, based on an analysis on the relationship between tracking error and sampling rate for these systems. our analysis shows that the tracking error decreases as the sampling time interval decreases when the sliding condition exists. the adaptive method exploits the concept of discrete-time sliding mode; the method adjusts its sampling rate to ensure that the tracking error is bounded within a boundary layer of the sliding surface. to simulate a sliding mode system in discrete time, we present an adaptive integration scheme that follows the ideal system within a given tolerance. likewise, the adaptive method can be used to generate discrete control signals for sliding mode systems. simulation results on examples have shown that the adaptive method is free of chattering. key words | variable structure control; computer simulation; adaptive methods; sliding modes; chattering-free tracking; robust control. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_9506",
        "graph": {
            "node_idx": 9506,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9506,
                18697
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: data-parallel programming on mimd computers. the mit press, 1991. data-parallel programming on mimd computers. ieee15] high performance fortran forum. high performance fortran language specification, version 1.0. technical report crpc-tr92225, center for research on parallel com putation, rice university, 1992 (revised jan. 1993). [20] c.l. seitz, j. seizovic, and w.-k. su. the c programmer's abbreviated guide to multicomputer programming. technical report cs-tr-88-01, computer science de partment, california institute of technology, january 1988. [22] j. thornley. parallel programming with declarative ada. technical report cs-tr 93-03, computer science department, california institute of technology, 1993. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_9515",
        "graph": {
            "node_idx": 9515,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9515,
                22577
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: h3: laying out large directed graphs in 3d hyperbolic spacewe present the h3 layout technique for drawing large directed graphs as node-link diagrams in 3d hyperbolic space. we can lay out much larger structures than can be handled using traditional techniques for drawing general graphs because we assume a hierarchical nature of the data. we impose a hierarchy on the graph by using domain-specific knowledge to find an appropriate spanning tree. links which are not part of the spanning tree do not influence the layout but can be selectively drawn by user request. the volume of hyperbolic 3-space increases exponentially, as opposed to the familiar geometric increase of euclidean 3-space. we exploit this exponential amount of room by computing the layout according to the hyperbolic metric. we optimize the cone tree layout algorithm for 3d hyperbolic space by placing children on a hemisphere around the cone mouth instead of on its perimeter. hyperbolic navigation affords a focus+context view of the structure with minimal visual clutter. we have successfully laid out hierarchies of over 20,000 nodes. our implementation accommodates navigation through graphs too large to be rendered interactively by allowing the user to explicitly prune or expand subtrees. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_9527",
        "graph": {
            "node_idx": 9527,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    0,
                    10,
                    11,
                    12,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                9527,
                10380,
                14486,
                14501,
                19286,
                14552,
                22364,
                22368,
                15662,
                13684,
                22370,
                22392,
                14521
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: software release managementa poorly understood and underdeveloped part of the software process is software release management, which is the process through which software is made available to and obtained by its users. complicating software release management is the increasing tendency for software to be constructed as a \"system of systems\", assembled from preexisting, independently produced, and independently released systems. both developers and users of such software are affected by these complications. developers need to accurately document complex and changing dependencies among the systems constituting the software. users will be heavily involved in the location, retrieval, and assembly process of the systems in order to appropriately configure the software to their particular environment. in this paper we identify the issues encountered in software release management, and present an initial set of requirements for a software release management tool. we then describe a prototype of such a tool that supports both developers and users in the software release management process. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_9535",
        "graph": {
            "node_idx": 9535,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    8,
                    9,
                    10,
                    4,
                    5,
                    1,
                    11,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                9535,
                18720,
                6029,
                24698,
                24785,
                9537,
                9536,
                10442,
                19392,
                13180,
                9534,
                19346
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: journal of global optimization, the linear complementarity problem as a separable bilinear programthe nonmonotone linear complementarity problem (lcp) is formulated as a bilinear program with separable constraints and an objective function that minimizes a natural error residual for the lcp. a linear-programming-based algorithm applied to the bilinear program terminates in a finite number of steps at a solution or stationary point of the problem. the bilinear algorithm solved 80 consecutive cases of the lcp formulation of the knapsack feasibility problem ranging in size between 10 and 3000, with almost constant average number of major iterations equal to four. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_9537",
        "graph": {
            "node_idx": 9537,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                9537,
                18720,
                19346,
                9534,
                10442
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: solution of general linear complementarity problems via nondifferentiable concave minimizationfinite termination, at point satisfying the minimum principle necessary optimality condition, is established for a stepless (no line search) successive linearization algorithm (sla) for minimizing a nondifferentiable concave function on a polyhedral set. the sla is then applied to the general linear complementarity problem (lcp), formulated as minimizing a piecewise-linear concave error function on the usual polyhedral feasible region defining the lcp. when the feasible region is nonempty, the concave error function always has a global minimum at a vertex, and the minimum is zero if and only if the lcp is solvable. the sla terminates at a solution or stationary point of the problem in a finite number of steps. a special case of the proposed algorithm [8] solved without failure 80 consecutive cases of the lcp formulation of the knapsack feasibilty problem, ranging in size between 10 and 3000. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_9558",
        "graph": {
            "node_idx": 9558,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    3,
                    2,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    11,
                    12,
                    17,
                    18,
                    14,
                    15,
                    8,
                    19,
                    20
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    4,
                    5,
                    6,
                    7,
                    7,
                    7,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                9558,
                19892,
                20740,
                20741,
                12352,
                12353,
                12351,
                12484,
                12494,
                11299,
                12488,
                12486,
                12493,
                12487,
                20838,
                11789,
                24914,
                12489,
                12491,
                12483,
                12485
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: libga: a user-friendly workbench for order-based genetic algorithm researchover the years there has been several packages developed that provide a workbench for genetic algorithm (ga) research. most of these packages use the generational model inspired by genesis. a few have adopted the steady-state model used in genitor. unfortunately, they have some deficiencies when working with order-based problems such as packing, routing, and scheduling. this paper describes libga, which was developed specifically for order-based problems, but which also works easily with other kinds of problems. it offers an easy to use `user-friendly' interface and allows comparisons to be made between both generational and steady-state genetic algorithms for a particular problem. it includes a variety of genetic operators for reproduction, crossover, and mutation. libga makes it easy to use these operators in new ways for particular applications or to develop and include new operators. finally, it offers the unique new feature of a dynamic generation gap. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_9567",
        "graph": {
            "node_idx": 9567,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                9567,
                11054,
                6371,
                23836,
                19867,
                7729,
                10251,
                7646,
                6370,
                3114,
                20200,
                9144,
                23763,
                23878,
                16425
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: april agent process interaction languagein this paper we introduce key features of a programming language for building dai and other types of distributed applications requiring the transmission and manipulation of complex symbolic data. the language is high-level and yet also offers a simple and smooth interface to other programming languages such as \"c\". april is oriented to the implementation of multi-agent systems. however, april is not a `multi-agent applications language'. it does not directly offer high level features such as: planners, problem solvers and knowledge representation systems that a multi-agent applications language might be expected to include. april is more an object based concurrent language with objects as processes. as argued in [10], this is a highly suitable base for extension to dai and multi-agent application platforms. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_9574",
        "graph": {
            "node_idx": 9574,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                9574,
                13998,
                11852,
                9575,
                24995,
                20356
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: adaptation of genetic algorithms for engineering design optimizationgenetic algorithms have been extensively used in different domains as a means of doing global optimization in a simple yet reliable manner. however, in some realistic engineering design optimization domains it was observed that a simple classical implementation of the ga based on binary encoding and bit mutation and crossover was sometimes inefficient and unable to reach the global optimum. using floating point representation alone does not eliminate the problem. in this paper we describe a way of augmenting the ga with new operators and strategies that take advantage of the structure and properties of such engineering design domains. empirical results (initially in the domain of conceptual design of supersonic transport aircraft and the domain of high performance supersonic missile inlet design) demonstrate that the newly formulated ga can be significantly better than the classical ga in terms of efficiency and reliability. http://www.cs.rutgers.edu/~shehata/papers.html \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_9635",
        "graph": {
            "node_idx": 9635,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                9635
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: register allocation in wampaper presents a new register allocation strategy for wam based compilation of prolog. the proposed strategy is based on the computation of optimal order of the unification of individual head arguments. the unification of head arguments is interspersed with the execution of inline calls and with the preparation of arguments for the out-of-line call. moreover, it is shown that the problem of register allocation in wam is at least np-complete in general. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_9656",
        "graph": {
            "node_idx": 9656,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                9656,
                650,
                4946,
                4947,
                17052,
                20497,
                13037
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the problem with multiple robotsresearch in multiple, robotic agents is gaining the interest of an ever increasing number of researchers. many of these researchers have previously worked in simulation or with single robots, or both. making the transition from a simulator to the real world can be very trying and frustrating to someone with no experience with such a project. the same goes for making the transition from a single robot to multiple robots. there are a number of issues that arise, mostly of the practical and pragmatic variety, that escape consideration by researchers making these transitions for the first time. we hope to highlight the most important of these issues discovered primarily through experience with working on multi-robot projects, two of which are discussed in the paper so that other researchers can give them full consideration when working on their own projects. in addition, we give some suggestions as to how to eliminate or minimize the negative impact these issues might have upon the development of a multiple robot project. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9663",
        "graph": {
            "node_idx": 9663,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    2
                ]
            ],
            "node_list": [
                9663,
                10711,
                5536,
                10712
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: development tools for the open agent architecturethe agent-based paradigm for software systems cannot realize its full potential, and will not become widespread, until adequate agent development tools and environments are available. to address this need, an exploration of the requirements for such tools and environments has been conducted in the context of the open agent architecture (oaa) project, and has resulted in the creation of the agent development toolkit (adt). the adt provides a variety of mechanisms that support the specification and implementation of individual agents, as well as cooperating communities of agents. special attention has been given to tools that enable an agent developer to construct intelligent user interfaces, which allow users to express their requests of agents using spoken and written natural language in combination with other modalities. this paper discusses a number of general requirements that were identified for agent development environments, reports on the design and functionality of the adt, and shows how the adt addresses those requirements. in addition, we describe our experience to date in constructing oaa-based agent systems, and future directions in extending the adt. fl this paper was supported by a contract from the electronics and telecommunications research institute (korea), and will be presented at the practical application of intelligent agents and multi-agent technology (paam 96), london, april 1996. the first author can be reached by email at martin@ai.sri.com. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9673",
        "graph": {
            "node_idx": 9673,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    0,
                    3,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                9673,
                18871,
                9672,
                9802
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: search in a learnable spoken language parserwe describe and experimentally evaluate a system, feaspar, that learns parsing spontaneous speech. the feaspar architecture consists of neural networks and a search. the neural networks learns the parsing task, and the search improves performance by finding the most probable and consistent feature structure. this paper focuses on the search component, and shows how the search improves overall performance considerably. n-best lists of feature structure fragments and agendas are used to speed up the search. to train and run feaspar (feature structure parser), only limited handmodeled knowledge is required. feaspar with the search component performs better than a hand modeled lr-parser in all six comparisons that are made. feaspar is trained, tested and evaluated in the time scheduling domain, and compared with the lr-parser. the handmodeling effort for feaspar is 2 weeks. the handmodeling effort for the lr-parser was 4 months. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_9677",
        "graph": {
            "node_idx": 9677,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9677,
                18802
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolving software processes by tailoring the behavior of software objectssoftware process evolution corresponds to the act of improving the existing prescriptive software process models in a controlled and supported way. as software processes change constantly, it is therefore necessary to support one or more methods for assisting environment administrators in improving models. changes are made in order to adapt software process models to new requirements, correct inconsistencies encountered in the course of execution, and modify, add or remove certain constraints. this article shows how software process evolution is supported in the tempo. tempo is a process-oriented software engineering environment where software processes are formally described in an object-oriented process schema. in tempo, a process schema is comprised of descriptions of software agents, software products and software processes. a new approach is presented which supports the dynamic evolution of software process descriptions. in this approach, software process change is the result of tailoring the behavior of software objects manipulated during software process en-action. keywords: software process evolution, process-centered software engineering environments, object with roles, object-oriented approach, event-condition-action rules, active database. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_9690",
        "graph": {
            "node_idx": 9690,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                9690,
                77,
                18852,
                8160,
                5812,
                10331,
                16442,
                8159,
                8403,
                17274,
                10637,
                4306
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mental constitutions and limited rationality (extended abstract)one attractive route to developing a theory of limited rationality is through the notion of rational control of reasoning. rational control is sometimes viewed in terms of rational allocation of limited computational resources in drawing conclusions, with ideal rationality just the infinite-resource case of resource-bounded inference. but some important sorts of limitations on rationality due to rational control of reasoning subsist independently of any limitations on resources. one of these is the notion of the agent's constitution, a set of restrictions placed on the permissible states of the agent by the agent or by its designer. while the theory of ideal rationality permits agents to have any consistent and complete set of beliefs and preferences (probabilities and utilities), agents limited by constitutions may forbid some of those sets. we motivate and formalize some elements of a theory of mental constitutions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9734",
        "graph": {
            "node_idx": 9734,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    7,
                    4,
                    5,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    4,
                    4,
                    4,
                    4,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                9734,
                4141,
                19483,
                19657,
                11481,
                24950,
                25118,
                11687,
                6688,
                5277,
                11686,
                4688,
                11682,
                4941,
                20374,
                17895,
                5278,
                22275,
                16080,
                14590,
                17533,
                17928,
                6686,
                12655
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an introduction to the aesop systemas the design of software architectures emerges as a discipline within software engineering, it becomes increasingly important to support architectural description and analysis with tools and environments. this paper provides a brief introduction to aesop, a set of tools for developing architectural design environments that exploit architectural styles to guide software architects in producing specific systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_9769",
        "graph": {
            "node_idx": 9769,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    2,
                    12,
                    13,
                    14,
                    15,
                    8,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                9769,
                4491,
                7412,
                10695,
                11574,
                20175,
                20176,
                7055,
                11485,
                20900,
                1797,
                17734,
                474,
                11564,
                11565,
                10696,
                17987
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient potential equation solutions for global illumination computationthe potential equation provides a natural mathematical basis for all the illumination computation methods based on the strategy of shooting light. the particle tracing technique which physically simulates the particle model of light, can also be considered as a general, random walk based solution to the potential equation. as the complexity of the environment increases, the straight forward particle tracing method becomes inefficient. in this paper we discuss different biasing methods that could be used to increase the efficiency of the particle tracing process. in particular we present an importance driven scheme in which we use an approximate potential value as the biasing function for directing a majority of the random walks through regions of importance in the environment, thus efficiently estimating the light flux in these regions. a straight forward simple implementation of this scheme has been carried out and the results that we have obtained show that the scheme is very promising. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_9804",
        "graph": {
            "node_idx": 9804,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                9804,
                921,
                11814,
                2076,
                4916,
                20333,
                16595,
                11641,
                2077,
                17276,
                2078,
                3010,
                19825,
                19833,
                23711
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: learning cases to compliment rules for conflict resolution in multiagent systemsgroups of agents following fixed behavioral rules can be limited in performance and efficiency. adaptability and flexibility are key components of intelligent behavior which allow agent groups to improve performance in a given domain using prior problem solving experience. we motivate the usefulness of individual learning by group members in the context of overall group behavior. we propose a framework in which individual group members learn cases to improve their model of other group members. we utilize a testbed problem from the distributed ai literature to show that simultaneous learning by group members can lead to significant improvement in group performance and efficiency over groups following static behavioral rules. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9816",
        "graph": {
            "node_idx": 9816,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    2
                ]
            ],
            "node_list": [
                9816,
                9814,
                14827
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: how to integrate precedence constraints and shared resources in real-time schedulingformal results for precedence constrained, real-time scheduling of unit time tasks are extended to arbitrary timed tasks with preemption. an exact characterisation of the edf-like schedulers that can be used to transparently enforce precedence constraints among tasks is shown. these extended results are then integrated with a well-known protocol that handles real-time scheduling of tasks with shared resources, but does not consider precedence constraints. this results in schedulability formulas for task sets which allow preemption, shared resources, and precedence constraints, and a practical algorithm for many real-time uniprocessor systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_9826",
        "graph": {
            "node_idx": 9826,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9826,
                18880
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: bayesian graphical modeling for intelligent tutoring systemsconventional intelligent tutoring systems (its) do not acknowledge uncertainty about the student's knowledge. yet, both the outcome of any teaching intervention and the exact state of the student's knowledge are uncertain. in recent years, researchers have made startling progress in the management of uncertainty in knowledge-based systems. building on these developments, we describe an its architecture that explicitly models uncertainty. this will facilitate more accurate student modeling and provide its's which can learn. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_9845",
        "graph": {
            "node_idx": 9845,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                9845
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: interior point sqp strategies for structured process optimization problemssuccessive quadratic programming (sqp) has been the method of choice for the solution of nonlinear programming problems. for the solution of large problems with sqp based codes, the combinatorial complexity associated with active set methods for the treatment of inequalities has been a bottleneck in exploiting the problem structure. in this paper, we examine the merits of incorporating an interior point method within an sqp framework and the significant computational savings are demonstrated on problems drawn from optimal control. we also provide a novel intepretation of the popularly used predictor-corrector interior point method using the principles of reduced hessian sqp (rsqp). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_9861",
        "graph": {
            "node_idx": 9861,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                9861,
                18899,
                12000,
                9750,
                9748,
                11999,
                13920,
                9752,
                2548,
                13888,
                11066
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: integrating, customizing, and extending environments with a message-based architecturemessage-based architectures have typically been used for integrating an engineer's set of tools as in field and softbench. this paper presents our experience using a message-based architecture to integrate complex, multi-user environments. where this style of control integration has been effective for encapsulating independent tools within an environment, we show that these techniques are also useful for integrating environments themselves. our experience comes from our integration of two types of process-centered software development environments: a groupware application that implements a fagan-style code inspection process and a software development process environment where code inspection is a single step in the overall process. we use a message-based mechanism to federate the two process engines such that the two process formalisms complement rather than compete with each other. moreover, we see that the two process engines can provide some synergy when used in a single, integrated software process environment, specifically, the integrated environment uses the process modeling and enactment services of one process engine to customize and extend the code inspection process implemented in a different process engine. the customization and extension of the original collaborative application was accomplished without modifying the application. this was possible because the integration mechanism was designed for multi-user, distributed evironments and encouraged the use of an environment's services by other environments. the results of our study indicate that the message-based architecture originally conceived for tool-oriented control integration is equally well-suited for environment integration. 1 the work reported in this paper was done while popovich was at bull hn information systems inc. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_9903",
        "graph": {
            "node_idx": 9903,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                9903,
                10716,
                3578,
                14344
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: implementation and performance of midartin this paper, we describe our experience in the implementation of midart middleware and network architecture for distributed real-time systems. our midart project addresses the problem of middleware design to support high speed network based distributed real-time applications. the uniqueness of midart lies in the simplicity of services provided and the flexibility of data reflection models, compared with more general purpose but much more complicated middle-ware such as corba implementations. this simplicity leads to ease of understanding and ease of use by application builders, while its flexiblity sufficiently serves the needs of the class of real-time applications midart is designed for. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_9911",
        "graph": {
            "node_idx": 9911,
            "edge_index": [
                [
                    0,
                    1
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                9911,
                24724
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: representation requirements for supporting decision model formulationthis paper outlines a methodology for analyzing the representational support for knowledge-based decision-modeling in a broad domain. a relevant set of inference patterns and knowledge types are identified. by comparing the analysis results to existing representations, some insights are gained into a design approach for integrating categorical and uncertain knowledge in a context sensitive manner. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_9923",
        "graph": {
            "node_idx": 9923,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                9923,
                10528,
                19405
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evaluating competing agent strategies for a voice email agentthis paper reports experimental results comparing a mixed-initiative to a system-initiative dialog strategy in the context of a personal voice email agent. to independentlytest the effects of dialog strategy and user expertise, users interact with either the system-initiative or the mixed-initiative agent to perform three successive tasks which are identical for both agents. we report performance comparisons across agent strategies as well as over tasks. this evaluation utilizes and tests the paradise evaluation framework, and discusses the performance function derivable from the experimental data. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_9925",
        "graph": {
            "node_idx": 9925,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9925
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an implementation of a combinatorial approximation algorithm for minimum-cost multicommodity flowmulticommodity flow problems can be expressed as linear programs, and most theoretical and practical algorithms use linear-programming algorithms specialized for the problems' structures. combinatorial approximation algorithms in [11, 16, 24] yield flows with costs slightly larger than the minimum cost and use capacities slightly larger than the given capacities. theoretically, the running times of these algorithms are much less than that of linear-programming-based algorithms. we combine and modify the theoretical ideas in these approximation algorithms to yield a fast, practical implementation solving the minimum-cost multicommodity flow problem. experimentally, the algorithm solved our problem instances (to 1% accuracy) two to three orders of magnitude faster than the linear-programming package cplex [6] and the linear programming based multicommodity flow program pprn [5]. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_9935",
        "graph": {
            "node_idx": 9935,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                9935,
                18944
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: abstract probabilistic decision making in games and cryptographic protocolsin an attempt to circumvent the obvious barriers of deterministic computation, computer scientists added randomization to their traditional models. probabilistic algorithms, numerous cryptographic protocols and various complexity theoretic results sprang out of this innovation. in this work, we initiate a rigorous and systematic study of probabilistic functions and computations with emphasis on the properties that are most relevant to games and cryptographic protocols. in the theory of pseudorandom number generators, probabilistic encryption and zero-knowledge, the notion of indistinguishability between two probabilistic functions plays a central role. extending the standard notions of perfect, statistical and computational indistinguishability, we define judge indistinguishability parametrized by the judges (distinguishers), the number of independent samples with which they are presented and the tolerance on their distinguishing error. we compare different judge indistinguishabilities against statistical as well as against each other. we show that recursively presentable classes of judges have limited distinguishing power. for every such class, there exist \"pseudorandom\" probabilistic functions of arbitrarily small (but growing) support that cannot be distinguished from the \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_9939",
        "graph": {
            "node_idx": 9939,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                9939,
                2938,
                16700,
                9012
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: temporal protection in real-time operating systemsreal-time systems manipulate data types with inherent timing constraints. priority-based scheduling is a popular approach to build hard real-time systems, when the timing requirements, supported run-time configurations, and task sets are known a priori. future real-time systems would need to support these hard real-time constraints but in addition (a) provide friendly user-interfaces with audio and video data types (b) be able to communicate with more global networks and systems on demand, and (c) support critical command and control services despite potential risks introduced by such added flexibility and dynamics. in this paper, we argue that temporal protection mechanisms can be as beneficial in these systems as virtual memory protection. the processor reservation mechanism that we have implemented in real-time mach, for example, provides guaranteed timing behavior for critical activities. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_9955",
        "graph": {
            "node_idx": 9955,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                9955,
                18962,
                5704,
                17245,
                8345,
                8098,
                4749,
                10728
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: detecting the erosion of hierarchic information structuresin this paper the problem of detecting erosion in hierarchical information structures is studied. this problem manifests itself particularly in environments where there is little or no possibility to guarantee structures in accordance with a specification and furthermore where there is a high frequency of mutation of structures. the notion of information structure is formalized in terms of so called structural expressions. the erosion of information structures is paralleled by increased optionality in the associated structural expressions. in order to detect erosion the choice normal form for structural expressions is introduced. in this normal form all implicit optionality is made explicit. it is shown how arbitrary structural expressions can be brought into the normal form via transformations which are semantic preserving. a graphical formalism is presented whereby analysis of erosion is made more convenient. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_9964",
        "graph": {
            "node_idx": 9964,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                9964,
                4940,
                2903,
                17051,
                5868,
                7203,
                17707,
                17607,
                19503,
                2204,
                19722,
                8716,
                5091,
                17795
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: error-correcting output coding corrects bias and varianceprevious research has shown that a technique called error-correcting output coding (ecoc) can dramatically improve the classification accuracy of supervised learning algorithms that learn to classify data points into one of k 2 classes. this paper presents an investigation of why the ecoc technique works, particularly when employed with decision-tree learning algorithms. it shows that the ecoc method| like any form of voting or committee|can reduce the variance of the learning algorithm. furthermore|unlike methods that simply combine multiple runs of the same learning algorithm|ecoc can correct for errors caused by the bias of the learning algorithm. experiments show that this bias correction ability relies on the non-local be havior of c4.5. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_9992",
        "graph": {
            "node_idx": 9992,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    1,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                9992,
                18987,
                8567,
                10126,
                20564,
                8568
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a framework for interactive texturing on curved surfacesexisting techniques for texturing curved surfaces are either only applicable for a limited subset of surface representations (3d painting of parametric patches or dense polygonal meshes for example), or do not lend themselves naturally to interactive texture editing (e.g. procedural and solid textures). although such methods have been used to produce stunning effects, there is a lack of flexible and general purpose tools, such as those provided by 2d image processing applications. this work argues that interactive texturing could benefit from a more cohesive paradigm built around a kernel of powerful and general operations. using an analogy to the evolution of 2d painting algorithms, the paper motivates a framework for interactive texturing operations on curved surfaces and describes an approach for translating, rotating, and warping regions of texture (patchinos) on a surface. these ideas have been implemented for parametric and implicit surfaces. as an interesting side effect, this more unified framework also opens the door to a number of new interactive 3d texturing techniques that have no natural counterparts in two dimensions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_10037",
        "graph": {
            "node_idx": 10037,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    2,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                10037,
                3093,
                11865,
                11856,
                7070,
                3523,
                17391,
                17915,
                3094,
                7623,
                19777,
                20361,
                16087
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: task-decomposition via plan parsingin this paper we present a bottom-up plan parsing approach to task-decomposition. instead of reducing tasks into actions, we use an incremental parsing algorithm to recognize which partial primitive plans match the schemata. in essence, our approach exploits the observation that schemata are a convenient means for reducing search. we compile the schemata into a declarative search control language (like that used in machine learning research), which rejects plan refinements that cannot be parsed. we demonstrate that neither parsing nor reduction dominates the other on efficiency grounds and provide preliminary empirical results comparing the two. we note that our parsing approach allows convenient comparison (and combination) of different search control technologies, generates minimal plans, and handles expressive languages (e.g., universal quantification and conditional effects) with ease. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_10039",
        "graph": {
            "node_idx": 10039,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10039,
                19024
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a problem with long-term computing processes, and what can be done about itwe make here the observation that due to the evolutionary nature of large systems, a long-term process that runs for month or years is generally not driven by any single program, but rather by an unpredictable sequence of programs, (p (1); :::; p (k)), resulting in a serious loss of predictability of the process itself. the main point of this paper is that under lga such a sequence of programs can be made into a \"single organism,\" with certain invariant properties established by the law of the software development project. to demonstrate the feasibility and usefulness of such evolutionary invariants under lga, we discuss in this paper the design of a law-governed evolving financial system in which certain important policies of \"internal control\" (such as separation of duties between the base system and its auditors) are established as invariants by formu - lating them as the law of the system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_10056",
        "graph": {
            "node_idx": 10056,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10056,
                19035
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: machine learning by function decompositionwe present a new machine learning method that, given a set of training examples, induces a definition of the target concept in terms of a hierarchy of intermediate concepts and their definitions. this effectively decomposes the problem into smaller, less complex problems. the method is inspired by the boolean function decomposition approach to the design of digital circuits. to cope with high time complexity of finding an optimal decomposition, we propose a suboptimal heuristic algorithm. the method, implemented in program hint (hierarchy induction tool), is experimentally evaluated using a set of artificial and real-world learning problems. it is shown that the method performs well both in terms of classification accuracy and discovery of meaningful concept hierarchies. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_10062",
        "graph": {
            "node_idx": 10062,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                10062,
                19043,
                17053
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: high level control of implicit surfaces for character animationimplicit surfaces, also known as blobby molecules [2], metaballs [14] or soft objects [22], are particularly suitable for modelling smoothly blended, plasticine objects. one of their most attractive features is their deformability. the shape of an object can be altered by simply moving the skeletal elements. a closed, smoothly blended surface is always guaranteed although the topology of an object may change. in this paper we will look closer at the use of implicit surfaces for character animation. we use a layered model to represent characters. a graph defines an articulated figure. the limbs which cover the articulated figure are designed by a user and form the body of a character. the body is covered by esh which can be automatically generated by the system (skin) or partially designed by a user (strands of esh: hair, a tail etc.). we use a mixture of manual and automatic motion control. keyframes for the articulated figure are specified using dance notation and the motion of esh is automatically generated by the system. a user can control the motion of esh at a high level using a set of adjustable parameters (gravity, esh firmness and exaggeration). we illustrate our approach using a dancer performing to the given choreography. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_10082",
        "graph": {
            "node_idx": 10082,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10082,
                19056
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: explanation-based learning of indirect speech act interpretation rulestechnical report - 89 - 11 10 may 1989 abstract we describe an approach to deriving efficient rules for interpreting the intended meaning of indirect speech acts. we have constructed a system called sally that starts with a few, very general principles for understanding the intention of the speaker of an utterance. after inferring the intended meaning of a particular utterance, sally creates a specialized rule to understand directly similar utterances in the future. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_10085",
        "graph": {
            "node_idx": 10085,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10085,
                19058
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: formal methods: a practical tool for os implementorsthe formal methods community has long known about the need to formally analyze concurrent software, but the os community has been slow to adopt such methods. the foremost reasons for this are the cultural and knowledge gaps between formalists and os hackers, fostered by three beliefs: inaccessibility of the tools, the disabling gap between the validated model and actual implementation, and the intractable size of operating systems. in this paper, we show these beliefs to be untrue for appropriately structured operating systems. we applied formal methods to verify properties of the implementation of the fluke microkernel's ipc subsystem, a major component of the kernel. in particular, we have verified, in many scenarios, certain liveness properties and lack of deadlock, with results that apply to both smp and uniprocessor environments. the spin model checker provided an exhaustive concurrency analysis of the ipc subsystem, unattainable through traditional os testing methods. spin is easily accessible to programmers inexperienced with formal methods. we present our results as a starting point for a more comprehensive inclusion of formal methods in practical os development. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_10104",
        "graph": {
            "node_idx": 10104,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    0,
                    8,
                    9
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                10104,
                8442,
                9471,
                18106,
                12746,
                23322,
                6638,
                18667,
                20575,
                21903
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: securing threshold cryptosystems against chosen ciphertext attackfor the most compelling applications of threshold cryptosystems, security against chosen ciphertext attack seems to be a requirement. however, there appear to be no practical threshold cryptosystems in the literature that are provably chosen-ciphertext secure, even in the idealized random hash function model. the contribution of this paper is to present two very practical threshold cryptosystems, and to prove that they are secure against chosen ciphertext attack in the random hash function model. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_10127",
        "graph": {
            "node_idx": 10127,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10127,
                19102
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: latency-constrained resynchronization for multiprocessor dsp implementation applied extensively for digital signal processing systems.resynchronization is a post-optimization for static multiprocessor schedules in which extraneous synchronization operations are introduced in such a way that the number of original synchronizations that consequently become redundant significant exceeds the number of additional synchronizations. redundant synchronizations are synchronization operations whose corresponding sequencing requirements are enforced completely by other synchronizations in the system. the amount of run-time overhead required for synchronization can be reduced significantly by eliminating redundant synchronizations [3, 19]. thus, effective resynchronization reduces the net synchronization overhead in the implementation of a multiprocessor schedule, and thus improves the overall throughput. however, since additional serialization is imposed by the new synchronizations, resyn-chronization can produce significant increase in latency. this paper addresses the problem of computing an optimal resynchronization (one that results in the lowest average rate at which synchronization operations have to be performed) among all resynchronizations that do not increase the latency beyond a prespecified upper bound . our study is based in the context of self this research was partially funded as part of the ptolemy project, which is supported by the advanced research projects agency and the u.s. air force (under the rassp program, contract f33615-93-c-1317), the semiconductor research corporation (project 94-dc-008), the national science foundation (mip-9201605), the state of california micro program, and the following companies: bellcore, bell northern research, dolby laboratories, hitachi, lg electronics, mentor graphics, mitsubishi, motorola, nec, pacific bell, philips, and rockwell. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_10141",
        "graph": {
            "node_idx": 10141,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10141
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using formal specification to resolve conflicts between contracting agentsin this paper, we use formal specification techniques to provide precompiled and provably correct domain-specific knowledge to autonomous agents. this allows for verifying agent interactions in the environment. in particular, we show that negotiating agents can resolve mutually incompatible local preferences and settle for an acceptable compromise by reasoning with formally specified default and exception behaviors. we use swarm, a formal specification language, to characterize the preference of negotiating agents that are using a variation of the contract-net protocol. the framework is illustrated on an example from the service interaction problem in telecommunications systems. the combination of formal specification and negotiating agents is a multi-paradigm approach that we believe will provide comprehensive solutions to a variety of multi-agent coordination problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_10160",
        "graph": {
            "node_idx": 10160,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                10160,
                19117,
                21954
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reducing the cost of security in link-state routingsecurity in link state routing protocols is a feature that is both desirable and costly. this paper examines the cost of security and presents two techniques for efficient and secure processing of link state updates. the first technique is geared towards a relatively stable in-ternetwork environment while the second is designed with a more volatile environment in mind. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_10201",
        "graph": {
            "node_idx": 10201,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10201,
                746,
                23860,
                7827,
                16477,
                10202,
                18090,
                8064,
                7828,
                19349,
                17825,
                6996,
                23881
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improving regressors using boosting techniquesin the regression context, boosting and bagging are techniques to build a committee of regressors that may be superior to a single regressor. we use regression trees as fundamental building blocks in bagging committee machines and boosting committee machines. performance is analyzed on three non-linear functions and the boston housing database. in all cases, boosting is at least equivalent, and in most cases better than bagging in terms of prediction error. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_10206",
        "graph": {
            "node_idx": 10206,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    5,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                10206,
                19150,
                22513,
                22936,
                22941,
                22942,
                15191,
                22946
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an end-to-end qos model and management architecturea quality-of-service (qos) management framework for a complex distributed real-time system must be able to accommodate different dimensions and measures of quality, affect qos tradeoffs across applications, and monitor and maintain the overall quality of the service produced by them as a whole. this paper describes a qos model and an end-to-end qos management architecture designed to meet these objectives. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_10210",
        "graph": {
            "node_idx": 10210,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10210,
                19154
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: asymmetric fingerprinting (extended abstract)fingerprinting schemes deter people from illegal copying of digital data by enabling the merchant of the data to identify the original buyer of a copy that was redistributed illegally. all known fingerprinting schemes are symmetric in the following sense: both the buyer and the merchant know the fingerprinted copy. thus, when the merchant finds this copy somewhere, there is no proof that it was the buyer who put it there, and not the merchant. we introduce asymmetric fingerprinting, where only the buyer knows the fingerprinted copy, and the merchant, upon finding it somewhere, can find out and prove to third parties whose copy it was. we present a detailed definition of this concept and constructions. the first construction is based on a quite general symmetric fingerprinting scheme and general cryptographic primitives; it is provably secure if all these underlying schemes are. we also present more specific and more efficient constructions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_10218",
        "graph": {
            "node_idx": 10218,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    2,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                10218,
                9872,
                14931,
                9873,
                24054,
                19770,
                20905,
                23251,
                20137,
                20564,
                13658,
                21723,
                22580
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: representation and visualization of terrain surfaces at variable resolutionwe present a new approach for managing the multiresolution representation of discrete topographic surfaces. a triangulated irregular network (tin) representing the surface is built from sampled data by iteratively refining an initial triangulation that covers the whole domain. the refinement process generates triangulations of the domain corresponding to increasingly finer approximations of the surface. such triangulations are embedded into a structure in a three dimensional space. the resulting representation scheme encodes all intermediate representations that were generated during refinement. we propose a data structure and traversal algorithms that are oriented to the efficient extraction of approximated terrain models with an arbitrary precision, either constant or variable over the domain. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_10229",
        "graph": {
            "node_idx": 10229,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    11,
                    12,
                    13,
                    14,
                    7,
                    8,
                    4,
                    5,
                    15,
                    6,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    5,
                    5,
                    6,
                    7
                ]
            ],
            "node_list": [
                10229,
                4002,
                13437,
                13719,
                21703,
                13721,
                15885,
                16204,
                24004,
                421,
                2627,
                13361,
                8092,
                21704,
                14852,
                15962,
                23859
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: experience with efficient array data flow analysis for array privatizationarray data flow analysis is known to be crucial to the success of array privatization, one of the most important techniques for program parallelization. it is clear that array data flow analysis should be performed interprocedurally and symbolically, and that it often needs to handle the predicates represented by if conditions. unfortunately, such a powerful program analysis can be extremely time-consuming if not carefully designed. how to enhance the efficiency of this analysis to a practical level remains an issue largely untouched to date. this paper documents our experience with building a highly efficient array data flow analyzer which is based on guarded array regions and which runs faster, by one or two orders of magnitude, than other similarly powerful tools. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_10252",
        "graph": {
            "node_idx": 10252,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                10252
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: solutions to affine generalized equations using proximal mappingsthe normal map has proven to be a powerful tool for solving generalized equations of the form: find z 2 c, with 0 2 f (z) + n c (z), where c is a convex set and n c (z) is the normal cone to c at z. in this paper, we use the t -map, a generalization of the normal map, to solve equations of the more general form: find z 2 dom(t ), with 0 2 f (z) + t (z), where t is a maximal monotone multifunction. we present a path-following algorithm that determines zeros of coherently oriented piecewise-affine functions, and we use this algorithm, together with the t -map, to solve the generalized equation for affine, coherently oriented functions f , and polyhedral multifunctions t . \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_10260",
        "graph": {
            "node_idx": 10260,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10260
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: role of memory and concepts in learningthis paper appeared in 1992 in minds and machines, 2 : 239-265. abstract. the extent to which concepts, memory, and planning are necessary to the simulation of intelligent behavior is a fundamental philosophical issue in artificial intelligence. an active and productive segment of the ai community has taken the position that multiple low-level agents, properly organized, can account for high-level behavior. empirical research on these questions with fully operational systems has been restricted to mobile robots that do simple tasks. this paper recounts experiments with hoyle, a system in a cerebral, rather than a physical, domain. the program learns to perform well and quickly, often outpacing its human creators at two-person, perfect information board games. hoyle demonstrates that a surprising amount of intelligent behavior can be treated as if it were situation-determined, that often planning is unnecessary, and that the memory required to support this learning is minimal. concepts, however, are crucial to this reactive programs ability to learn and perform. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_10264",
        "graph": {
            "node_idx": 10264,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10264
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic simulation of the mastication musclesthe purpose of a simulated operation system in craniofacial surgery is to evaluate and visualize the results of operations on the overall facial shape of the patient and on the functionality of his jaw. this paper presents the analyzation of muscle movements in the mastication system by applying real jaw movements to the simulation. with this method an accurate modeling of the mastication muscles can be performed which is a prerequisite for a realistic simulation and precise intra-operative registration. according to this results a large-scale musculoskeletal model of the mastication system is generated including kinematic and dynamic parameters. by integrating distance sensors in the simulation of a segmented ct (computer tomograph) image of the maxilla and mandible the motions of the masticatory muscles during different kinds of jaw movements have been analyzed. the data for this motions have been recorded by a commercial system (condylocomp lr3) on a test person and transformed to the graphical simulation system. this method for the first time allows to observe the dynamics of the mastication muscles and their different parameters like muscle length ratio and velocity. the integration of a kinematic model for the jaw movement makes it possible to analyze non traced movements. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_10283",
        "graph": {
            "node_idx": 10283,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    1,
                    4,
                    5,
                    6,
                    7,
                    8,
                    2,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                10283,
                10284,
                5501,
                20233,
                17194,
                17309,
                19603,
                5502,
                19655,
                24887,
                10282,
                5870,
                1510
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: single factor analysis by mml estimationthe minimum message length (mml) technique is applied to the problem of estimating the parameters of a multivariate gaussian model in which the correlation structure is modelled by a single common factor. implicit estimator equations are derived and compared with those obtained from a maximum likelihood (ml) analysis. unlike ml, the mml estimators remain consistent when used to estimate both the factor loadings and factor scores. tests on simulated data show the mml estimates to be on av erage more accurate than the ml estimates when the former exist. if the data show little evidence for a factor, the mml estimate collapses. it is shown that the condition for the existence of an mml estimate is essentially that the log likelihood ratio in favour of the factor model exceed the value expected under the null (no-factor) hypotheses. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_10292",
        "graph": {
            "node_idx": 10292,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                10292,
                19198
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: compiling constraint solving using projectionlinear equality and inequality constraints arise naturally in specifying many aspects of user interfaces, such as requiring that one window be to the left of another, requiring that a pane occupy the leftmost 1/3 of a window, or preferring that an object be contained within a rectangle if possible. for interactive use, we need to solve similar constraint satisfaction problems repeatedly for each screen refresh, with each successive problem differing from the previous one only in the position of an input device and the previous state of the system. we present an algorithm for solving such systems of constraints using projection. the solution is compiled into very efficient, constraint-free code, which is parameterized by the new inputs. producing straight-line, constraint-free code of this sort is important in a number of applications: for example, to provide predictable performance in real-time systems, to allow companies to ship products without including a runtime constraint solver, to compile java applets that can be downloaded and run remotely (again without having to include a runtime solver), or for applications where runtime efficiency is particularly important. even for less time-critical user interface applications, the smooth performance of the resulting code is more pleasing than that of code produced using other current tech niques. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_10293",
        "graph": {
            "node_idx": 10293,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10293
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an analysis of representation shift in concept learningin spite of the importance of representation in learning, little progress has been made toward understanding what makes representations work. this paper describes a framework for knowledge-level analysis of changes in the representation of training examples in concept learning. this a very fundamental sort of representation change; such a change alters the very space over which learning occurs, and hence necessitates selection of a new hypothesis space and (probably) a new learning algorithm. the goals of this paper are first, to provide a framework for analysis of representation shifts; second, to make explicit the assumptions implicit in representation shifts that have actually been used in learning systems; and third, to suggest a procedure for finding the most appropriate representation shift, given some background knowledge about a learning problem. the analytic framework is used to analyze a class of hybrid ebl/sbl systems by characterizing the sorts of domain theories that can be used with these systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_10301",
        "graph": {
            "node_idx": 10301,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    3
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10301,
                8425,
                2857,
                446
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a continuation-passing style for prologwe propose a translation of prolog (including cut, if-then-else and similar constructs) into a first-order continuation-passing style, where (almost) all predicates have one clause and all clauses are binary. the resulting programs can be used as a flexible intermediate representation for compilation with a number of advantages as compared to warren's abstract machine and other proposals. we discuss the advantages and disadvantages of this approach. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_10322",
        "graph": {
            "node_idx": 10322,
            "edge_index": [
                [
                    1,
                    0
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                10322,
                2323
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: gamma: architecture, programming interface and preliminary benchmarkingtechnical report disi-tr-96-22, november 1996 http://www.disi.unige.it/ abstract the cost of high-performance parallel platforms prevents parallel processing techniques from spreading in present applications. networks of workstations (now) exploiting off-the-shelf communication hardware, high-end pcs and standard communication software provide much cheaper but poorly performing parallel platforms. indeed standard network protocols and mechanisms cannot deliver a satisfactory amount of the communication performances of the raw hardware to applications. the gamma (genoa active message machine) prototype is an attempt to overcome such a limitation by adopting a minimal communication protocol and the active message communication paradigm. the virtualization of the network interface provided by gamma is close enough to the raw hardware to guarantee good performance, while still providing a usable programming interface. this paper illustrates the software architecture of the communication layer of gamma. two main optimizations are discussed and their remarkable impact on communication latency and throughput is shown. a comparison of communication performance with other parallel platforms is presented, with particular enphasis on other prototypes of nows. the application programming interface is described in detail. a preliminary benchmarking was carried out on a working prototype of gamma. the comparison with the results achieved by the same benchmarks run on the same hardware platform but with socket tcp/ip communications demonstrate the success of the \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_10328",
        "graph": {
            "node_idx": 10328,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                10328,
                8281,
                4943
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reasoning about message integritywe propose an approach for reasoning about message integrity protection in cryptographic protocols. the set of axioms presented herein relate design parameters and assumptions of message integrity protection mechanisms to generic message integrity threats. comparison of threat properties derived using these axioms with the policy goals for integrity protection aids in assessing the strength (or lack thereof) of message integrity protection mechanisms. we provide examples to illustrate the use of our approach in examining the weaknesses of message integrity protection mechanisms, and also in suggesting modifications in their design parameters. cryptographic protocols, and in particular, authentication protocols, rely on message integrity protection. however, mechanisms for protecting message integrity have been shown to be error-prone ([3], [4], [14], [18], [20]). past studies of message integrity have focused primarily on finding attack scenarios in message integrity protection mechanisms, suggesting solutions to eliminate vulnerabilities, and proposing new algorithms for message integrity protection [2], [3], [4], [5], [14], [15], [18], [21]. recently, an operational model for message integrity, and a general method for designing message integrity protection mechanisms was also proposed [21]. however, to date, analysis of message integrity protection mechanisms has been done in an ad-hoc manner. a method which considers the types of threats that the environment is exposed to and analyzes protection mechanisms to determine whether they achieve their goals 3 has not been proposed. an analysis method that relates design attributes and assumptions of message integrity protection mechanisms to message integrity goals is useful in (1) analyzing extant protection mechanisms for their threat resistance properties, (2) designing new protection mechanisms, and (3) to help gain insight into properties of message integrity protection mechanisms. in this paper, we propose a set of axioms which model the threats to message integrity in a given environment. these axioms relate the design parameters and assumptions of message integrity protection mechanisms to generic message integrity threats. comparison of threat properties derived \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_10350",
        "graph": {
            "node_idx": 10350,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                10350,
                22,
                12244,
                2965,
                7622,
                3283,
                11149,
                8251,
                2663,
                11683,
                884,
                17678,
                21111,
                6371,
                16299
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on algorithms for simple stochastic gameswe survey a number of algorithms for the simple stochastic game problem, which is to determine the winning probability of a type of stochastic process, where the transitions are partially controlled by two players. we show that four natural approaches to solving the problem are incorrect, and present two new algorithms for the problem. the first reduces the problem to that of finding a locally optimal solution to a (non-convex) quadratic program with linear constraints. the second extends a technique of shapley called the successive approximation technique, by using linear programming to maximize the improvement at each approximation step. finally, we analyze a randomized variant of the hoffman-karp strategy improvement algorithm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_10362",
        "graph": {
            "node_idx": 10362,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10362
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a new pruning method for solving decision trees and game treesthe main goal of this paper is to describe a new pruning method for solving decision trees and game trees. the pruning method for decision trees suggests a slight variant of decision trees that we call scenario trees. in scenario trees, we do not need a conditional probability for each edge emanating from a chance node. instead, we require a joint probability for each path from the root node to a leaf node. we compare the pruning method to the traditional rollback method for decision trees and game trees. for problems that require bayesian revision of probabilities, a scenario tree representation with the pruning method is more efficient than a decision tree representation with the rollback method. for game trees, the pruning method is more efficient than the rollback method. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_10400",
        "graph": {
            "node_idx": 10400,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                10400,
                19302,
                19992
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: malicious omissions and errors in answers to membership querieswe consider two issues in polynomial-time exact learning of concepts using membership and equivalence queries: (1) errors or omissions in answers to membership queries, and (2) learning finite variants of concepts drawn from a learnable class. to study (1), we introduce two new kinds of membership queries: limited membership queries and malicious membership queries. each is allowed to give incorrect responses on a maliciously chosen set of strings in the domain. instead of answering correctly about a string, a limited membership query may give a special \"i don't know\" answer, while a malicious membership query may give the wrong answer. the table-size of the set of strings that receive such incorrect answers is bounded by a new parameter l. equivalence queries are answered correctly, and learning algorithms are allowed time polynomial in the usual parameters and l. any class of concepts learnable in polynomial time z partially supported by nsf grant ccr-9208170, esprit bra ilp, project 6020, and otka t014228. dept. of math., stat., and comp. sci., 851 s. morgan st. rm 322, university of illinois at chicago, chicago, il 60607, automata theory research group hungarian academy of sciences, szeged. e-mail: u11557@uicvm.uic.edu \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_10410",
        "graph": {
            "node_idx": 10410,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10410,
                19308
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: magellan: an integrated adaptive architecture for mobile roboticsin this paper we describe magellan, an integrated architecture for mobile robotics. the system represents its spatial knowledge in terms of a topological network that connects a set of distinct places, each represented by evidence grids that contain probabilistic descriptions of occupancy. magellan includes a module for place recognition that determines its initial location and when it has reached a goal, a module for continuous localization that maintains accurate estimates of the robot's position, and a module for navigation that generates path plans and executes them using reactive behaviors. experiments in two laboratories with different characteristics suggest that the system can operate robustly across a range of environments, including ones that involve dynamic changes. this work was funded by the office of naval research under grant no. n00014-94-1-0505. we thank hans moravec for sharing his software, and we thank nils nilsson and barbara hayes-roth for providing access to their nomad mobile robot. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_10422",
        "graph": {
            "node_idx": 10422,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                10422,
                19320,
                23755,
                23756
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: real-time reliable multicast using proactive forward error correctionreal-time reliable multicast over a best-effort service network remains a challenging research problem. most protocols for reliable multicast use repair techniques that result in significant and variable delay, which can lead to missed deadlines in real-time scenarios. this paper presents a repair technique that combines forward error correction (fec) with automatic repeat request (arq). the novel aspect of the technique is its ability to reduce delay in reliable multicast delivery by sending repairs proactively (i.e., before they are required). the technique requires minimal state at senders and receivers, and no additional active router functionality beyond what is required by the current multicast service model. furthermore, the technique uses only end-to-end mechanisms, where all data and repairs are transmitted by the data-originating source, leaving receivers free from any burden of sending repairs. we simulate a simple round-based version of a protocol embodying this technique to show its effectiveness in preventing repair request implosion, reducing the expected time of reliable delivery of data, and keeping bandwidth usage for repairs low. we show how a protocol using the technique can be adapted to provide delivery that is reliable before a real-time deadline with probabilities extremely close to one. finally, we develop several variations of the protocol that use the technique in various fashions for high rate data streaming applications, and present results from additional simulations that examine performance in a variety of internet-like heterogeneous networks. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_10423",
        "graph": {
            "node_idx": 10423,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                10423,
                19320,
                23130,
                23755,
                23756
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: simulation of fec-based error control for packet audio on the internetreal-time audio over a best-effort network, such as the internet, frequently suffers from packet loss. to mitigate the impact of such packet loss, several research efforts [1, 2] and implementation studies [3] advocate the use of forward error correction (fec) coding. although these prior works have pioneered promising and novel applications of fec to internet audio, they do not definitively demonstrate the advantages of fec because they do not evaluate aggregate performance that results from multiplexing many like flows. for example, [1] assesses the efficacy of fec by generalizing the performance of a single audio connection; [3] restricts its design space to one particular coding scheme and does not evaluate the potentially negative impact of increased network load that results from fec; and [2] limits its scope to an all-audio source network employing a simplistic fec-encoding. in this paper, we build on these landmark works with a systematic study of fec for packet audio that characterizes the aggregate performance across all audio sources in the network. we refine the novel but ad hoc coding techniques proposed in [3] into a formal framework that we call signal processing-based fec (sfec) and use our framework to more rigorously evaluate the relative merits of this approach. through extensive simulation, we evaluate the scalability of sfec for packet audio i.e., the ability for a coding algorithm to improve aggregate performance when used by all sources in the network and find that optimal signal quality is achieved when sources react to network congestion not by blindly adding fec, but rather by adding fec in a controlled fashion that simultaneously constrains the source-coding rate. as a result, packet loss is mitigated without introducing more congestion, thus admitting a more scalable and effective approach than successively adding redundancy to a constant bit-rate source. while this result may seem intuitive, it has not been previously suggested in the context of internet audio, and until now, has not been systematically studied. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_10439",
        "graph": {
            "node_idx": 10439,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    4,
                    7,
                    5,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                10439,
                11804,
                11980,
                11963,
                25052,
                5967,
                25030,
                20453,
                11951,
                10441,
                11968,
                7293,
                4803,
                11971,
                11970,
                20458,
                8059
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 10 evolving recusive programs for tree searchthis article compares basic genetic programming, genetic programming with automatically defined functions (adfs), and genetic programming with adfs using a restricted form of recursion on a planning problem involving tree search. the results show that evolution of a recursive program is possible and further that, of the three techniques explored, genetic programming with recursive adfs performs the best for the tree search problem. additionally, genetic programming using adfs (recursive and non-recursive) outperforms genetic programming without adfs. the scalability of these techniques is also investigated. the computational effort required to reach a solution using adfs with recursion is shown to remain essentially constant with world size, while genetic programming with non-recursive adfs scales linearly at best, and basic genetic programming scales exponentially. finally, many solutions were found using genetic programming with recursive adfs which generalized to any world size. iterative structures are an essential component in programming. iteration and recursion lead to more compact programs and, in many cases, facilitate generalization. since genetic programming is a genetic algorithm which evolves programs, iterative and recursive capability is desirable. additionally, the ability to create simpler programs means that an evolved solution may take less computational effort to find. the evolution of iteration and recursion using genetic programming was first explo red by koza[1992]. to allow the evolution of iterative solutions to the block stacking problem, koza introduced the do until (du) operator. the du operator takes two arguments: the first specifies the work to be iteratively executed, and the second specifies a predicate which when satisfied will end the iteration. to prevent infinite loops, an upper limit on the number of iterations is externally imposed. variations of this form of restricted iteration have proven useful in several problem domains including protein sequencing and optical character recognition [koza 1994], [andre 1994a], [chapter 8]. koza[1992] also investigates a very limited form of recursion for sequence induction. programs capable of producing the fibonacci sequence are achieved by allowing the s-expression to reference previously computed values in the sequence. although much work has been done in the synthesis of recursive functional programs using other machine learning methods (see [banerjee 1987], [hutchinson 1994]), little has been done to explore the evolution of recursion using genetic programming (see [nordin 1995]). this article investigates a method for evolving recursive programs for tree search. many techniques used in ai systems, including those for game-playing and planning, depend on an agent's ability to search tree structures [nilsson 1971], but are not optimal. these systems are thus prime candidates for genetic programming. similar to restricted \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_10492",
        "graph": {
            "node_idx": 10492,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                10492,
                14355,
                22284
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast transformation of temporal plans for efficient executiontemporal plans permit significant flexibility in specifying the occurrence time of events. plan execution can make good use of that flexibility. however, the advantage of execution flexibility is counterbalanced by the cost during execution of propagating the time of occurrence of events throughout the flexible plan. to minimize execution latency, this propagation needs to be very efficient. previous work showed that every temporal plan can be reformulated as a dispatchable plan, i.e., one for which propagation to immediate neighbors is sufficient. a simple algorithm was given that finds a dispatchable plan with a minimum number of edges in cubic time and quadratic space. in this paper, we focus on the efficiency of the reformulation process, and improve on that result. a new algorithm is presented that uses linear space and has time complexity equivalent to johnson's algorithm for all-pairs shortest-path problems. experimental evidence confirms the practical effectiveness of the new algorithm. for example, on a large commercial application, the performance is improved by at least two orders of magnitude. we further show that the dispatch-able plan, already minimal in the total number of edges, can also be made minimal in the maximum number of edges incoming or outgoing at any node. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_10496",
        "graph": {
            "node_idx": 10496,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10496,
                3915,
                21681,
                7571,
                15330,
                17470
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an end-to-end approach to schedule tasks with shared resources in multiprocessor systemsin this paper we propose an end-to-end approach to scheduling tasks that share resources in a multiprocessor or distributed systems. in our approach, each task is mapped into a chain of subtasks, depending on its resource accesses. after each subtask is assigned a proper priority, its worst-case response time can be bounded. consequently the worst-case response time of each task can be obtained and the schedulability of each task can be verified by comparing the worst-case response time with its relative deadline. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_10504",
        "graph": {
            "node_idx": 10504,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    2,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                10504,
                19390,
                584,
                17279,
                16882,
                19369,
                17748,
                20628,
                9143,
                11211,
                12774,
                3766
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fixed-priority scheduling of periodic tasks on multiprocessor systemsconsider the problem of periodic task scheduling, in which we seek to minimize the total number of processors required to execute a set of tasks such that task deadlines are guaranteed by the rate-monotonic (or rm) algorithm on each processor. this problem was first investigated by dhall and liu, and the previous lowest bound for the problem was 2.0. in this paper, an improved solution is given by designing a new algorithm for it. the algorithm, called rm-first-fit-decreasing-utilization (or rm-ffdu), is shown to have a worst-case tight bound of 5=3 = 1:66 : : :, the lowest upper bound ever derived for the scheduling problem. simulation studies show that on the average, the new algorithm performs consistently better than those in the literature. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_10510",
        "graph": {
            "node_idx": 10510,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10510,
                19396
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improving speech understanding through integration of prosody and syntaxas automatic speech recognition technology improves and as it is applied to more difficult tasks, the need to integrate with syntactic, semantic, pragmatic and knowledge-based system components will increase. this paper covers the development of models which relate prosodic phrasing to syntactic structure. these models are useful for understanding the linguistic aspects of the prosody-syntax relationship and have potential for improving the performance of speech recognition systems. there are three important results from these models. firstly, the use of a link grammar provides an effective syntactic framework for predicting prosody that is simpler and more accurate than conventional constituent analysis. secondly, with the use of the link grammar framework, the left syntactic context is important for predicting prosodic structure while the right context is not significant. thirdly, the models lead to a novel extension to the n-gram stochastic language model mechanism which incorporates prosodic constraints in a way that can be directly integrated with hmm-based speech recognition. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_10514",
        "graph": {
            "node_idx": 10514,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10514,
                19398
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: statistical secrecy and multi-bit commitmentsbrics report series rs-96-45 issn 0909-0878 november 1996 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_10524",
        "graph": {
            "node_idx": 10524,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    0,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10524,
                4776,
                4774,
                3220,
                25032,
                5673,
                3526,
                7956,
                22467,
                11463
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: performance visualization: 2-d, 3-d, and beyondduring the past ten years, performance data visualization techniques have evolved from static, two-dimensional graphics to dynamic graphics and im-mersive virtual environments. we sketch the domain of applicability for each visualization technique using analysis of input/output behavior and www traffic as example problem domains. with this background, we describe experiences with virtual environment representations of complex performance data and the potential for immersive interaction with complex software. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_10528",
        "graph": {
            "node_idx": 10528,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10528,
                19405
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: what can i say?: evaluating a spoken language interface to emailthis paper presents experimental results comparing two different designs for a spoken language interface to email. we compare a mixed-initiative dialogue style, in which users can flexibly control the dialogue, to a system-initiative dialogue style, in which the system controls the dialogue. our results show that even though the mixed-initiative system is more efficient, as measured by number of turns, or elapsed time to complete a set of email tasks, users prefer the system-initiative interface. we posit that these preferences arise from the fact that the system initiative interface is easier to learn and more predictable. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_10530",
        "graph": {
            "node_idx": 10530,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10530,
                215,
                217,
                5607,
                17438,
                1890,
                17941,
                11530,
                20588,
                8283,
                21399
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a polynomial-time approximation scheme for weighted planar graph tspgiven a planar graph on n nodes with costs (weights) on its edges, define the distance between nodes i and j as the length of the shortest path between i and j. consider this as an instance of metric tsp. for any \" &gt; 0, our algorithm finds a salesman tour of total cost at most (1 + \") times optimal in time n o(1=\" 2 ) . we also present a quasi-polynomial time algorithm for the steiner version of this problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_10532",
        "graph": {
            "node_idx": 10532,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10532,
                215,
                20621,
                11244,
                22888,
                22890,
                217,
                8283,
                2386,
                13377,
                5608,
                1890,
                18645,
                5925,
                18984,
                13224
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: better approximation bounds for the network and euclidean steiner tree problemsthe network and euclidean steiner tree problems require a shortest tree spanning a given vertex subset within a network g = (v; e; d) and euclidean plane, respectively. for these problems, we present a series of heuristics finding approximate steiner tree with performance guarantee coming arbitrary close to 1+ln 2 1:693 and 1+ln 2 p \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_10534",
        "graph": {
            "node_idx": 10534,
            "edge_index": [
                [
                    1,
                    2,
                    0
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                10534,
                7145,
                1156
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: safety and capacity analysis of automated and manual highway systemsthis paper compares safety of automated and manual highway systems with respect to resulting rear-end collision frequency and severity. the results show that automated driving is safer than the most alert manual drivers, at similar speeds and capacities. we also present a detailed safety-capacity tradeoff study for four different automated highway system concepts that differ in their information structure and separation policy. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_10535",
        "graph": {
            "node_idx": 10535,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10535,
                19407
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: ports: experiences with a scheduler for dynamic real-time systems (extended abstract)this paper describes several of our experiences with a real-time scheduler. using a robot control application program, we motivate the importance of supporting multiple schedulers within the same application program. we demonstrate the utility of speculative task execution in dynamic real-time systems, and describe the implementation of a scheduler for performing speculative execution and recovery. we show that existing real-time scheduler interfaces have scope for improvement, especially when scheduling latency must be low and when multiple schedulers used by a single application must co-exist on a single processor. a new scheduler interface is specified and its basic costs are evaluated experimentally. preliminary measurements on a ksr-1 machine are quoted. the measurements demonstrate how the execution times of temporal queries may be reduced by use of access structures to scheduler data structures. finally, there are several overheads associated with speculative execution, and multiple schedulers in a single application. we consider the problem of on-line reconfiguration of the several overheads associated with the speculative-execution paradigm for optimal performance in the face of these overheads. initial performance measurements of the ports scheduler indicate that it is possible to perform real-time scheduling with latencies approximating those of proposed specialized scheduling co-processors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_10536",
        "graph": {
            "node_idx": 10536,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8,
                    9,
                    10,
                    3,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                10536,
                19409,
                1230,
                1029,
                1231,
                6872,
                18986,
                1233,
                22113,
                23121,
                15422,
                15424,
                8994,
                20875,
                15286
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a maximum entropy approach to pairwise data clusteringpartitioning a set of data points which are characterized by their mutual dissimilarities instead of an explicit coordinate representation is a difficult, np-hard combinatorial optimization problem. we formulate this optimization problem of a pairwise clustering cost function in the maximum entropy framework using a variational principle to derive corresponding data partitionings in a d-dimensional eu-clidian space. this approximation solves the embedding problem and the grouping of these data into clusters simultaneously and in a selfconsistent fashion. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_10545",
        "graph": {
            "node_idx": 10545,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                10545
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: robust distant-talking speech recognitionmost contemporary speech recognizers are designed to operate with close-talking speech and they work best in a quiet laboratory condition. there is an apparent need to render environment robustness to these systems. the objective of the paper is to explore utility of existing speech recognition technology in adverse \"real-world\" environments for distant-talking applications. a synergistic system consisting of microphone array and neural network (mann) is utilized to mitigate environmental interference introduced by reverberation, ambient noise, and channel mismatch between training and testing conditions. the mann system is evaluated with experiments on continuous distant-talking speech recognition. the results show that the mann system elevates the word recognition accuracy to a level which is competitive with a retrained speech recognizer and that the neural network compensation performs better than some previously researched techniques. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_10576",
        "graph": {
            "node_idx": 10576,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    2,
                    3,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                10576,
                19437,
                10972,
                22352
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an approach to automatic language identification based on language-dependent phone recognition for spoken language understandingan approach to language identification (lid) based on language-dependent phone recognition is presented in this paper. a variety of features and their combinations extracted by language-dependent recognizers were evaluated based on the same database. two novel information sources for lid were introduced: (1) forward and backward bigram based language models, and (2) context-dependent duration models. an lid system using hidden markov models and neural network was developed. the system was trained and evaluated using the ogi ts database. for a six-language task, the system performance(correct rate) for 45-second long utterances and 10-second long utterances reached 91.96% and 81.08% respectively. the experiments demonstrated the importance of detailed modeling and the method by which these information sources are combined. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_10577",
        "graph": {
            "node_idx": 10577,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10577,
                24751
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an object-oriented implementation model for the promoter languagethe promoter programming language is designated for data parallel appli cations that are to run on massively parallel computers with distributed memory. this paper presents an object-oriented implementation model for the promoter language. an object oriented approach to compile data-parallel programs to message passing programs can reduce design complexity, facilitate reuse of components, and ease specialization of code, result in an efficient and portable implementation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_10588",
        "graph": {
            "node_idx": 10588,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10588
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: logical formalization of concurrent actions for multi-agent systemsthis paper presents a logical approach to formalization of some aspects of multi-agent systems in an incompletely known world. the contribution on this regard is as follows. we formalized reasoning about concurrent actions inside the situation calculus framework which has the sufficiently clear and well-understood semantics to express different aspects of agent theory. conclusions can be drawn by default about results of a group of concurrent actions which may include unknown or unspecified actions. the approach allows to examine all models corresponding both to different assumptions about possible failures in performing of one or another action, and to assumptions whether a particular action was executed really. this provides an opportunity to predict the consequence of joint activity of agents operating in complex environment and to explain apparently unexpected changes. these results are achieved by choosing a suitable circumscription policy. the approach provides a general and formal framework for design and verification of wide class of agent-oriented systems such as telecommunication systems, network management, and evolving distributed data bases. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_10607",
        "graph": {
            "node_idx": 10607,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                10607,
                10069,
                5251,
                19046,
                15193,
                8582,
                20225
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: adaptive user models for intelligent information filteringas networked systems grow in size, the amount of data available to users has increased dramatically. the result is an information overload for the user. in this project, an intelligent information filtering system reduced the user's search burden by automatically eliminating incoming data predicted to be irrelevant. these predictions are learned by adapting an internal user model which is based upon user interactions. this report describes the information filtering problem and examines three techniques for filtering information: global hill climbing, genetic algorithms, and preliminary work with neural networks using radial basis functions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_10610",
        "graph": {
            "node_idx": 10610,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10610,
                19460
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast equipartitioning of rectangular domains using stripe decompositionthis paper presents a fast algorithm that provides optimal or near optimal solutions to the minimum perimeter problem on a rectangular grid. the minimum perimeter problem is to partition a grid of size m n into p equal area regions while minimizing the total perimeter of the regions. the approach taken here is to divide the grid into stripes that can be filled completely with an integer number of regions . this striping method gives rise to a knapsack integer program that can be efficiently solved by existing codes. the solution of the knapsack problem is then used to generate the grid region assignments. an implementation of the algorithm partitioned a 1000 1000 grid into 1000 regions to a provably optimal solution in less than one second. with sufficient memory to hold the m n grid array, extremely large minimum perimeter problems can be solved easily. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_10618",
        "graph": {
            "node_idx": 10618,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10618,
                19468
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an automatic verification technique for communicating real-time state machineswe describe an automatic verification technique for distributed real-time systems that are specified as communicating real-time state machines (crsms). crsms are timed state machines that communicate synchronously over uni-directional channels. the proposed approach is to model the behavior of the system of (an expressive subclass of) crsms by a timed reachability graph. the system behavior of crsms is characterized by a time-stamped trace of communication events. we provide a decision procedure for verifying timing and safety properties (specified in a notation based on real-time logic) of the reachability graph, and hence of the corresponding system of crsms. we also present a condition for the existence of deadlock in a system of crsms. finally, we briefly describe an implementation of a verifier program based on the above algorithms. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_10637",
        "graph": {
            "node_idx": 10637,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    2,
                    16,
                    17,
                    18,
                    6,
                    2,
                    6,
                    19,
                    20,
                    21,
                    2,
                    22
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                10637,
                10638,
                6335,
                12784,
                20748,
                20749,
                12974,
                12361,
                3011,
                9922,
                12820,
                1640,
                12967,
                12827,
                21026,
                12824,
                21200,
                21125,
                24044,
                23508,
                12831,
                3010,
                21848
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reasoning about other agents: philosophy, theory, and implementation.drawing on on our work in the area of distributed artificial intelligence, we propose the rudiments of a view of multiagent reasoning that relates current philosophical intuitions, theoretical foundations, and preliminary implementation. the philosophical position we take is a combination of daniel dennett's philosophy of the ladder of per-sonhood (consisting of rationality, intentionality, stance, reciprocity, communication, and consciousness) on one hand, and the utilitarian philosophy of selfish utility maximization on the other hand. the theories we incorporate are logics of knowledge and belief, which in addressing the multiagent issues can be developed based on a recursive version of the kripke structure, and the related fields of utility, decision and game theories. our preliminary implementation, the recursive modeling method (rmm), lets an agent coordinate its actions with the actions of other agents, cooperate with them when appropriate, and rationally choose an optimal form of communication with them. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_10641",
        "graph": {
            "node_idx": 10641,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    10
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10641,
                1860,
                3026,
                9852,
                17115,
                10109,
                11037,
                11118,
                9802,
                516,
                19780
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: incorporating pos tagging into language modelinglanguage models for speech recognition tend to concentrate solely on recognizing the words that were spoken. in this paper, we redetne the speech recognition problem so that its goal is to tnd both the best sequence of words and their syntactic role (partofspeech) in the utterance. this is a necessary trst step towards tightening the interaction between speech recognition and natural language understanding. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_10681",
        "graph": {
            "node_idx": 10681,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                10681,
                4524,
                21937,
                16980
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a personal view of average-case complexitythe structural theory of average-case complexity, introduced by levin , gives a formal setting for discussing the types of inputs for which a problem is difficult. this is vital to understanding both when a seemingly difficult (e.g. n p -complete) problem is actually easy on almost all instances, and to determining which problems might be suitable for applications requiring hard problems, such as cryptography. this paper attempts to summarize the state of knowledge in this area, including some \"folklore\" results that have not explicitly appeared in print. we also try to standardize and unify definitions. finally, we indicate what we feel are interesting research directions. we hope that this paper will motivate more research in this area and provide an introduction to the area for people new to it. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_10683",
        "graph": {
            "node_idx": 10683,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10683,
                19524
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: applying constraint satisfaction technique in university timetable schedulingplanning and scheduling are often np-complete problems. there have been different approaches to tackle these problems. with the emergence of constraint logic programming, the constraint satisfaction approach has started to attract attention due to its effectness in solving these real-life problems. in this paper, we report our experience of applying constraint logic programming to fully automate the time table scheduling process in our faculty, which has been a tedious task for the administration. the system consists of a core for scheduling as well as an x-window user interface. implemented in chip, the system consists of 1500 lines of codes, 80% of which are an x-window user interface. the system is able to produce a time table for the whole faculty in just a few seconds. our experience shows that applying constraint logic programming is a practical viable means for time table scheduling in a university. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_10701",
        "graph": {
            "node_idx": 10701,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    4,
                    5,
                    6,
                    1,
                    2,
                    3,
                    7,
                    5,
                    8,
                    9,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                10701,
                15567,
                6445,
                3465,
                23255,
                6864,
                1128,
                16771,
                24355,
                24425
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: typed homomorphic relations extended with subtypesthis paper will appear in the proceedings of mathematical foundations of programming semantics '91, to be published by springer-verlag, in the lecture notes in computer science series. 1991 cr categories: d.3.1 [programming languages] formal definitions and theory | semantics; d.3.2 [programming languages] language classifications | applicative languages, nondeterministic languages, object-oriented languages; d.3.3 [programming languages] language constructs | abstract data types; f.3.2 [logics and meanings of programs] semantics of programming languages | algebraic approaches to semantics, denotational semantics; f.3.3 [logics and meanings of programs] studies of program constructs | type structure; f.4.1 [mathematical logic and formal languages] mathematical logic | lambda calculus and related systems. c fl 1991 springer-verlag \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_10711",
        "graph": {
            "node_idx": 10711,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                10711,
                5536,
                10712
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: information brokering in an agent architecture ability to obtain information from a wide variety ofto date, document identification based on keyword matching strategies has been the basis of most efforts to provide assistance in accessing information resources on the internet. however, in view of the limitations on human browsing time and the evolution of more capable software agents, we can expect rapid expansion in the use of fully queryable information sources (such as databases and knowledge bases) and semiqueryable sources (such as form-based query pages on the world wide web, and collections of web pages that are structured by textual markups). this paper describes a working prototype information broker system, developed within the open agent architecture framework, that provides transparent access to a variety of information sources, each encapsulated as an independent agent. in this system, a broker meta-agent provides flexible mediation services, accepting queries expressed in broker or source schemas, gathering and integrating all available responses from the relevant sources, and allowing for the addition or deletion, at runtime, of participating information sources. other broker features support the use of conversions, normalizations, and other basic domain knowledge in queries, and persistent queries (for which the broker notifies requestors of changes in information sources that could affect their results). source agents implement caching and retrieval strategies that alleviate problems related to the long access times and unreliability of internet sources. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_10718",
        "graph": {
            "node_idx": 10718,
            "edge_index": [
                [
                    1,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                10718,
                9246,
                19284
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a safety kernel architecturesoftware plays a crucial role in a large number of safety-critical systems. in spite of this, many safety-critical systems exhibit residual software errors even after extensive implementation and verification efforts. we describe a software architecture based on a safety kernel that facilitates the implementation and verification of safety-critical software. drawing many concepts from the related notion of a security kernel, the safety kernel enforces safety policies independent of application programs and permits verification of properties of a small kernel rather than large amounts of application software. safety-critical software is typically custom-built for each application. this leads to consistently high development costs and limited reuse of either designs or software modules. we believe that the safety kernel architecture provides a framework for identification of generally applicable classes of safety policies. the paper examines several classes of kernel-enforced policies. the policies have been identified using criteria that consider the criticality of a policy and the effects of kernel enforcement on the simplicity and verifiability of both the application software and the safety kernel. these general policies are parameterized to enable configuration of an instance of the safety kernel. a mechanical translator is utilized to instantiate the safety kernel from the parameter information. the concepts and design of the safety kernel architecture have been significantly inuenced by our research into the development of dependable software for an experimental neurosurgical device. for example, having worked with this real system, we recognized that in general the safety kernel would need to coexist with a large amount of potentially unreliable software. as a result, we describe a system architecture wherein the safety kernel operates in the context of application and system software that is unreliable or at least of unknown properties. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_10735",
        "graph": {
            "node_idx": 10735,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    3
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10735,
                9237,
                10940,
                11814
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using real-valued genetic algorithms to evolve rule sets for classificationin this paper, we use a genetic algorithm to evolve a set of classification rules with real-valued attributes. we show how real-valued attribute ranges can be encoded with real-valued genes and present a new uniform method for representing don't cares in the rules. we view supervised classification as an optimization problem, and evolve rule sets that maximize the number of correct classifications of input instances. we use a variant of the pitt approach to genetic-based machine learning system with a novel conflict resolution mechanism between competing rules within the same rule set. experimental results demonstrate the effectiveness of our proposed approach on a benchmark wine classifier system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_10739",
        "graph": {
            "node_idx": 10739,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    3
                ]
            ],
            "node_list": [
                10739,
                19578,
                20014,
                14851,
                22646
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: atm and fast ethernet network interfaces for user-level communicationfast ethernet and atm are two attractive network technologies for interconnecting workstation clusters for parallel and distributed computing. this paper compares network interfaces with and without programmable coprocessors for the two types of networks using the u-net communication architecture to provide low-latency and high-bandwidth communication. u-net provides protected, user-level access to the network interface and offers application-level round-trip latencies as low as 60msec over fast ethernet and 90msec over atm. the design of the network interface and the underlying network fabric have a large bearing on the u-net design and performance. network interfaces with programmable coprocessors can transfer data directly to and from user space while others require aid from the operating system kernel. the paper provides detailed performance analysis of u-net for fast ethernet and atm, including application-level performance on a set of split-c parallel benchmarks. these results show that high-performance computing is possible on a network of pcs connected via fast ethernet. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_10745",
        "graph": {
            "node_idx": 10745,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                10745,
                19582
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the power of equivalence queriesin 1990, angluin showed that no class exhibiting a combinatorial property called \"approximate fingerprints\" can be identified exactly using polynomially many equivalence queries (of polynomial size). here we show that this is a necessary condition: every class without approximate fingerprints has an identification strategy that makes a polynomial number of equivalence queries. furthermore, if the class is \"honest\" in a technical sense, the computational power required by the strategy is within the polynomial-time hierarchy, so proving non learnability is at least as hard as showing p 6= np. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_10746",
        "graph": {
            "node_idx": 10746,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10746,
                8546,
                12265,
                9880
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: efficient network authentication protocols: lower bounds and optimal implementationsresearch in authentication protocols has focused largely on developing and analyzing protocols that are secure against certain types of attacks. there is little and only scattered discussion on protocol efficiency. this paper presents results on the lower bounds on the numbers of messages, rounds, and encryptions required for network authentication. for each proven lower bound, an authentication protocol achieving the bound is also given, thus proving that the bound is a tight bound if the given optimal protocol is secure. moreover, we give impossibility results of obtaining protocols that are simultaneously optimal with respect to the numbers of messages and rounds. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_10748",
        "graph": {
            "node_idx": 10748,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10748,
                2213,
                4990,
                19103,
                17855
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: relating relational learning algorithmsrelational learning algorithms are of special interest to members of the machine learning community; they offer practical methods for extending the representations used in algorithms that solve supervised learning tasks. five approaches are currently being explored to address issues involved with using relational representations. this paper surveys algorithms embodying these approaches, summarizes their empirical evaluations, highlights their commonalities, and suggests potential directions for future research. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_10789",
        "graph": {
            "node_idx": 10789,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                10789,
                19633,
                21477,
                22038
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: protecting mobile agents against malicious hostsa key element of any mobile code based distributed system are the security mechanisms available to protect (a) the host against potentially hostile actions of a code fragment under execution and (b) the mobile code against tampering attempts by the executing host. many techniques for the first problem (a) have been developed. the second problem (b) seems to be much harder: it is the general belief that computation privacy for mobile code cannot be provided without tamper resistant hardware. furthermore it is doubted that an agent can keep a secret (e.g., a secret key to generate digital signatures). there is an error in reasoning in the arguments supporting these beliefs which we are going to point out. in this paper we describe software-only approaches for providing computation privacy for mobile code in the important case that the mobile code fragment computes an algebraic circuit (a polynomial). we further describe an approach how a mobile agent can digitally sign his output securely. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_10794",
        "graph": {
            "node_idx": 10794,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10794,
                6205,
                2628,
                2910,
                542,
                1168,
                8524,
                541,
                2574
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evaluating parallel languages for molecular dynamics computationscomputational molecular dynamics is an important application requiring large amounts of computing time. parallel processing offers very high performance potential, but irregular problems like molecular dynamics have proven difficult to map onto parallel machines. in this paper, we describe the practicalities of porting a basic molecular dynamics computation to a distributed-memory machine. in the process, we show how program annotations can aid in parallelizing a moderately complex code. we also argue that algorithm replacement may be necessary in parallelization, a task which cannot be performed automatically. we close with some results from a parallel gromos implementation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_10818",
        "graph": {
            "node_idx": 10818,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                10818,
                19651,
                11911,
                22643,
                20418
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: scaling up goal recognitiontraditionally, plan and goal recognition has investigated examples in which the number of plans and goals is less than one hundred. in this paper, we address three challenges to scaling up goal recognition. first, hand coding the plan library is a tedious if not impractical method of generating massive libraries. second, previous representations for plan libraries are exponentially large in the number of goal predicates. third, existing algorithms consider each candidate goal which is prohibitively slow. our solution to the first problem is to automatically construct plan libraries with biases which are explicit assumptions about the type of plans and goals people have. our solution to the second problem is to represent the consistent goals with a compact, version space representation. our solution to the third problem is a goal recognition algorithm that can quickly update this compact representation given an observed action. experimentally, in both software and kitchen domains, we show our prototype implementation to be fast on libraries containing thousands of goals. analytically, we identify a class of goals for which our algorithm is logarithmic in the number of goals. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_10831",
        "graph": {
            "node_idx": 10831,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                10831,
                9909,
                21733,
                22535,
                18919
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on constructing a molecular computerit has recently been suggested that under some circumstances computers based on molecular interactions may be a viable alternative to computers based on electronics. here, some practical aspects of constructing a molecular computer are considered. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_10839",
        "graph": {
            "node_idx": 10839,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    3,
                    11
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                10839,
                15172,
                3307,
                10840,
                17919,
                18045,
                1672,
                5404,
                20929,
                11724,
                22908,
                15323
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: mistake-driven learning in text categorizationlearning problems in the text processing domain often map the text to a space whose dimensions are the measured features of the text, e.g., its words. three characteristic properties of this domain are (a) very high dimensionality, (b) both the learned concepts and the instances reside very sparsely in the feature space, and (c) a high variation in the number of active features in an instance. in this work we study three mistake-driven learning algorithms for a typical task of this nature - text categorization. we argue that these algorithms which categorize documents by learning a linear separator in the feature space have a few properties that make them ideal for this domain. we then show that a quantum leap in performance is achieved when we further modify the algorithms to better address some of the specific characteristics of the domain. in particular, we demonstrate (1) how variation in document length can be tolerated by either normalizing feature weights or by using negative weights, (2) the positive effect of applying a threshold range in training, (3) alternatives in considering feature frequency, and (4) the benefits of discarding features while training. overall, we present an algorithm, a variation of littlestone's winnow, which performs significantly better than any other algorithm tested on this task using a similar feature set. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_10856",
        "graph": {
            "node_idx": 10856,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                10856,
                2551,
                1958,
                932,
                2195,
                930,
                179,
                18609,
                14399,
                4282,
                23093
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: p++: a language for software system generatorsp++ is a programming language that supports the genvoca model, a particular style of software design that is intended for building software system generators. p++ is an enhanced version of c++: it offers linguistic extensions for component encapsulation, abstraction, parameterization, and inheritance, where a component is a suite of interrelated classes and functions. this paper describes the motivations for p++, the ideas which underlie its design, the syntax and features of the language, and related areas of research. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_10873",
        "graph": {
            "node_idx": 10873,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                10873,
                16815,
                7412,
                2896,
                17734,
                11581,
                11485
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: applications of irradiance tensors to the simulation of non-lambertian phenomenawe present new techniques for computing illumination from non-diffuse luminaires and scattering from non-diffuse surfaces. the methods are based on new closed-form expressions derived using a generalization of irradiance known as irradiance tensors. the elements of these tensors are angular moments, weighted integrals of the radiation field that are useful in simulating a variety of non-diffuse phenomena. applications include the computation of irradiance due to directionally-varying area light sources, reflections from glossy surfaces, and transmission through glossy surfaces. the principles apply to any emission, reflection, or transmission distribution expressed as a polynomial over the unit sphere. we derive expressions for a simple but versatile subclass of these functions, called axial moments, and present complete algorithms their exact evaluation in polyhedral environments. the algorithms are demonstrated by simulating phong-like emission and scattering effects. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_10937",
        "graph": {
            "node_idx": 10937,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                10937,
                14802,
                11826,
                16369
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: towards a theory of elaboration tolerance: logic programming approachthis paper is an attempt at mathematical investigation of software development process in the context of declarative logic programming. we introduce notions of specification and specification constructor which are developed from natural language description of a problem. generalizations of logic programs, called lp-functions are introduced to represent these specifications. we argue that the process of constructing lp-function representing a specification s should be supported by certain types of mathematical results which we call representation the orems. we present two such theorems to illustrate the idea. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_11008",
        "graph": {
            "node_idx": 11008,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                11008,
                6969,
                17608,
                19554
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: effective redundant constraints for online schedulingthe use of heuristics as a means to improve constraint solver performance has been researched widely. however, most work has been on problem-independent heuristics (e.g., variable and value ordering), and has focused on offline problems (e.g., one-shot constraint satisfaction). in this paper, we present an online scheduling problem for which we are developing a real-time scheduling algorithm. while we can and do use generic heuristics in the scheduler, here we focus on the use of domain-specific redundant constraints to effectively approximate optimal offline solutions. we present a taxonomy of redundant domain constraints, and examine their impact on the effectiveness of the scheduler. we also describe several techniques for generating redundant constraints, which can be applied to a large class of job shop scheduling problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11031",
        "graph": {
            "node_idx": 11031,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                11031,
                1271,
                9490,
                8965,
                19372
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: lexical tree based pruning for segment-based speech recognition 1the goal of a fast match for continuous speech recognition is to efficiently reduce the set of possible words which may start at any point in time. in order to save computation, the fast match must use less computation than the complete search, and in order to not reduce accuracy, the fast match must not prune away words which would have been correctly recognized by the complete search. the segmental approach employed in the mit summit speech recognition system allows the use of a fairly simple and efficient fast match for large vocabulary continuous speech recognition. in the summit system, a segmental network is computed before the lexical search is performed. this network represents possible phonetic interpretations of the speech signal, and contains a vector of probabilities for all possible phones for each segment. the fact that this network is precomputed allows the use of an efficient lookahead to determine the possible words which may begin at any node in the network. during training the phones are collapsed into a smaller set of phone classes and the pronunciations of the words in the lexicon are represented as a tree in terms of these phone classes. this tree is pruned to a depth of n for a lookahead of n phones. during recognition, to find the words which may begin at any node in the segment network, the lexical tree is matched against the phonetic network to find all nodes for which the phone class probabilities exceed some threshold. since the phone class lexical tree has many less nodes than the total number of pronunciation arcs in the full lexicon, this search can proceed very quickly. this paper will present the algorithm in more detail, discuss methods to select the phone classes, and explore the tradeoffs between length of the lookahead, phone class pruning threshold, computational savings, and accuracy. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_11040",
        "graph": {
            "node_idx": 11040,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11040,
                19855
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: where does the good stuff go, and why? how contextual semantics influences program structure inusing deliberately designed primitive sets, we investigate the relationship between context-based expression mechanisms and the size, height and density of genetic program trees during the evolutionary process. we show that contextual semantics influence the composition, location and flows of operative code in a program. in detail we analyze these dynamics and discuss the impact of our findings on micro-level descriptions of genetic programming. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11043",
        "graph": {
            "node_idx": 11043,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    4,
                    2,
                    3,
                    5,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                11043,
                19855,
                11955,
                11954,
                9310,
                11976,
                4980,
                20464
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: neural programming and an internal reinforcement policyan important reason for the continued popularity of artificial neural networks (anns) in the machine learning community is that the gradient-descent backpropagation procedure gives anns a locally optimal change procedure and, in addition, a framework for understanding the ann learning performance. genetic programming (gp) is also a successful evolutionary learning technique that provides powerful parameterized primitive constructs. unlike anns, though, gp does not have such a principled procedure for changing parts of the learned system based on its current performance. this paper introduces neural programming, a connectionist representation for evolving programs that maintains the benefits of gp. the connectionist model of neural programming allows for a regression credit-blame procedure in an evolutionary learning system. we describe a general method for an informed feedback mechanism for neural programming, internal reinforcement. we introduce an internal reinforcement procedure and demon strate its use through an illustrative experiment. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11064",
        "graph": {
            "node_idx": 11064,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                11064,
                14823,
                22628
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a note on conjugate gradient convergencethe one-dimensional discrete poisson equation on a uniform grid with n points produces a linear system of equations with a symmetric, positive-definite coefficient matrix. hence, the conjugate gradient method can be used, and standard analysis gives an upper bound of o(n) on the number of iterations required for convergence. this paper introduces a systematically defined set of solutions dependent on a parameter fi, and for several values of fi, presents exact analytic expressions for the number of steps k(fi; t; n) needed to achieve accuracy t. the asymptotic behavior of these expressions has the form o(n ff ) as n ! 1 and o(t fl ) as t ! 0. in particular, two choices of fi corresponding to nonsmooth solutions give ff = 0, i.e., iteration counts independent of n; this is in contrast to the standard bounds. the standard asymptotic convergence behavior, ff = 1, is seen for a relatively smooth solution. numerical examples illustrate and supplement the analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_11075",
        "graph": {
            "node_idx": 11075,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11075,
                19889
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: x y -pic reference manual build around a kernel drawing language which is a concisethis manual summarises the capabilities of the x y -pic package for typesetting graphs and diagrams in t e x. z the \"/3fi\" in the version is meant to indicate that this is a fi-test version of x y -pic version 3 currently under development by the authors, thus this manual contains a few `bug' and `to do' paragraphs describing facilities not yet fully implemented. ? :@/_.5pc/ _y \"y\" , we will not describe the combination of features in this manual: refer to the user's guide [14] for a tutorial on how diagrams like the above can be typeset. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_11079",
        "graph": {
            "node_idx": 11079,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                11079,
                19894,
                21913,
                3011,
                3010,
                6335,
                21848
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: event tracking in a dynamic multi-agent environmentin a dynamic, multi-agent environment, an automated intelligent agent is often faced with the possibility that other agents may instigate events that hinder or help the achievement of its own goals. to act intelligently in such an environment, an automated agent needs an event tracking capability to continually monitor the occurrence of such events and the temporal relationships among them. this capability enables an agent to infer the occurrence of important unobserved events as well as to obtain a better understanding of the interaction among events. this paper focuses on event tracking in one complex and dynamic multi-agent environment: the air-combat simulation environment. it analyzes the challenges that an automated pilot agent must face when tracking events in this environment. this analysis reveals three new issues that have not been addressed in previous work in this area: (i) tracking events generated by agents' flexible and reactive behaviors, (ii) tracking events in the context of continuous agent interactions, and (iii) tracking events in real-time. the paper proposes one solution to address these issues. one key idea in this solution is that the (architectural) mechanisms that an agent employs in generating its own flexible and reactive behaviors can be used to track other agents' flexible and reactive behaviors in real-time. a second key idea is the use of a world-centered representation for modeling agent interactions. the solution is demonstrated using an implementation of an automated pilot agent. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_11100",
        "graph": {
            "node_idx": 11100,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11100,
                19924
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: calibration of a parallel robot using multiple kinematic closed loopsa method is presented for autonomous kinematic calibration of a 3-dof redundant parallel robot. multiple closed loops are used in a least squares optimization method. ill-conditioning, column scaling of the gradient matrix, and observability indices for the best pose set of robot calibration configurations are discussed. experimental results are presented and compared with the results using an external calibration device. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_11112",
        "graph": {
            "node_idx": 11112,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                11112,
                24885,
                22282
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: rationale-based monitoring for planning in dynamic environmentswe describe a framework for planning in dynamic environments. a central question is how to focus the sensing performed by such a system, so that it responds appropriately to relevant changes, but does not attempt to monitor all the changes that could possibly occur in the world. to achieve the required balance, we introduce rationale-based monitors, which represent the features of the world state that are included in the plan rationale, i.e., the reasons for the planning decisions so far made. rationale-based monitors capture information both about the plan currently under development and the alternative choices that were found but not pursued. we discuss the plan transformations that may result from the firing of a rationale- based monitor, for example when an alternative choice is detected. we have implemented the generation of and response to rationale-based monitoring within the prodigy planner, and we describe experiments that show the feasibility of our approach. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11118",
        "graph": {
            "node_idx": 11118,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                    7,
                    1,
                    8,
                    9
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                11118,
                1860,
                9852,
                2030,
                17115,
                10109,
                11037,
                9802,
                516,
                19780
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using structural information to detect speech repairsprevious approaches to detecting and correcting speech repairs have for the most part separated these two problems. in this paper, we present a statistical model of speech repairs that uses information about the postulated repair structure (correction) to help decide whether a speech repair actually occurred. by better modeling the interactions between detection and correction, we are able to improve our detection results. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_11125",
        "graph": {
            "node_idx": 11125,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    6,
                    7,
                    8,
                    5,
                    0,
                    1,
                    2,
                    7,
                    9,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                11125,
                5634,
                12807,
                3818,
                5635,
                382,
                10103,
                350,
                16835,
                9181
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on fast and provably secure message authentication based on universal hashingthere are well-known techniques for message authentication using universal hash functions. this approach seems very promising, as it provides schemes that are both efficient and provably secure under reasonable assumptions. this paper contributes to this line of research in two ways. first, it analyzes the basic construction and some variants under more realistic and practical assumptions. second, it shows how these schemes can be efficiently implemented, and it reports on the results of empirical performance tests that demonstrate that these schemes are competitive with other commonly employed schemes whose security is less well-established. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_11131",
        "graph": {
            "node_idx": 11131,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                11131,
                19973,
                11132
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: accelerated occlusion culling using shadow frustamany applications in computer graphics and virtual environments need to render datasets with large numbers of primitives and high depth complexity at interactive rates. however, standard techniques like view frustum culling and a hardware z-buffer are unable to display datasets composed of hundred of thousands of polygons at interactive frame rates on current high-end graphics systems. we add a \"conservative\" visibility culling stage to the rendering pipeline, attempting to identify and avoid processing of occluded polygons. given a moving viewpoint, the algorithm dynamically chooses a set of occluders. each occluder is used to compute a shadow frustum, and all primitives contained within this frustum are culled. the algorithm hierarchically traverses the model, culling out parts not visible from the current viewpoint using efficient, robust, and in some cases specialized interference detection algorithms. the algorithm's performance varies with the location of the viewpoint and the depth complexity of the model. in the worst case it is linear in the input size with a small constant. in this paper, we demonstrate its performance on a city model composed of 500; 000 polygons and possessing varying depth complexity. we are able to cull an average of 55% of the polygons that would not be culled by view-frustum culling and obtain a commensurate improvement in frame rate. the overall approach is effective and scalable, is applicable to all polygonal models, and can be easily implemented on top of view-frustum culling. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11136",
        "graph": {
            "node_idx": 11136,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    3
                ]
            ],
            "node_list": [
                11136,
                8852,
                23235,
                15547,
                5496
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: application of computational topology to the design of microelectromechanical structureswe are applying tools from computational topology and combinatorial geometry in our investigation of computational aspects of engineering design problems. we seek tractable algorithmic solutions by exploiting algebraic formulations of the fundamental computational-topological problems arising in the kinematic and dynamic analysis of microelectromechanical (mem) structures. in particular, we use concepts from computational topology and geometry to determine the shape of microelectromechanical (mem) structures, given specifications of their parameterized geometry and their functionality (parametric design). mem structures are particularly suited for automated parametric design because of (i) their highly specialized and automated production process, which allows only a very limited number of elementary structures, (ii) the tractable geometry and functionality of the devices, and (iii) the possibly large number of devices produced simultaneously in one manufacturing process. kinematic interactions between mechanism components are reflected in their configuration space. each pair of components in contact is responsible for a (hyper-) surface region (algebraic variety) in configuration space. we describe a class of mechanisms (micromechanical hinged structures) whose kinematic interactions can be encoded by low-degree algebraic curves in configuration space. we then compute the topology of the arrangement created by these curves. two surface regions in the arrangement are adjacent if and only if there exists a physically feasible mechanical transition between the corresponding contact states of the mechanism. adjacency relationships in the configuration space arrangement define a dual graph whose nodes represent contact states of the mechanism, and whose edges represent mechanical state transitions. this \"configuration space graph\" can be interpreted as a concise encoding of the relationship between configuration space topology and kinematic behavior of the mechanism. the problem of parametric design can be solved by determining design parameter values such that a required mechanism behavior is achieved. the incorporation of design parameters into the mechanism geometry is reflected in configuration space by a particular family of surfaces parameterizations. the topology of the surface arrangement will therefore depend on the specific parameter values. we describe an algorithm that determines all possible arrangement topologies and their corresponding design parameter values for the class of microme- chanical hinged structures. if the required mechanism behavior can be obtained by a certain configuration space topology then the algorithm solves the parametric design problem. now, general mechanical system behavior is also constrained by dynamics, friction, and other constitutive differential inclusions. we intend to annotate the permissible configuration space topologies for the mechanism with the dynamically feasible transitions by lifting our analysis to the tangent bundle. already, our kinematic analysis to design will significantly simplify the solution of the other subproblems. the microscopic size of mem structures, the possibly large number of devices employed simultaneously, and uncertainty in the manufacturing process suggest the use of randomizing assembly algorithms. we develop a connection between randomization techniques and our approach for design automation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_11145",
        "graph": {
            "node_idx": 11145,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    3,
                    4,
                    7,
                    1,
                    4,
                    8,
                    9,
                    10
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                11145,
                19988,
                20149,
                5611,
                2987,
                2986,
                17223,
                17412,
                2985,
                2988,
                24070
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the complexity of two-person zero-sum games in extensive formthis paper investigates the complexity of finding max-min strategies for finite two-person zero-sum games in the extensive form. the problem of determining whether a player with imperfect recall can guarantee himself a certain payoff is shown to be np-hard. when both players have imperfect recall, this is even harder. moreover, the max-min behavior strategy of such a player may use irrational numbers. thus, for games with imperfect recall, computing the max-min strategy or the value of the game is a hard problem. for a game with perfect recall, we present an algorithm for computing a max-min behavior strategy, which runs in time polynomial in the size of the game tree. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_11222",
        "graph": {
            "node_idx": 11222,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                11222
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: localized temporal reasoning using subgoals and abstract eventswe are concerned with temporal reasoning problems where there is uncertainty about the order in which events occur. the task of temporal reasoning is to derive an event sequence consistent with a given set of ordering constraints to achieve a goal. previous research shows that the associated decision problems are hard even for very restricted cases. in this paper, we investigate locality in event ordering and causal dependencies. we present a localized temporal reasoning algorithm that uses subgoals and abstract events to exploit locality. the computational efficiency of our algorithm for a problem instance is quantified by the inherent locality in the instance. we theoretically demonstrate the substantial improvement in performance gained by exploiting locality. this work provides a solid evidence of the usefulness of localized reasoning in exploiting locality. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11225",
        "graph": {
            "node_idx": 11225,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                11225
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: refinement planning: status and prospectusmost current-day ai planning systems operate by iteratively refining a partial plan until it meets the goal requirements. in the past five years, significant progress has been made in our understanding of the spectrum and capabilities of such refinement planners. in this talk, i will summarize this understanding in terms of a unified framework for refinement planning and discuss several current research directions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11285",
        "graph": {
            "node_idx": 11285,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11285
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: references automatic student modeling and bug library construction using theory refinement. ph.d. ml/ symbolic revisionassert demonstrates how theory refinement techniques developed in machine learning can be used to ef fec-tively build student models for intelligent tutoring systems. this application is unique since it inverts the normal goal of theory refinement from correcting errors in a knowledge base to introducing them. a comprehensive experiment involving a lar ge number of students interacting with an automated tutor for teaching concepts in c ++ programming was used to evaluate the approach. this experiment demonstrated the ability of theory refinement to generate more accurate student models than raw induction, as well as the ability of the resulting models to support individualized feedback that actually improves students subsequent performance. carr, b. and goldstein, i. (1977). overlays: a theory of modeling for computer aided instruction. t echnical report a. i. memo 406, cambridge, ma: mit. sandberg, j. and barnard, y . (1993). education and technology: what do we know? and where is ai? artificial intelligence communications, 6(1):47-58. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_11327",
        "graph": {
            "node_idx": 11327,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                11327
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: local multicast rate control with globally optimum throughputmulticast communication involves sending same data to multiple destinations (receivers). different multicast groups may co-exist in the network at the same, competing for the shared pool of network resources. the purpose of rate control is maximizing the overall throughput of multicast connections, namely the total amount traffic delivered to different receivers, subject to the capacity constraints on the network links. in flexible multicast, receivers in different regions of the network may be need to receive data at different rates, due to variations in link capacities and traffic requirements in different areas of the network. this makes rate control for multicast more complex than the similar task for point-to-point (single receiver) case. the latter can be represented by a polynomial size positive linear program, which enables optimum solutions by fast and local rate control algorithms. we show that multicast problem, which is represented by exponential size positive linear program, can still be optimized by fast and local algorithms. specifically, our algorithms compute a near optimal values of multicast flows in poly-logarithmic number of iterations, in either distributed or parallel computation models. in the distributed model, rate of a connection is established based only on the network contention on the path of the connection, and without coordination with other connections. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_11337",
        "graph": {
            "node_idx": 11337,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    2
                ]
            ],
            "node_list": [
                11337,
                11340,
                11341,
                11335
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: rfm manual: compiling relfun into the relational/functional machinethe compilation of relfun programs consists of two main stages, horizontal transformations and vertical translations. the horizontal transformer performs both source-to-source steps into a subset of relfun and source-to-intermediate steps into a relfun-like language. the vertical translator is also divided into two phases, the classifier and the code generator. the classifier produces a declarative clause language; the code generator optimizes target code for underlying wam emulators. these parts can be used incrementally-individually, as a relational/functional compilation laboratory, or batch-composed, as a complete relfun compiler. all intermediate steps employ explicit declarative representations, which can be displayed via relfun's user interface. the compiler is implemented in a subset of common lisp; one emulator runs in common lisp, the other in ansi c. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_11339",
        "graph": {
            "node_idx": 11339,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    1,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                11339,
                11340,
                11335,
                11334,
                20067
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: goal solving as operational semanticsto combine a functional or equational programming style with logic programming, one can use an underlying logic of horn clauses with equality (as an interpreted predicate symbol) and (typed) terms. from this point of view, the most satisfying operational semantics would search for solutions to equations or predicates. \"narrowing\" and many of its variants are complete mechanisms for generating solutions. such a melded language is more expressive than either paradigm alone: functional dependencies are explicit; \"multi-valued\" functions can be better expressed as predicates; nested functions can be evaluated without recourse to search (backtracking); (non-constructor) terms can serve as arguments to predicates; functions can be inverted; nonterminating functions can be programmed in a terminating fashion; goals can be simplified in a \"don't care\" manner; \"functional\" negation can prune searches. moreover, the availability of backtracking and existential (\"logic\") variables provides an alternative to infinite data structures (\"streams\"). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_11351",
        "graph": {
            "node_idx": 11351,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                11351,
                10139,
                15422,
                24680,
                9610,
                24061
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: estimating dependency structure as a hidden variablethis paper introduces a probability model, the mixture of trees that can account for sparse, dynamically changing dependence relationships. we present a family of efficient algorithms that use em and the minimum spanning tree algorithm to find the ml and map mixture of trees for a variety of priors, including the dirichlet and the mdl priors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_11361",
        "graph": {
            "node_idx": 11361,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                11361,
                8806,
                11326
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: extending attribute grammars to support programming-in-the-largeattribute grammars add specification of static semantic properties to context-free grammars, which in turn describe the syntactic structure of program units. however, context-free grammars cannot express programming-in-the-large features common in modern programming languages, including unordered collections of units, included units and sharing of included units. we present extensions to context-free grammars, and corresponding extensions to attribute grammars, suitable for defining such features. we explain how batch and incremental attribute evaluation algorithms can be adapted to support these extensions, resulting in a uniform approach to intra-unit and inter-unit static semantic analysis and translation of multi-unit programs. an ada-specific extended abstract of this paper appeared as ``extending the mercury system to support teams of ada programmers'' in 1st international symposium on environments and tools for ada, redondo beach ca, april 1990, pages 1-12. special issue of ada letters, 11(3), spring 1991. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, compiler design"
            }
        ]
    },
    {
        "id": "cora_test_11408",
        "graph": {
            "node_idx": 11408,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    3,
                    2,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2,
                    2
                ]
            ],
            "node_list": [
                11408,
                11410,
                11409,
                20126,
                11412
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: formalising the knowledge content of case memory systemsdiscussions of case-based reasoning often reflect an implicit assumption that a case memory system will become better informed, i.e. will increase in knowledge, as more cases are added to the case-base. this paper considers formalisations of this `knowledge content' which are a necessary preliminary to more rigourous analysis of the performance of case-based reasoning systems. in particular we are interested in modelling the learning aspects of case-based reasoning in order to study how the performance of a case-based reasoning system changes as it accumlates problem-solving experience. the current paper presents a `case-base semantics' which generalises recent formalisations of case-based classification. within this framework, the paper explores various issues in assuring that these sematics are well-defined, and illustrates how the knowledge content of the case memory system can be seen to reside in both the chosen similarity measure and in the cases of the case-base. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_11410",
        "graph": {
            "node_idx": 11410,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11410,
                20126
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a yardstick for the evaluation of case-based classifiersthis paper proposes that the generalisation capabilities of a case-based reasoning system can be evaluated by comparison with a `rote-learning' algorithm which uses a very simple generalisation strategy. two such algorithms are defined, and expressions for their classification accuracy are derived as a function of the size of training sample. a series of experiments using artificial and `natural' data sets is described in which the learning curve for a case-based learner is compared with those for the apparently trivial rote-learning learning algorithms. the results show that in a number of `plausible' situations, the learning curves for a simple case-based learner and the `majority' rote-learner can barely be distinguished, although a domain is demonstrated where favourable performance from the case-based learner is observed. this suggests that the maxim of case-based reasoning that `similar problems have similar solutions' may be useful as the basis of a generalisation strategy only in selected domains. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_11415",
        "graph": {
            "node_idx": 11415,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                11415,
                11399,
                20869,
                20118
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: decision-theoretic foundations for causal reasoningwe present a definition of cause and effect in terms of decision-theoretic primitives and thereby provide a principled foundation for causal reasoning. our definition departs from the traditional view of causation in that causal assertions may vary with the set of decisions available. we argue that this approach provides added clarity to the notion of cause. also in this paper, we examine the encoding of causal relationships in directed acyclic graphs. we describe a special class of influence diagrams, those in canonical form, and show its relationship to pearl's representation of cause and effect. finally, we show how canonical form facilitates counterfactual reasoning. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_11425",
        "graph": {
            "node_idx": 11425,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11425,
                21306
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: graphs, causality, and structural equation modelsstructural equation modeling (sem) has dominated causal analysis in the social and behavioral sciences since the 1960s. currently, many sem practitioners are having difficulty articulating the causal content of sem and are seeking foundational answers. recent developments in the areas of graphical models and the logic of causality show potential for alleviating such difficulties and thus for revitalizing structural equations as the primary language of causal modeling. this paper summarizes several of these developments, including the prediction of vanishing partial correlations, model testing, model equivalence, parametric and nonparametric identifiability, control of confounding, and covariate selection. these developments clarify the causal and statistical components of structural equation models and the role of sem in the empirical sci ences. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_11504",
        "graph": {
            "node_idx": 11504,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                11504,
                1382,
                23035,
                16527,
                5087,
                2417,
                24063
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: robust geometric algorithms for sensor planningwe consider the problem of planning sensor strategies that enable a sensor to be automatically configured for robot tasks. in this paper we present robust and efficient algorithms for computing the regions from which a sensor has unobstructed or partially obstructed views of a target in a goal. we apply these algorithms to the error detection and recovery problem of recognizing whether a goal or failure region has been achieved. based on these methods and strategies for visually-cued camera control, we have built a robot surveillance system in which one mobile robot navigates to a viewing position from which it has an unobstructed view of a goal region, and then uses visual recognition to detect when a specific target has entered the room. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_11512",
        "graph": {
            "node_idx": 11512,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    1,
                    14,
                    15,
                    16,
                    17,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                11512,
                5087,
                11509,
                9583,
                9417,
                18745,
                2080,
                3451,
                20253,
                4809,
                23077,
                17326,
                2414,
                9634,
                11529,
                2416,
                20588,
                11530
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: assembly sequences for polyhedrathe problem of finding sequences of motions for the assembly of a given object consisting of polyhedral parts arises in assembly planning. we describe an algorithm to compute the set of all translations separating two polyhedra with n vertices in o(n 4 ) steps and show that this is optimal. given an assembly of k polyhedra with a total of n vertices, an extension of this algorithm identifies a valid translation and removable subassembly in o(k 2 n 4 ) steps if one exists. based on the second algorithm a polynomial time method for finding a complete assembly sequence consisting of single translations is derived. an implementation incorporates several changes to achieve better average-case performance; experimental results obtained for simple assemblies are described. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_11523",
        "graph": {
            "node_idx": 11523,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11523,
                20163
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: ontology reuse and applicationin this paper, we describe an investigation into the reuse and application of an existing ontology for the purpose of specifying and formally developing software for aircraft design. our goals were to clearly identify the processes involved in the task, and assess the cost-effectiveness of reuse. our conclusions are that (re)using an ontology is far from an automated process, and instead requires significant effort from the knowledge engineer. we describe and illustrate some intrinsic properties of the ontology translation problem and argue that fully automatic translators are unlikely to be forthcoming in the foreseeable future. despite the effort involved, our subjective conclusions are that in this case knowledge reuse was cost-effective, and that it would have taken significantly longer to design the knowledge content of this ontology from scratch in our application. our preliminary results are promising for achieving larger-scale knowledge reuse in the future. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11536",
        "graph": {
            "node_idx": 11536,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    4,
                    7
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    4
                ]
            ],
            "node_list": [
                11536,
                22177,
                14237,
                22222,
                14238,
                22545,
                14271,
                14273
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: simpack: getting started with simulation programming in c and c++simpack is a collection of c and c++ libraries and executable programs for computer simulation. in this collection, several different simulation algorithms are supported including discrete event simulation, continuous simulation and combined (multimodel) simulation. the purpose of the simpack toolkit is to provide the user with a set of utilities that illustrate the basics of building a working simulation from a model description. we demonstrate that special purpose simulation programming languages can be easily constructed using language translation software with the simpack utilities which act as the \"assembly language.\" we present several different dynamical system model forms and overview the methods used in simpack for executing these models. simpack includes some fairly extensive simulation facilities, and is in use by various instructors, researchers and industrial analysts for their modeling and simulation experiments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_11547",
        "graph": {
            "node_idx": 11547,
            "edge_index": [
                [
                    1,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                11547,
                14179
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: arithmetic-geometric mean inequality and its relationship to linear programming, matrix scaling, and gordan's theoremdimacs technical report 98-38 july 1998 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_11550",
        "graph": {
            "node_idx": 11550,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11550,
                20169
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: planning, calibration and collision-avoidance for image-guidedin radiosurgery a moving beam of radiation is used as an ablative surgical instrument to destroy brain tumors. classical radiosurgical systems rely on rigid skeletal fixation of the anatomic region to be treated. this fixation procedure is very painful for the patient and limits radiosur-gical procedures to brain lesions. furthermore, due to the necessity of rigid fixation, radiosurgical treatment with classical systems cannot be fractionated. a new camera-guided system capable of tracking patient motion during treatment has been built to overcome these problems. the radiation source is moved by a six degree-of-freedom robotic arm. in addition to offering a more cost effective, less invasive, and less painful treatment, the robotic gantry allows for arbitrary spatial motion of the radiation source. based on this feature we can treat non-spherical lesions with accuracies unachiev-able with classical radiosurgical systems. the system introduces a new class of radiosurgical procedures, called non-stereotactic, or image-guided radiosurgery. at the heart of these procedures are algorithms for planning both a treatment and the corresponding beam motion, given the geometric description of the tumor shape and relative locations in the particular case. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11552",
        "graph": {
            "node_idx": 11552,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                11552
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multilevel simulation and numerical optimization of complex engineering designsmultilevel representations have been studied extensively by artificial intelligence researchers. we present a general method that utilizes the multilevel paradigm to attack the problem of performing multidiscipline engineering design optimization in the presence of many local optima. the method uses a multidisciplinary simulator at multiple levels of abstraction, paired with a multilevel search space. we tested the method in the domain of conceptual design of supersonic transport aircraft, focusing on the airframe and the exhaust nozzle, and using sequential quadratic programming as the optimizer at each level. we found that using multilevel simulation and optimization can decrease the cost of design space search by an order of magnitude. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11564",
        "graph": {
            "node_idx": 11564,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    1,
                    10,
                    2,
                    9,
                    11,
                    4,
                    0,
                    5,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    4,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ]
            ],
            "node_list": [
                11564,
                11582,
                11568,
                20176,
                11573,
                20183,
                11565,
                20186,
                11574,
                11560,
                20177,
                11569,
                11570,
                20189
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using procedural renderman shaders for global illuminationglobal illumination techniques like radiosity or monte-carlo ray-tracing are becoming standard features of rendering systems. however, there is currently no accepted interface format which supports an appropriate physically-based scene description. in this paper we present extensions to the well-known renderman interface, which allow for a physically based scene description and support advanced global illumination techniques. special emphasis has been laid on the support for procedural descriptions of reflection and emission by renderman surface shaders. so far, they could not be used with most global illumination algorithms. the extensions have been implemented in a physically-based rendering system and are illustrated with examples. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11565",
        "graph": {
            "node_idx": 11565,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    2,
                    12,
                    3,
                    14,
                    15,
                    16,
                    12,
                    14,
                    4,
                    1,
                    3,
                    13,
                    6,
                    8,
                    0,
                    3,
                    6,
                    7,
                    8,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                11565,
                11582,
                20177,
                11568,
                11560,
                11569,
                11573,
                11564,
                20183,
                11570,
                20189,
                20186,
                11574,
                20176,
                20175,
                20178,
                24967
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: vision an architecture for global illumination calculationsso far, the problem of global illumination calculation has almost exclusively been approached from an algorithmic point of view. in this paper we propose an architectural approach to global illumination. the proposed rendering architecture vision is derived from a model of the physical rendering process, which is subsequently mapped onto an object-oriented hierarchy of classes. this design is powerful and flexible enough to support and exploit a large body of existing illumination algorithms for the simulation of various aspects of the underlying physical model. additionally, the vision architecture offers a platform for developing new algorithms and for combining them to create new rendering solutions. we discuss both abstract design as well as implementation issues. in particular, we give a detailed description of the global lighting subsystem and show how algorithms for path tracing, bidirectional estimators, irradiance caching, hierarchical radiosity, wavelet radiosity, and wavelet radiance have been implemented within vision. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11566",
        "graph": {
            "node_idx": 11566,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11566,
                20177
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: blockwise refinement a new method for solving the radiosity problemsince the introduction of radiosity to computer graphics, many improvements have been made to lower the time it takes to compute a visually good approximation to the exact solution of the radiosity equation. progressive refinement and overshooting are just two of the possibilities. in this paper we present a new technique to solve the radiosity equation which provides a fast approximation to the exact solution. this technique solves the radiosity equation by computing an approximate solution for an initial subset of patches, considered important for the radiosity environment. this partial result is then refined towards the final solution by choosing other sets of patches which may have a significant contribution. thus the new technique reduces the solution of a large matrix equation to a number of solutions involving smaller matrices. finally we analyze and compare the different algorithms for their convergence and computational complexity. this provides some interesting new results. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11570",
        "graph": {
            "node_idx": 11570,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    2,
                    4,
                    5,
                    8,
                    10,
                    1,
                    7,
                    11,
                    2,
                    3,
                    4,
                    0,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                11570,
                11568,
                11573,
                11564,
                20183,
                11565,
                11574,
                11560,
                11582,
                20176,
                20177,
                11569,
                20189
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: implementing renderman practice, problems and enhancementsthe renderman interface has been proposed as a general interface to rendering systems, yet only a few implementations of the interface exist. in this paper we describe the implementation of the renderman interface on a general rendering architecture that supports various rendering algorithms. specifically we discuss the implementation of the renderman shading language and its integration into our rendering architecture. special attention is focused on the problems that we have encountered and how they can be solved. additionally, we suggest extensions and enhancements to the current interface definition, which would make renderman easier to implement and more flexible to use. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11580",
        "graph": {
            "node_idx": 11580,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                11580,
                20184,
                25113
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: asymmetric fingerprinting for larger collusionsthis report has been submitted for publication outside of ibm and will probably be copyrighted if accepted for publication. it has been issued as a research report for early dissemination of its contents and will be distributed outside of ibm up to one year after the date indicated at the top of this page. in view of the transfer of copyright to the outside publisher, its distribution outside of ibm prior to publication should be limited to peer communications and specific requests. after outside publication, requests should be filled only by reprints or legally obtained copies of the article (e.g., payment of royalties). \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_11581",
        "graph": {
            "node_idx": 11581,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11581,
                20186
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the irradiance volumethis paper presents a volumetric representation for the global illumination within a space based on the radiometric quantity irradiance. we call this representation the irradiance volume. although irradiance is traditionally computed only for surfaces, we extend its definition to all points and directions in space. the irradiance volume supports the reconstruction of believable approximations to the illumination in situations that overwhelm traditional global illumination algorithms. a theoretical basis for the irradiance volume is discussed and the methods and issues involved with building the volume are described. the irradiance volume method shows good performance in several practical situations. keywords: computer graphics, global illumination, realistic image synthesis, light field \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11583",
        "graph": {
            "node_idx": 11583,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11583,
                20186
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: interactive rendering of globally illuminated glossy scenesglobal illumination simulates all transfers of light in a scene. the results of the simulation are then used to generate photo-realistic images. scenes with diffuse surfaces only can be displayed in real-time using the results of radi-osity methods. images of scenes with more general surfaces are created with methods based on ray tracing but do not achieve interactive frame rates. this paper presents a new algorithm for the display of globally illuminated scenes at interactive speeds. a photon tracing phase computes an approximation to the global illumination. the rendering phase splats the contribution of each photon hit onto the corresponding surface taking reectance properties and viewing direction into account. results demonstrate that this method allows to render images of globally illuminated scenes with glossy surfaces at interactive frame rates. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11596",
        "graph": {
            "node_idx": 11596,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11596,
                20200
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic belief analysisthe process of rational inquiry can be defined as the evolution of the beliefs of a rational agent as a consequence of its internal inference procedures and its interaction with the environment. these beliefs can be modelled in a formal way using belief logics. the possible worlds model and its associated kripke semantics provide an intuitive semantics for these logics, but they commit us to model agents that are logically omniscient and perfect reasoners. these problems can be avoided with a syntactic view of possible worlds, defining them as arbitrary sets of sentences in a propositional belief logic. in this article this syntactic view of possible worlds is taken, and a dynamic analysis of the beliefs of the agent is suggested in order to model the process of rational inquiry in which the agent is permanently engaged. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_11598",
        "graph": {
            "node_idx": 11598,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11598,
                20200
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: how to avoid knowing it allbeliefs have been formally modelled in the last decades using doxastic logics. the possible worlds model and its associated kripke semantics provide an intuitive semantics for these logics, but they seem to commit us to model agents that are logically omniscient (they believe every classical tautology) and perfect reasoners (their beliefs are closed under classical deductive closure). thus, this model would not be appropriate to model non-ideal agents, that have resource limitations that prevent them from attaining such levels of doxastic competence. this report contains a statement of these problems and a brief survey of some of the most interesting approaches that have been suggested to overcome them. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_11600",
        "graph": {
            "node_idx": 11600,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                11600,
                20200,
                24968
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: thinking takes time: a modal active-logic for reasoning in timemost common sense reasoning formalisms do not account for the passage of time as the reasoning occurs, and hence are inadequate from the point of view of modeling an agent's ongoing process of reasoning. we present a modal active-logic that treats time as a valuable resource that is consumed in each step of the agent's reasoning. we provide a sound and complete characterization for this logic and examine how it addresses the problem of logical omniscience. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11602",
        "graph": {
            "node_idx": 11602,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                11602,
                10126,
                19101,
                20564,
                20900
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiresolution surface reconstruction for hierarchical b-splinesthis paper presents a method for automatically generating a hierarchical b-spline surface from an initial set of control points. given an existing mesh of control points , a mesh with half the resolution , is constructed by simultaneously approximating the finer mesh while minimizing a smoothness constraint using weighted least squares. curvature measures of are used to identify features that need only be represented in the finer mesh. the resulting hierarchical surface accurately and economically reproduces the original mesh, is free from excessive undulations in the intermediate levels and produces a multiresolution representation suitable for animation and interactive modelling. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11627",
        "graph": {
            "node_idx": 11627,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                11627,
                13774,
                21731,
                8568,
                11603,
                9992,
                8567,
                20564,
                13658,
                13742
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: chapter 1 constructing c 1 surfaces of arbitrary topology using biquadratic and bicubic splinestwo approaches to building smooth free-form surfaces, generalized subdivision and the composition of surfaces from patches, are combined to generalize biquadratic tensor-product b-splines surfaces. the result is a low degree polynomial surface representation with control via the input mesh of points. the simplicity of the construction forces the surface to closely follow the design intent expressed by the input data. cutting corners and edges to smooth a polytope is a geometrically intuitive design paradigm. algorithmically, it is realized by generalized subdivision. given an input mesh of points delineating a surface, the algorithms of [4], [6], [14], [8] etc. create at each stage a refined mesh of points by averaging neighboring points of the current mesh. where the mesh is regular, e.g. where each mesh point is surrounded by exactly four quadrilateral cells, the mesh points can be interpreted as b-spline control points and the refinement of the mesh as the subdivision of the spline. thus the limit surface has a standard parametrization of low degree. unfortunately, regular meshes can only model very restricted geometric configurations. modeling real world objects without singularity and such that the mesh conforms with the features, generally requires an irregular mesh and, for such meshes, generalized subdivision methods do not provide an explicit parametrization of the limit surface. this not only makes it tricky to establish elementary properties like tangent plane continuity of the limit surface (see e.g. [7], [1],[2],[3]), but is also a major obstacle for integrating these techniques with other computer aided design representations. assembling surfaces from patches is a second design paradigm. a number of surface constructions for irregular meshes have been derived over the last decade [10]. compared to the standard tensor product b-spline representation, these constructions either sacrifice the low degree of the surfaces (e.g. [20],[12]) or depart from the standard polynomial representation (e.g. [5], [16]). however, \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11653",
        "graph": {
            "node_idx": 11653,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    1,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                11653,
                11655,
                11652,
                20241,
                20239,
                11644
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: practical bayesian inference using mixtures of mixturesdiscrete mixtures of normal distributions are widely used in modeling amplitude fluctuations of electrical potentials at synapses of human, and other animal nervous systems. the usual framework has independent data values y j arising as y j = j + x n 0 +j where the means j come from some discrete prior g() and the unknown x n 0 +j 's and observed x j ; j = 1; : : : ; n 0 are gaussian noise terms. a practically important development of the associated statistical methods is the issue of non-normality of the noise terms, often the norm rather than the exception in the neurological context. we have recently developed models, based on convolutions of dirichlet process mixtures, for such problems. explicitly, we model the noise data values x j as arising from a dirich-let process mixture of normals, in addition to modeling the location prior g() as a dirichlet process itself. this induces a dirichlet mixture of mixtures of normals, whose analysis may be developed using gibbs sampling techniques. we discuss these models and their analysis, and illustrate in the context of neurological response analysis. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_11690",
        "graph": {
            "node_idx": 11690,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                11690,
                11691,
                482,
                16463,
                8791,
                18391,
                5604,
                1951,
                3156,
                6438,
                6967,
                23302
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: proceedings of cogsci89 structural evaluation of analogies: what counts?judgments of similarity and soundness are important aspects of human analogical processing. this paper explores how these judgments can be modeled using sme, a simulation of gentner's structure-mapping theory. we focus on structural evaluation, explicating several principles which psychologically plausible algorithms should follow. we introduce the specificity conjecture, which claims that naturalistic representations include a preponderance of appearance and low-order information. we demonstrate via computational experiments that this conjecture affects how structural evaluation should be performed, including the choice of normalization technique and how the systematicity preference is implemented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_11727",
        "graph": {
            "node_idx": 11727,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                11727,
                20289,
                11444,
                15760,
                6675,
                15228,
                23459,
                23460
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: v-collide: accelerated collision detection for vrmlcollision detection is essential for many applications involving simulation, behavior and animation. however, it has been regarded as a computationally demanding task and is often treated as an advanced feature. most commonly used commercial cad/cam packages and high performance graphics libraries, such as sgi performer, provide limited support for collision detection. as users continue to stretch the capabilities of vrml, collision detection will soon become an indispensable capability for many applications. in this paper, we present a system for accelerated and robust collision detection and describe its interface to vrml browsers. we demonstrate that it is possible to perform accurate collision detection at interactive rates in vrml environments composed of large numbers of complex moving objects. cr categories and subject descriptors: d.3.2 [programming languages]: language/classifications virtual reality modeling language 2.0; i.3.1 [computer graphics]: graphics systems distributed/network graphics; i.5.3 [computer graphics]: computational geometry and object modeling additional key words and phrases: virtual reality modeling language (vrml), collision detection \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11735",
        "graph": {
            "node_idx": 11735,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11735,
                20294
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: beyond volume rendering: visualization, haptic exploration, and physical modeling of voxel based objectsin this paper, we propose the use of a voxel-based data representation not only for visualization, but also for modeling objects and structures derived from volumetric data. the paper describes work in progress towards demonstrating the utility of a voxel-based format for modeling physical interactions between virtual objects. data structures are presented that help to optimize storage requirements and preserve object integrity during object movement. an adaptation to volume rendering algorithms is discussed that enables objects to be rendered individually and then combined in a final compositing step. finally, algorithms and prototype systems are presented that use a voxel-based format to model physical interactions between objects. these physical interactions include collision detection and avoidance of object interpenetration, haptic, or tactile, exploration of virtual objects using a force feedback device, and object deformation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_11738",
        "graph": {
            "node_idx": 11738,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                11738,
                8776,
                20299,
                9903,
                10716
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dart a low overhead atm network interface chip of hot interconnects iv: a symposium ondart is an atm network interface controller chip designed for both high bandwidth and low overhead communication. innovative features are direct, protected application access to/from the network, host-assisted flow control, and \"message processing\" for flexible low overhead communication mechanisms. dart is being manufactured as a commercial product by mitsubishi electric. this work may not be copied or reproduced in whole or in part for any commercial purpose. permission to copy in whole or in part without payment of fee is granted for nonprofit educational and research purposes provided that all such whole or partial copies include the following: a notice that such copying is by permission of mitsubishi electric information technology center america; an acknowledgment of the authors and individual contributions to the work; and all applicable portions of the copyright notice. copying, reproduction, or republishing for any other purpose shall require a license with payment of fee to mitsubishi electric information technology center america. all rights reserved. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_11745",
        "graph": {
            "node_idx": 11745,
            "edge_index": [
                [
                    1,
                    2,
                    0
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                11745,
                12913,
                12943
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast and simple algorithms for perfect phylogeny and triangulating colored graphsthis paper presents an o((r n=m) m rnm) algorithm for determining whether a set of n species has a perfect phylogeny, where m is the number of characters used to describe a species and r is the maximum number of states that a character can be in. the perfect phylogeny algorithm leads to an o((2e=k) k e 2 k) algorithm for triangulating a k-colored graph having e edges. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_11750",
        "graph": {
            "node_idx": 11750,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    5
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                11750,
                8059,
                17961,
                5088,
                23037,
                23038
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: adaptive search by evolutionary algorithmsevolution strategies (ess) and genetic algorithms (gas) are compared in a formal way. it is shown, that both algorithms are identical with respect to their major working scheme, but nevertheless they exhibit significant differences with respect to the details of the selection scheme, the amount of the genetic representation and, especially, the self-adaptation of strategy parameters. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11756",
        "graph": {
            "node_idx": 11756,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    1,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                11756,
                8059,
                5967,
                23548,
                17961,
                5088,
                23037,
                23038,
                11968,
                10441,
                4803,
                7293,
                11950,
                11971,
                11970,
                20458,
                11951
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: genetic algorithm programming environmentsinterest in genetic algorithms is expanding rapidly. this paper reviews software environments for programming genetic algorithms ( ga s). as background, we initially preview genetic algorithms' models and their programming. next we classify ga software environments into three main categories: application-oriented, algorithm-oriented and toolkits. for each category of ga programming environment we review their common features and present a case study of a leading environment. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11761",
        "graph": {
            "node_idx": 11761,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    8,
                    18,
                    19,
                    20,
                    2,
                    21,
                    22,
                    23,
                    24,
                    10,
                    13,
                    15,
                    17,
                    25,
                    26,
                    2,
                    8,
                    5,
                    27,
                    28,
                    29,
                    10,
                    13,
                    8,
                    30,
                    8,
                    31,
                    32,
                    23,
                    33,
                    34,
                    35,
                    36,
                    17,
                    15,
                    37,
                    2,
                    8,
                    27,
                    38,
                    39,
                    40,
                    41,
                    28,
                    42,
                    35,
                    8,
                    43
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ]
            ],
            "node_list": [
                11761,
                11813,
                8059,
                5968,
                11982,
                6043,
                11963,
                12101,
                5967,
                4978,
                6646,
                20444,
                9162,
                11977,
                20452,
                11950,
                11969,
                11971,
                22741,
                17961,
                5088,
                23037,
                23038,
                4803,
                6648,
                16472,
                25050,
                4981,
                6041,
                6042,
                20453,
                5154,
                12102,
                11968,
                11967,
                7293,
                11951,
                20456,
                24961,
                24382,
                24636,
                4979,
                17059,
                20578
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: generality and difficulty in genetic programming: evolving a sortgenetic programming is applied to the task of evolving general iterative sorting algorithms. a connection between size and generality was discovered. adding inverse size to the fitness measure along with correctness not only decreases the size of the resulting evolved algorithms, but also dramatically increases their generality and thus the effectiveness of the evolution process. in addition, a variety of differing problem formulations are investigated and the relative probability of success for each is reported. an example of an evolved sort from each problem formulation is presented, and an initial attempt is made to understand the variations in difficulty resulting from these differing problem formulations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11785",
        "graph": {
            "node_idx": 11785,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    2,
                    3,
                    6,
                    7,
                    2,
                    8,
                    0,
                    5,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                11785,
                4507,
                4508,
                25028,
                3343,
                11046,
                4511,
                8781,
                21231,
                4389,
                21313,
                21437,
                14965,
                16752,
                20321,
                20332,
                20578
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cost versus distance in the traveling salesman problemthis paper studies the distribution of good solutions for the traveling salesman problem (tsp) on a well-known 532-city instance that has been solved optimally by padberg and rinaldi [16]. for each of five local search heuristics, solutions are obtained from 2,500 different random starting points. comparisons of these solutions show that lower-cost solutions have a strong tendency to be both closer to the optimal tour and closer to other good solutions. (distance between two solutions is defined in terms of the number of edges they have in common.) these results support the conjecture of boese, kahng and muddu [3] that the solution spaces of tsp instances have a \"globally convex\" or \"big valley\" character. this observation was used by [3] to motivate a new multi-start strategy for global optimization called adaptive multi-start \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_11791",
        "graph": {
            "node_idx": 11791,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                11791,
                21523,
                21528,
                21529
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: robot navigation using image sequenceswe describe a framework for robot navigation that exploits the continuity of image sequences. tracked visual features both guide the robot and provide predictive information about subsequent features to track. our hypothesis is that image-based techniques will allow accurate motion without a precise geometric model of the world, while using predictive information will add speed and robustness. a basic component of our framework is called a scene, which is the set of image features stable over some segment of motion. when the scene changes, it is appended to a stored sequence. as the robot moves, correspondences and dissimilarities between current, remembered, and expected scenes provide cues to join and split scene sequences, forming a map-like directed graph. visual servoing on features in successive scenes is used to traverse a path between robot and goal map locations. in our framework, a human guide serves as a scene recognition oracle during a map-learning phase; thereafter, assuming a known starting position, the robot can independently determine its location without general scene recognition ability. a prototype implementation of this framework uses as features color patches, sum-of-squared differences (ssd) subimages, or image projections of rectangles. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_11792",
        "graph": {
            "node_idx": 11792,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    4,
                    11,
                    10,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                11792,
                8733,
                10661,
                6463,
                19500,
                11791,
                2300,
                1768,
                1382,
                9328,
                13495,
                21528,
                23035,
                5911,
                21541,
                21896,
                21526,
                22942,
                22946,
                21540
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: active, uncalibrated visual servoingwe propose a method for visual control of a robotic system which does not require the formulation of an explicit calibration between image space and the world coordinate system. calibration is known to be a difficult and error prone process. by extracting control information directly from the image, we free our technique from the errors normally associated with a fixed calibration. we demonstrate this by performing a peg-in-hole alignment using an uncalibrated camera to control the positioning of the peg. the algorithm utilizes feedback from a simple geometric effect, rotational invariance, to control the positioning servo loop. the method uses an approximation to the image jacobian to provide smooth, near-continuous control. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, robotics"
            }
        ]
    },
    {
        "id": "cora_test_11807",
        "graph": {
            "node_idx": 11807,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11807,
                20329
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on-line adaptation of search via knowledge reusewe have integrated the distributed search of genetic programming based systems with collective memory to form a collective adaptation search method. such a system significantly improves search as problem complexity is increased. in collective adaptation, search agents gather knowledge of their environment and deposit it in a central information repository. process agents are then able to manipulate that focused knowledge, exploiting the exploration of the search agents. communication is one-way, from the search agents to the process agents. as the process agents are able to refine the knowledge gathered by the search agents, we investigate two-way communication. such communication directs the genetic programming based engine of the search agents. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11814",
        "graph": {
            "node_idx": 11814,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11814,
                20333
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cooperation of the fittestwe introduce a cooperative co-evolutionary system to facilitate the development of teams of heterogeneous agents. we believe that k different behavioral strategies for controlling the actions of a group of k agents can combine to form a cooperation strategy which efficiently achieves global goals. we examine the on-line adaption of behavioral strategies utilizing genetic programming. specifically, we deal with the credit assignment problem of how to fairly split the fitness of a team to all of its participants. we present several crossover mechanisms in a genetic programming system to facilitate the evolution of more than one member in the team during each crossover operation. our goal is to reduce the time needed to either evolve a good team or reach convergence. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11816",
        "graph": {
            "node_idx": 11816,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                11816,
                11815,
                11817,
                14596,
                20337,
                14597
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: combining feasibility, descent and superlinear convergence in inequality constrained optimization 1c fl1993 north-holland. personal use of this material is permitted. however, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or distribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from north-holland. abstract. extension of quasi-newton techniques from unconstrained to constrained optimization via sequential quadratic programming (sqp) presents several difficulties. among these are the possible inconsistency, away from the solution, of first order approximations to the constraints, resulting in infeasibility of the quadratic programs; and the task of selecting a suitable merit function, to induce global convergence. in the case of inequality constrained optimization, both of these difficulties disappear if the algorithm is forced to generate iterates that all satisfy the constraints, and that yield monotonically decreasing objective function values. (feasibility of the successive iterates is in fact required in many contexts such as in real-time applications or when the objective function is not well defined outside the feasible set). it has been recently shown that this can be achieved while preserving local two-step superlinear convergence. in this note, the essential ingredients for an sqp-based method exhibiting the desired properties are highlighted. correspondingly, a class of such algorithms is described and analyzed. tests performed with an efficient implementation are discussed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_11825",
        "graph": {
            "node_idx": 11825,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    0,
                    13,
                    14,
                    4,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                11825,
                8831,
                6910,
                8107,
                21179,
                2797,
                23107,
                23108,
                15983,
                2240,
                19945,
                20840,
                20841,
                12777,
                21178,
                8918,
                19150,
                12970,
                8608,
                12642,
                22330,
                10206
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: plan development using local probabilistic modelsapproximate models of world state transitions are necessary when building plans for complex systems operating in dynamic environments. external event probabilities can depend on state feature values as well as time spent in that particular state. we assign temporally-dependent probability functions to state transitions. these functions are used to locally compute state probabilities, which are then used to select highly probable goal paths and eliminate improbable states. this probabilistic model has been implemented in the cooperative intelligent real-time control architecture (circa), which combines an ai planner with a separate real-time system such that plans are developed, scheduled, and executed with real-time guarantees. we present flight simulation tests that demonstrate how our probabilistic model may improve \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11846",
        "graph": {
            "node_idx": 11846,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11846,
                20354
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: transferring and retraining learned information filtersany system that learns how to filter documents will suffer poor performance during an initial training phase. one way of addressing this problem is to exploit filters learned by other users in a collaborative fashion. we investigate \"direct transfer\" of learned filters in this setting|a limiting case for any collaborative learning system. we evaluate the stability of several different learning methods under direct transfer, and conclude that symbolic learning methods that use negatively correlated features of the data perform poorly in transfer, even when they perform well in more conventional evaluation settings. this effect is robust: it holds for several learning methods, when a diverse set of users is used in training the classifier, and even when the learned classifiers can be adapted to the new user's distribution. our experiments give rise to several concrete proposals for improving generalization performance in a collaborative setting, including a beneficial variation on a feature selection method that has been widely used in text categorization. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_11849",
        "graph": {
            "node_idx": 11849,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11849,
                11848
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 1 implementing design patterns with object-oriented rulesanswer-4ess, an operation support system (oss) for maintaining and monitoring the 4ess switches distributed throughout the at&t network, recently became the first product to use the r++ languagean extension to c++ that adds support for objectoriented rules. this paper shows how these rules facilitate inter-object communication and enable frequently occurring design patterns to be implemented in a way that leads to more understandable, maintainable and reusable code. answer (automatic network surveillance with expert rules) can be understood by viewing its input/output behavior: it receives alarms from 4ess switches and outputs alerts when it believes human action may be warranted. answers intelligent decision making is controlled by its knowledge base which has been implemented in r++. the 4ess has a well defined object model and hence answer was able to benefit from objectoriented rules. the object model is based on the view of a 4ess switch as a hierarchical collection of parts of class device. devices are the central objects in answer (devices have state, a list of associated alarms, subparts, etc.). the object model of the 4ess and the use of rules in answer to implement model-based reasoning have been discussed in detail [1,2,3] \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_11850",
        "graph": {
            "node_idx": 11850,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                11850
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: probabilistic online action predictionpeople display regularities in almost everything they do. this paper proposes characteristics of an idealized algorithm that would allow a user interface to adapt to an individual's pattern of use. we describe a simple predictive method with these characteristics and show its predictive accuracy on a large dataset of unix commands to be better than others that have been considered, while using fewer computational and memory resources. how predictable are you? each of us displays patterns of actions throughout whatever we do. most occur without conscious thought. some patterns are widespread among large communities, and are taught, as rules, such as reading from left to right, or driving on the correct side of the road. other patterns are a function of our lifestyle, such as picking up pizza on the way home from work every friday, or programming the vcr to record our favorite comedy each week. many are a result of the way interfaces are designed, like the pattern of movement of your finger on a phone dialing a number you call often, or how you might log into your computer, check mail, read news, and visit your favorite website for the latest sports scores. as computers pervade more and more aspects of our lives, the need for a system to be able to adapt to the user, perhaps in ways not programmed explicitly by the system's designer, will become ever more apparent. a car that can offer advice on driving routes is useful; one that can also guess your destination (such as a pizza parlor because it is friday and you are leaving work) is likely to be found even more useful, particularly if you didn't have to program it explicitly with that knowledge. the ability to predict the user's next action allows the system to anticipate the user's needs (perhaps through speculative execution) and to adapt to and improve upon the user's work habits (such as automating repetitive tasks). additionally, adaptive interfaces have also been shown to help those with this paper considers the more mundane, but present-day activities of user actions within a command line shell. we have concentrated initially on unix command prediction because of its continued widespread use; the unix shell provides an excellent testbed for experimentation and automatic data collection. however, our interest is in more general action prediction, and so we hypothesize that successful methodologies will also be applicable in other interfaces, including futuristic ones anticipated above as well as present-day menu selection in guis and voice-mail, or url selection in web browsers. this paper, therefore, reflects our focus on the underlying technology for action prediction, rather than specifically on how prediction can be effectively used within an interface. in this paper, we use the data from two user studies to suggest that relatively naive methods can predict a particular user's next command surprisingly well. with the generic task in mind, we will describe the characteristics of an ideal algorithm for action prediction. finally, we will present and analyze a novel algorithm that satisfies these characteristics and additionally performs better than the previous best-performing system. technically, the problem addressed by this paper is that of multi-class sequence prediction in which the sequence is of nominal features. this type of problem is not studied often by machine learning researchers; concept recognition (i.e., the boolean classification task) is more common, as are independent samples from a distribution of examples. unix commands, and user actions in general, however, are not independent, and being nominal, don't fall into the domain of traditional time-series analysis techniques from statistics. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_11853",
        "graph": {
            "node_idx": 11853,
            "edge_index": [
                [
                    1,
                    1
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                11853,
                11854
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: formal real-time imaginationformal real-time imagination is a term that may curiously describe the activities of a commonsense agent in a real-time setting in general, and in a tight deadline situation in particular. we briefly describe an `active-logic' mechanism that fits this description. temporal projection is an essential component of real-time planning. we draw a parallel between imagination as we understand it in human context and the capacity of the automated agent to formulate mental images of possible scenarios and plans of action in the course of its reasoning. we outline a treatment of temporal issues of significance to a time-situated reasoning mechanism in a dynamic setting with deadlines. the yale shooting problem is a benchmark problem in temporal reasoning. we demonstrate how the active-logic planning mechanism successfully handles some interesting real-time variants of the yale shooting problem. the solutions to each of these illustrate the agent's ability to form contexts within which to reason, to project in each context thus formed by applying default inferences, and to revise and extend its conclusions within each context by applying time-sensitive inference rules, and most impor tantly, to account for all the time spent in the process. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11859",
        "graph": {
            "node_idx": 11859,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11859,
                20358
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: local selectionlocal selection (ls) is a very simple selection scheme in evolutionary algorithms. individual fitnesses are compared to a fixed threshold, rather than to each other, to decide who gets to reproduce. ls, coupled with fitness functions stemming from the consumption of shared environmental resources, maintains diversity in a way similar to fitness sharing; however it is generally more efficient than fitness sharing, and lends itself to parallel implementations for distributed tasks. while ls is not prone to premature convergence, it applies minimal selection pressure upon the population. ls is therefore more appropriate than other, stronger selection schemes only on certain problem classes. this papers characterizes one broad class of problems in which ls consistently out performs tournament selection. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11864",
        "graph": {
            "node_idx": 11864,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                11864,
                20361
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: exploiting variable dependency in local searchstochastic search has recently been shown to be successful for solving large boolean satisfiability problems. however, systematic methods tend to be more effective in problem domains with a large number of dependent variables: that is, variables whose truth values are directly determined by a smaller set of independent variables. in systematic search, truth values can be efficiently propagated from the independent to the dependent variables by unit propagation. such propagation is more expensive in traditional stochastic procedures. in this paper we propose a mechanism for effectively dealing with dependent variables in stochastic search. we also provide empirical data showing the procedure outperforms the best previous stochastic and systematic search procedures on large formulas with a high ratio of dependent to independent variables. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, planning"
            }
        ]
    },
    {
        "id": "cora_test_11898",
        "graph": {
            "node_idx": 11898,
            "edge_index": [
                [
                    0,
                    1
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                11898,
                22079
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an improved bound on the minimal number of edges in color-critical graphsit is proven that for k 4 and n &gt; k every k-color-critical graph on n vertices has at least 2 + k3 n edges, thus improving a result of gallai from 1963. a graph g is k-color-critical (or simply k-critical) if (g) = k but (g 0 ) &lt; k for every proper subgraph g 0 of g, where (g) denotes the chromatic number of g. (see, e.g., [2] for a detailed account of graph coloring problems). consider the following problem: given k and n, what is the minimal number of edges in a k-critical graph on n vertices? it is easy to see that every vertex of a k-critical graph g has degree at least k 1, implying je(g)j k1 jv (g)j for every k-critical graph g (where k 4), which is not a clique k k on k vertices. in this note we strengthen gallai's result by showing theorem 1 suppose k 4, and let g = (v; e) be a k-critical graph on more than k vertices. then je(g)j k 1 + 2(k 2 2k 1) jv (g)j : \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_11941",
        "graph": {
            "node_idx": 11941,
            "edge_index": [
                [
                    1,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                11941,
                11942,
                20464
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: tackling the boolean even n parity problem with genetic programming and limited-error fitness standard gpthis paper presents limited error fitness (lef), a modification to the standard supervised learning approach in genetic programming (gp), in which an individual's fitness score is based on how many cases remain uncovered in the ordered training set after the individual exceeds an error limit. the training set order and the error limit are both altered dynamically in response to the performance of the fittest individual in the previous generation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11943",
        "graph": {
            "node_idx": 11943,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    2,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    7,
                    2,
                    8,
                    17,
                    18,
                    19,
                    6,
                    20,
                    21,
                    22,
                    23,
                    11,
                    13,
                    24,
                    25,
                    14,
                    26,
                    6,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    4,
                    4,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "node_list": [
                11943,
                20444,
                4980,
                20452,
                11951,
                11978,
                8059,
                20464,
                5967,
                17059,
                11808,
                11968,
                4979,
                7293,
                11970,
                20458,
                20462,
                20463,
                17961,
                5088,
                23037,
                23038,
                4803,
                11967,
                11950,
                11971,
                10441
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: context preserving crossover in genetic programming.this paper introduces two new crossover operators for genetic programming (gp). contrary to the regular gp crossover, the operators presented attempt to preserve the context in which subtrees appeared in the parent trees. a simple coordinate scheme for nodes in an s-expression tree is proposed, and crossovers are only allowed between nodes with exactly or partially matching coordinates. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11950",
        "graph": {
            "node_idx": 11950,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    1,
                    9,
                    10,
                    11,
                    4,
                    12,
                    13,
                    6,
                    0,
                    4,
                    14,
                    12,
                    3,
                    14,
                    12,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                11950,
                4980,
                11969,
                11971,
                11970,
                20459,
                20464,
                17059,
                11808,
                11968,
                4979,
                7293,
                20458,
                20462,
                25049
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fitness causes bloat: simulated annealing, hill climbing and populationsin many cases programs length's increase (known as \"bloat\", \"fluff\" and increasing \"structural complexity\") during artificial evolution. we show bloat is not specific to genetic programming and suggest it is inherent in search techniques with discrete variable length representations using simple static evaluation functions. we investigate the bloating characteristics of three non-population and one population based search techniques using a novel mutation operator. an artificial ant following the santa fe trail problem is solved by simulated annealing, hill climbing, strict hill climbing and population based search using two variants of the the new subtree based mutation operator. as predicted bloat is observed when using unbiased mutation and is absent in simulated annealing and both hill climbers when using the length neutral mutation however bloat occurs with both mutations when using a population. we conclude that there are two causes of bloat. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11954",
        "graph": {
            "node_idx": 11954,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    8,
                    1,
                    3,
                    9,
                    4,
                    9,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                11954,
                9310,
                11955,
                11976,
                20464,
                18552,
                5686,
                4737,
                22100,
                4980
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: some steps towards a form of parallel distributed genetic programminggenetic programming is a method of program discovery consisting of a special kind of genetic algorithm capable of operating on nonlinear chromosomes (parse trees) representing programs and an interpreter which can run the programs being optimised. this paper describes pdgp (parallel distributed genetic programming), a new form of genetic programming which is suitable for the development of fine-grained parallel programs. pdgp is based on a graph-like representation for parallel programs which is manipulated by crossover and mutation operators which guarantee the syntactic correctness of the offspring. the paper describes these operators and reports some preliminary results obtained with this paradigm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11957",
        "graph": {
            "node_idx": 11957,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    4,
                    5,
                    7,
                    1,
                    2,
                    3,
                    5,
                    4,
                    5,
                    8,
                    9,
                    4,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "node_list": [
                11957,
                11955,
                11954,
                11976,
                4980,
                20464,
                21719,
                9310,
                17059,
                11808,
                11968,
                4979,
                7293,
                11970,
                20458,
                20462
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: genetic programming for image analysisthis paper describes an approach to using gp for image analysis based on the idea that image enhancement, feature detection and image segmentation can be re-framed as image filtering problems. gp can be used to discover efficient optimal filters which solve such problems. however, in order to make the search feasible and effective, terminal sets, function sets and fitness functions have to meet some requirements. in the paper these requirements are described and terminals, functions and fitness functions that satisfy them are proposed. some preliminary experiments are also reported in which gp (with the mentioned characteristics) is applied to the segmentation of the brain in magnetic resonance images (an extremely difficult problem for which no simple solution is known) and compared with artificial neural nets. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_11992",
        "graph": {
            "node_idx": 11992,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                11992,
                5967,
                11968,
                11967,
                10441,
                7293,
                11950,
                11971,
                11970,
                11951,
                8059
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improving the performance of evolutionary optimization by dynamically scaling the evaluation functiontraditional evolutionary optimization algorithms assume a static evaluation function, according to which solutions are evolved. incremental evolution is an approach through which a dynamic evaluation function is scaled over time in order to improve the performance of evolutionary optimization. in this paper, we present empirical results that demonstrate the effectiveness of this approach for genetic programming. using two domains, a two-agent pursuit-evasion game and the tracker [6] trail-following task, we demonstrate that incremental evolution is most successful when applied near the beginning of an evolutionary run. we also show that incremental evolution can be successful when the intermediate evaluation functions are more difficult than the target evaluation function, as well as when they are easier than the target function. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_12004",
        "graph": {
            "node_idx": 12004,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                12004,
                4123,
                7532,
                6075,
                18121,
                609,
                3059,
                1361,
                659,
                4121
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiple information sources and multiple participants: managing situational awareness in an autonomous agent agent's goals.one of the most important tasks in a tactical engagement is to maintain awareness of the current situation. this is as true for simulated intelligent agents as it is for humans in real engagements. we have identified two key capabilities that are required for maintaining situational awareness: managing and synthesizing information from a variety of information sources, and correctly identifying and sorting engagement participants into an appropriate mental representation. this paper discusses our efforts in addressing these capabilities within the tacair-soar system. an intelligent simulated agent must be able to observe and interpret the world it is operating in. this includes observing how the world reacts to behaviors generated by the agent, as well as behaviors generated by other agents within the simulation. as the world changes, the agent must continuously build and maintain a \"mental picture\" of the world's current state (i.e., maintain situational awareness). otherwise there is no hope of generating appropriate behaviors to in earlier work (jones, tambe, laird, & rosenbloom, 1993) we concentrated on building agents that generated reasonable behavior given rather strong assumptions about world information. the past tacair-soar agent assumed that there were at most two agents operating in the simulated tactical air environment: the agent itself and one potential enemy. in addition, the agent had only two sources of information: cockpit controls reported information about the agent's vehicle and weapons, and a radar reported information about the other participant in the environment. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_12015",
        "graph": {
            "node_idx": 12015,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                12015,
                9695,
                20489,
                6009,
                20472
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the foundations of qualitative decision theorythis paper investigates the foundation of maximin, one of the central qualitative decision criteria, using the approach taken by savage (savage 1972) to investigate the foundation and rationality of classical decision theory. this approach asks \"which behaviors could result from the use of a particular decision procedure?\" the answer to this question provides two important insights: (1) under what conditions can we employ a particular agent model, and (2) how rational is a particular decision procedure. our main result is a constructive representation theorem in the spirit of savage's result for expected utility maximization, which uses two choice axioms to characterize the maximin criterion. these axioms characterize agent behaviors that can be modeled compactly using the maximin model, and, with some reservations, indicate that maximin is a reasonable decision criterion. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_12047",
        "graph": {
            "node_idx": 12047,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                12047,
                20509,
                20510
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: evolving globally synchronized cellular automatahow does an evolutionary process interact with a decentralized, distributed system in order to produce globally coordinated behavior? using a genetic algorithm (ga) to evolve cellular automata (cas), we show that the evolution of spontaneous synchronization, one type of emergent coordination, takes advantage of the underlying medium's potential to form embedded particles. the particles, typically phase defects between synchronous regions, are designed by the evolutionary process to resolve frustrations in the global phase. we describe in detail one typical solution discovered by the ga, delineating the discovered synchronization algorithm in terms of embedded particles and their interactions. we also use the particle-level description to analyze the evolutionary sequence by which this solution was discovered. our results have implications both for understanding emergent collective behavior in natural systems and for the automatic programming of decentralized spatially extended multiprocessor systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_12079",
        "graph": {
            "node_idx": 12079,
            "edge_index": [
                [
                    0,
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                12079,
                12080,
                12106,
                20547
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: implementation of a data-parallel concurrent constraint programming systemin [12], we proposed firebird, a new concurrent constraint programming language [9] which supports both concurrency and data-parallelism. committed-choice indeterminism and don't know nondeterminism are integrated, but in a manner different from the andorra model [16]. instead of nondeterminate clauses, finite domain variables form the basis of don't know nondeterminism in firebird. after a domain variable is labeled, all possible values in its domain are attempted in an or-parallel manner. a data-parallel implementation of firebird has been built. the aim of this paper is to present: 1, the scheduler and 2, the parallel backtracking scheme of firebird, which are not described in [12]. our concurrent process scheduler uses simple data-parallel algorithms for process resumption and deadlock detection. on the other hand, when the number of processor elements is not enough for exploiting or-parallelism, the system resorts to parallel backtracking automatically. we present the data structures necessary for maintaining a vector trail stack and methods for restoring all process queues to their original states upon backtracking. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_12105",
        "graph": {
            "node_idx": 12105,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    3,
                    3
                ]
            ],
            "node_list": [
                12105,
                20570,
                20858,
                5920,
                6730,
                23284
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a sampling-based heuristic for tree search applied to grammar inductionin the field of operation research and artificial intelligence, several stochastic search algorithms have been designed based on the theory of global random search (zhigljavsky 1991). basically, those techniques iteratively sample the search space with respect to a probability distribution which is updated according to the result of previous samples and some predefined strategy. genetic algorithms (gas) (goldberg 1989) or greedy randomized adaptive search procedures (grasp) (feo & resende 1995) are two particular instances of this paradigm. in this paper, we present sage, a search algorithm based on the same fundamental mechanisms as those techniques. however, it addresses a class of problems for which it is difficult to design transformation operators to perform local search because of intrinsic constraints in the definition of the problem itself. for those problems, a procedural approach is the natural way to construct solutions, resulting in a state space represented as a tree or a dag. the aim of this paper is to describe the underlying heuristics used by sage to address problems belonging to that class. the performance of sage is analyzed on the problem of grammar induction and its successful application to problems from the recent abbadingo dfa learning competition is presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_12257",
        "graph": {
            "node_idx": 12257,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12257,
                20671
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: electronic lottery tickets as micropaymentswe present a new micropayment scheme based on the use of \"electronic lottery tickets.\" this scheme is exceptionally efficient since the bank handles only winning tickets, instead of handling each micro payment. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_12269",
        "graph": {
            "node_idx": 12269,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12269,
                20674
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: new constructions of failstop signatures and lower bounds (extended abstract)with a failstop signature scheme, the supposed signer of a forged signature can prove to everybody else that it was a forgery. thus the signer is secure even against computationally unrestricted forgers. until recently, efficient constructions were only known for restricted cases, but at eurocrypt 92, van heijst and pedersen presented an efficient general scheme, where the unforgeability is based on the discrete logarithm. we present a similar scheme based on factoring: signing a message block requires approximately one modular exponentiation, and testing it requires a little more than two exponentiations. it is useful to have such alternative constructions in case one of the unproven assumptions is broken. with all failstop signatures so far, the size of the secret key is linear in the number of messages to be signed. in one sense, we prove that this cannot be avoided: the signer needs so many secretly chosen random bits. however, this does not imply that these bits ever have to be secretly stored at the same time: we present a practical construction with only logarithmic secret storage and a less practical one where the amount of secret storage is constant. we also prove rather small lower bounds for the length of public keys and signatures. all three lower bounds are within a small factor of what can be achieved with one of the known schemes. finally, we prove that with unconditionally secure signatures, like those presented by chaum and roijakkers at crypto 90, the length of a signature is at least linear in the number of participants who can test it. this shows that such schemes cannot be as efficient as failstop 1 introduction and overview over the results signatures. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_12276",
        "graph": {
            "node_idx": 12276,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12276,
                20678
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: reflections on security of database and datatransfer systems in health carehealth care is a complex and transnational task of societies. the various institutions and individuals involved are not and should not be governed by one central authority, but have legitimate and sometimes diverging interests. balancing these interests has been subject to organizational and legal procedures traditionally. today, institutions like hospitals and practices are no longer employers of isolated itsystems, but they increasingly collaborate by means of a transnational network of various highly efficient database and datatransfer components, etc. balancing all legitimate interests demands too much of organizational measures and, thus, requires direct support by the itsystems themselves. the most important implication for the specification of such systems is that it must explicitly allow different parties to distrust different components of the system. we start from a simple specification of a secure system and unfold it with respect to typical requirements of health care. health and life are a basic value of a society. e.g., the potential of personal development strongly depends upon a person's state of health and sanity, upon one's own and other people's knowledge about it. the elementary relationship of health care is the one between patient and physician. naturally, it is characterized by the patient's trust into the physician's personal skills and the physician's obligation to use his skills, his knowledge and the technology available for him to cure the patient, at reasonable cost. in these respects the patient-physician relationship differs from most other relationships, e.g., in business or military, which are potentially less individual. essential prerequisites for effective patient care are professional secrecy of physicians (oath of hippocrates) and informational self-determination of patients, physicians and medical staff. the informational self-determination of physicians and medical staff, however, must be carefully balanced against the society's interest in preventing misuse. generally, informational self-determination is another basic value of a society. a lot of institutions like hospitals, health insurances, regional, national, and international authorities are supporting the patient-physician relationships. accordingly, financial clearing between all patients, physicians, and institutions involved is a tremendous task which gives rise to consider a third basic value of a society: property. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_12326",
        "graph": {
            "node_idx": 12326,
            "edge_index": [
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                12326,
                12315,
                20724
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the robustness of the damped v -cycle of the wavelet frequency decomposition multigrid methodit is shown that its convergence speed is not affected by the presence of anisotropy provided that the corresponding coarse grid correction is damped sufficiently strong. our analysis is based on properties of wavelet packets which are supplied and proved. numerical approximations to the speed of convergence illustrate the theoretical results. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_12330",
        "graph": {
            "node_idx": 12330,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    2,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                12330,
                3721,
                20716,
                3963,
                20718,
                20723,
                20816
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: minimax bayes, asymptotic minimax and sparse wavelet priorspinsker(1980) gave a precise asymptotic evaluation of the minimax mean squared error of estimation of a signal in gaussian noise when the signal is known a priori to lie in a compact ellipsoid in hilbert space. this `minimax bayes' method can be applied to a variety of global non-parametric estimation settings with parameter spaces far from ellipsoidal. for example it leads to a theory of exact asymptotic minimax estimation over norm balls in besov and triebel spaces using simple co-ordinatewise estimators and wavelet bases. this paper outlines some features of the method common to several applications. in particular, we derive new results on the exact asymptotic minimax risk over weak ` p balls in r n as n ! 1, and also for a class of `local' estimators on the triebel scale. by its very nature, the method reveals the structure of asymptotically least favorable distributions. thus we may simulate `least favorable' sample paths. we illustrate this for estimation of a signal in gaussian white noise over norm balls in certain besov spaces. in wavelet bases, when p &lt; 2, the least favorable priors are sparse, and the resulting sample paths strikingly different from those observed in pinsker's ellipsoidal setting (p = 2). acknowledgements. i am grateful for many conversations with david donoho and carl taswell, and to a referee for helpful comments. this work was supported in part by nsf grants dms 84-51750, 9209130, and nih phs grant gm21215-12. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_12359",
        "graph": {
            "node_idx": 12359,
            "edge_index": [
                [
                    0,
                    1
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                12359,
                20985
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 1 designing treestructured organizations for computational agentswe describe a framework for defining the space of organization designs for computational agents, use our framework for analyzing the expected performance of a class of organizations, and describe how our analyses can be applied to predict performance for a distributed information gathering task. our analysis specifically addresses the impact of the span of control (branching factor) in treestructured hierarchical organizations on the response time of such organizations. we show quantitatively how the overall task size and granularity influence the design of the span of control for the organization, and that within the class of organizations considered the appropriate span of control is confined to a relatively narrow range. the performance predicted by our overall model correlates with the actual performance of a distributed organization for computer network monitoring. consequently, we argue that our framework can support aspects of organizational self-design for computational agents, and might supply insights into the design of human organizations as well. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_12369",
        "graph": {
            "node_idx": 12369,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12369,
                20757
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: np-completeness of searches for smallest possible feature sets a subset of the set of allin many learning problems, the learning system is presented with values for features that are actually irrelevant to the concept it is trying to learn. the focus algorithm, due to almuallim and dietterich, performs an explicit search for the smallest possible input feature set s that permits a consistent mapping from the features in s to the output feature. the focus algorithm can also be seen as an algorithm for learning determinations or functional dependencies, as suggested in [6]. another algorithm for learning determinations appears in [7]. the focus algorithm has superpolynomial runtime, but almuallim and di-etterich leave open the question of tractability of the underlying problem. in this paper, the problem is shown to be np-complete. we also describe briefly some experiments that demonstrate the benefits of determination learning, and show that finding lowest-cardinality determinations is easier in practice than finding minimal determi define the min-features problem as follows: given a set x of examples (which are each composed of a a binary value specifying the value of the target feature and a vector of binary values specifying the values of the other features) and a number n, determine whether or not there exists some feature set s such that: we show that min-features is np-complete by reducing vertex-cover to min-features. 1 the vertex-cover problem may be stated as the question: given a graph g with vertices v and edges e, is there a subset v 0 of v , of size m, such that each edge in e is connected to at least one vertex in v 0 ? we may reduce an instance of vertex-cover to an instance of min-features by mapping each edge in e to an example in x, with one input feature for every vertex in v . 1 in [8], a \"proof\" is reported for this result by reduction to set covering. the proof therefore fails to show np-completeness. nations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_12370",
        "graph": {
            "node_idx": 12370,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12370,
                20758
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a parallel raycast algorithm of csg models on cm2this work presents a parallel algorithm to produce high-quality shaded pictures directly from constructive solid geometry (csg) in early real time. the algorithm performs a pixel parallelization of the ray casting tecnique of csg models. l'articolo propone un nuovo approccio al problema della parallelizzazione dell'algoritmo di ray casting di modelli csg su architettura simd (connection machine) . dopo una breve descrizione del problema affrontato viene presentato l'algoritmo implementato ed irisul-tati ottenuti. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_12380",
        "graph": {
            "node_idx": 12380,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12380
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: object-oriented programming and reusabilitytechnical report cs-tr-95/6 july 25, 1995 abstract some recent commentaries have suggested that object-oriented programming has not been successful in increasing the productivity of software engineers. the main argument is that the object structure is not sufficiently reusable in different contexts. alternative strategies involving \"software components\" have been proposed. in this paper, we explore the connection between object-oriented programming and reusability. we show that object-oriented programming does support design for reusability, but does so in ways that are not well understood. the designer must make careful decisions with reusability in mind, and in particular must include consideration of reusability in the process of class identification and class organisation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_12381",
        "graph": {
            "node_idx": 12381,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12381
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: beyond ada95: the addition of persistence and its consequencesresearch into persistent programming languages and systems in recent years has shown that the technology is useful for developing complex software in many problem domains. this paper explores the issues and consequences of adding persistence to ada95. the persistence extensions support transparent migration of objects between a program's address space and a persistent store in a way that preserves both type safety and encapsulation of abstract data types. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_12382",
        "graph": {
            "node_idx": 12382,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                12382,
                14583,
                22441
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: concurrent object-oriented languages and the inheritance anomalya survey of concurrent object-oriented languages is presented. the survey is organized around three models: the animation model that describes a variety of relationships between threads and objects, an interaction model that classifies the possible semantics of invocations and returns between a client object and a server object, and a synchronization model that shows different ways in which concurrent invocations can be managed by a server. a number of representative languages are briefly presented. the problem of synchronization in concurrent object-oriented languages is considered in detail including a discussion of the inheritance anomaly. a synchronization mechanism, called a behavior set, is shown to avoid this anomaly in certain cases. the implementation of behavior sets in act++, an actor-based concurrent programming framework implemented in c++, is described. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_12392",
        "graph": {
            "node_idx": 12392,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12392
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: formal object-oriented methodsbasing software construction on formal methods is a key issue when dealing with the production of reliable programs. formal object-oriented methods combine the advantages of object-orientationnotably its powerful modelling capabilitiesand those of formal methodssuch as verifiability of program properties. our tutorial reports on the state of the art in formal object-oriented methods. the issues to address when integrating object-orientation and formal methods are considered, and various integration strategies are presented. major formal approaches (such as object-z or osdl) are compared and evaluated. the application of formal object-oriented methods is illustrated with a case study dealing with the specification and implementation of control programs for the model of a manufacturing plant. the impact of formal approaches on the development process is briey discussed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_12411",
        "graph": {
            "node_idx": 12411,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    4,
                    7,
                    6,
                    10,
                    11,
                    4,
                    6,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    4,
                    5,
                    7,
                    7,
                    7,
                    8
                ]
            ],
            "node_list": [
                12411,
                20790,
                12450,
                20808,
                12415,
                12467,
                20818,
                12445,
                12474,
                20812,
                12459,
                12466,
                1010
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: assessing convergence of markov chain monte carlo algorithmswe motivate the use of convergence diagnostic techniques for markov chain monte carlo algorithms and review various methods proposed in the mcmc literature. a common notation is established and each method is discussed with particular emphasis on implementational issues and possible extensions. the methods are compared in terms of their interpretability and applicability and recommendations are provided for particular classes of problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_12416",
        "graph": {
            "node_idx": 12416,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7,
                    8,
                    9,
                    7
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                12416,
                12411,
                12415,
                20790,
                12450,
                20808,
                12467,
                20818,
                12445,
                12474
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an approach to diagnosing total variation convergence of mcmc algorithmswe introduce a convergence diagnostic procedure for mcmc which operates by estimating total variation distances for the distribution of the algorithm after certain numbers of iterations. the method has advantages over many existing methods in terms of applicability, utility, computational expense and interpretability. it can be used to assess convergence of both marginal and joint posterior densities, and we show how it can be applied to the two most commonly used mcmc samplers; the gibbs sampler and the metropolis hastings algorithm. illustrative examples highlight the utility and interpretability of the proposed diagnostic, but also highlight some of its limitations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_12422",
        "graph": {
            "node_idx": 12422,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12422,
                20800
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: markov chain monte carlo in practice: a roundtable discussionmarkov chain monte carlo (mcmc) methods make possible the use of flexible bayesian models that would otherwise be computationally infeasible. in recent years, a great variety of such applications have been described in the literature. applied statisticians who are new to these methods may have several questions and concerns, however: how much effort and expertise are needed to design and use a markov chain sampler? how much confidence can one have in the answers that mcmc produces? how does the use of mcmc affect the rest of the model-building process? at the joint statistical meetings in august, 1996, a panel of experienced mcmc users discussed these and other issues, as well as various \"tricks of the trade\". this paper is an edited recreation of that discussion. its purpose is to offer advice and guidance to novice users of mcmc - and to not-so-novice users as well. topics include building confidence in simulation results, methods for speeding and assessing convergence, estimating standard errors, identification of models for which good mcmc algorithms exist, and the current state of software development. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_12428",
        "graph": {
            "node_idx": 12428,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    0,
                    4,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    16,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    21,
                    8,
                    29,
                    2,
                    30
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    5,
                    5,
                    5,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                12428,
                2023,
                6926,
                12451,
                12467,
                12457,
                20822,
                12426,
                20829,
                20830,
                17622,
                20798,
                20808,
                20790,
                12422,
                20825,
                12474,
                10561,
                6248,
                6924,
                20816,
                12471,
                20812,
                12452,
                12415,
                20823,
                12453,
                12459,
                20820,
                12447,
                20821
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a simulation approach to convergence rates for markov chain monte carlo algorithmsmarkov chain monte carlo (mcmc) methods, including the gibbs sampler and the metropolis-hastings algorithm, are very commonly used in bayesian statistics for sampling from complicated, high-dimensional posterior distributions. a continuing source of uncertainty is how long such a sampler must be run in order to converge approximately to its target stationary distribution. rosenthal (1995b) presents a method to compute rigorous theoretical upper bounds on the number of iterations required to achieve a specified degree of convergence in total variation distance by verifying drift and minorization conditions. we propose the use of auxiliary simulations to estimate the numerical values needed in rosenthal's theorem. our simulation method makes it possible to compute quantitative convergence bounds for models for which the requisite analytical computations would be prohibitively difficult or impossible. on the other hand, although our method appears to perform well in our example problems, it can not provide the guarantees offered by analytical proof. acknowledgements. we thank brad carlin for assistance and encouragement. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_12451",
        "graph": {
            "node_idx": 12451,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    2,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    5,
                    5
                ]
            ],
            "node_list": [
                12451,
                20812,
                12452,
                12415,
                20823,
                12453,
                20818
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: adaptive markov chain monte carlo through regeneration summarymarkov chain monte carlo (mcmc) is used for evaluating expectations of functions of interest under a target distribution . this is done by calculating averages over the sample path of a markov chain having as its stationary distribution. for computational efficiency, the markov chain should be rapidly mixing. this can sometimes be achieved only by careful design of the transition kernel of the chain, on the basis of a detailed preliminary exploratory analysis of . an alternative approach might be to allow the transition kernel to adapt whenever new features of are encountered during the mcmc run. however, if such adaptation occurs infinitely often, the stationary distribution of the chain may be disturbed. we describe a framework, based on the concept of markov chain regeneration, which allows adaptation to occur infinitely often, but which does not disturb the stationary distribution of the chain or the consistency of sample-path averages. key words: adaptive method; bayesian inference; gibbs sampling; markov chain monte carlo; \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, probabilistic methods"
            }
        ]
    },
    {
        "id": "cora_test_12487",
        "graph": {
            "node_idx": 12487,
            "edge_index": [
                [
                    1,
                    1,
                    2,
                    3,
                    0
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                12487,
                12486,
                20836,
                12493
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: adaptation in evolutionary computation: a surveyadaptation of parameters and operators is one of the most important and promising areas of research in evolutionary computation; it tunes the algorithm to the problem while solving the problem. in this paper we develop a classification of adaptation on the basis of the mechanisms used, and the level at which adaptation operates within the evolutionary algorithm. the classification covers all forms of adaptation in evolutionary computation and suggests further research. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_12491",
        "graph": {
            "node_idx": 12491,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                12491
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: diagonal crossover in genetic algorithms for numerical optimizationin this paper the results of a detailed investigation on a multi-parent recombination operator, diagonal crossover, are reported. although earlier publications have indicated the high performance of diagonal crossover on a number of problems, so far it has not been investigated whether high performance is indeed a result of using a high number of parents. here we formulate three hypotheses to explain why ga performance increases when more parents are used. based on an extensive study on a test suite containing eight numerical optimization problems we are able to establish that the higher number of parents is indeed one of the sources of higher performance, if and when this occurs. by the diversity of the test functions (unimodal, multimodal, quasi-random landscapes) we can also make observations on the relationship between fitness landscapes and operator performance. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, genetic algorithms"
            }
        ]
    },
    {
        "id": "cora_test_12520",
        "graph": {
            "node_idx": 12520,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    3,
                    12,
                    13,
                    14,
                    15,
                    12,
                    16,
                    2,
                    14,
                    17,
                    18
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                12520,
                374,
                3817,
                343,
                3030,
                6063,
                17718,
                18684,
                363,
                12805,
                354,
                12665,
                16835,
                12746,
                3818,
                16458,
                382,
                10103,
                23264
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: public randomness in cryptographythe main contribution of this paper is the introduction of a formal notion of public randomness in the context of cryptography. we show how this notion affects the definition of the security of a cryptographic primitive and the definition of how much security is preserved when one cryptographic primitive is reduced to another. previous works considered the public random bits as a part of the input, and security was parameterized in terms of the total length of the input. we parameterize security solely in terms of the length of the private input, and treat the public random bits as a separate resource. this separation allows us to independently address the important issues of how much security is preserved by a reduction and how many public random bits are used in the reduction. to exemplify these new definitions, we present reductions from weak one-way permutations to one-way permutations with strong security preserving properties that are simpler than previously known reductions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_12550",
        "graph": {
            "node_idx": 12550,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                12550,
                12548,
                20881
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: coordinating action systemswe develop an action systems based approach that supports the separation of design of the functional or computation aspects of a system under construction from the coordination and synchronization issues. the computation aspects are modelled as nondeterministic actions that work in parallel with the coordination actions, which impose some control on this nondeterministic part. we define a special form of action systems that models this type of coordination activity. certain forms of real time scheduling and coordination as well as exception handling are shown to be special cases of our approach. we show how the coordinators can be stepwise brought about from a high-level specification of the target system and how the reasoning about their behaviours is carried out separately from the computation aspects of the system within the refinement calculus. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_12588",
        "graph": {
            "node_idx": 12588,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                12588,
                2390,
                1471,
                15268,
                2388,
                2391,
                6766,
                2386,
                2389,
                21442,
                6768,
                15563
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: nearly optimal vector quantization via linear programming (extended abstract)we present new vector quantization algorithms based on the theory developed in [liv]. the new approach is to formulate a vector quantization problem as a 0-1 integer linear program. we first solve its relaxed linear program by linear programming techniques. then we transform the linear program solution into a provably good solution for the vector quantization problem. these methods lead to the first known polynomial-time full-search vector quantization codebook design algorithm and tree pruning algorithm with provable worst-case performance guarantees. we also introduce the notion of pseudorandom pruned tree-structured vector quantizers. initial experimental results on image compression are very encouraging. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_12603",
        "graph": {
            "node_idx": 12603,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                12603,
                12606,
                423,
                624,
                3219,
                1638,
                3528,
                4000,
                8933,
                3526,
                3678,
                12612,
                13748,
                22979,
                22980
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a parallel i/o system for high-performance distributed computingfl research supported by the national science foundation, under award ccr-9118787, the u. s. department of energy, under grant de-fg05-91er25105, and the office of naval research, under grant n00014-93-1-0278. y revised version of this paper to appear in the proceedings of the ifip wg10.3 working conference on programming environments for massively parallel distributed systems, april, 1994. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_12641",
        "graph": {
            "node_idx": 12641,
            "edge_index": [
                [
                    1,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                12641,
                12970,
                10717
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: exploring the performance impact of qos support in tcp/ip protocol stackssignificant efforts are being made by the internet engineering task force (ietf) to enhance the service model of the internet to support integrated services for voice, video, and data transport. this is being done via a new resource reservation protocol (rsvp) and associated service classes for handling of traffic at network routers and end hosts. given that the new service model is expected to be widely deployed and utilized, it is important to understand its performance impact on hosts and routers. this paper explores the performance impact of supporting qos guarantees on communication in tcp/ip protocol stacks at end hosts, in the context of an rsvp-based qos architecture developed and implemented earlier by the authors. we first demonstrate the efficacy of the architecture in providing the desired qos to individual connections via application-level experiments on an atm network. in these experiments we show the impact of our architecture on udp sessions and tcp connections. we then identify and measure, via detailed kernel-based profiling, the overheads imposed by all components comprising the qos support provided, such as traffic policing, traffic shaping, and buffer management. our measurements reveal that traffic policing overheads are largely offset by savings due to per-session buffer pre-allocation, and, for atm networks, a faster path through the network interface layer. in the latter case the data path latency for compliant packets can even be slightly smaller than the default best-effort data path latency. traffic shaping presents more challenges, primarily because of interactions with the operating system cpu scheduler. we discuss the performance implications of traffic shaping and suggest techniques to reduce or mask some of the associated overheads. fl this work was performed while visiting the ibm t.j. watson research center. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_12774",
        "graph": {
            "node_idx": 12774,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                12774,
                12771,
                11060,
                12772
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: preemptive scheduling of tasks with reliability requirements in distributed hard real-time systemstechnical report no. cs-93-25 may 24, 1993 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_12779",
        "graph": {
            "node_idx": 12779,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    0,
                    2,
                    9,
                    10,
                    11,
                    12,
                    13,
                    5,
                    6,
                    7,
                    14,
                    15,
                    12,
                    16,
                    5,
                    17
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ]
            ],
            "node_list": [
                12779,
                13747,
                8876,
                21007,
                21807,
                22580,
                22581,
                9873,
                21735,
                21666,
                12781,
                21663,
                13658,
                13855,
                20137,
                20564,
                21723,
                24054
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hierarchical visibility culling for spline modelswe present hierarchical algorithms for visibility culling of spline models. this includes back-patch culling, a generalization of back-face culling for polygons to splines. these algorithms are extended to trimmed surfaces as well. we propose different spatial approximations for enclosing the normals of a spline surface and compare them for efficiency and effectiveness on different graphics systems. we extend the culling algorithms using hierarchical techniques to collection of surface patches and combine them with view-frustum culling to formulate a on e (object-normal exclusion)-tree for a given model. the algorithm traverses the on e-tree at run time and culls away portions of the model not visible from the current viewpoint. these algorithms have been implemented and applied to a number of large models. in practice, we are able to speed-up the overall spline rendering algorithms by about 20 30% based on back-patch culling only and by more than 50% using on e-trees. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_12793",
        "graph": {
            "node_idx": 12793,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    4,
                    20,
                    21,
                    22,
                    23,
                    2,
                    24,
                    13,
                    25,
                    26,
                    27,
                    28
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    8,
                    9,
                    9
                ]
            ],
            "node_list": [
                12793,
                21151,
                13009,
                8234,
                7164,
                13012,
                14950,
                21153,
                13002,
                13023,
                21148,
                13015,
                13016,
                21157,
                13014,
                12637,
                18031,
                13024,
                12658,
                6427,
                21150,
                21159,
                14825,
                22690,
                21156,
                22727,
                21149,
                21160,
                22732
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: chapter 1 the wam|definition and compiler correctnesscontents introduction : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 3 evolving algebras : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 6 1. prolog|tree and stack models : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 9 1.1. prolog tree : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 9 1.2. from tree to stack : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 16 1.3. reusing choicepoints : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 20 2. predicate structure : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 22 2.1. determinacy detection (look-ahead optimization) : : : : : : : : : : : : : : : : : : : : : : : 23 2.2. compilation of predicate structure : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 24 2.3. switching : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 27 3. clause structure : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 29 3.1. sharing the continuation stack : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 29 3.2. compilation of clause structure : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 33 4. term structure : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 37 4.1. representing terms|compilation of term structure : : : : : : : : : : : : : : : : : : : : 37 4.2. prolog with term representation : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 48 4.3. the wam : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 57 references : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 62 appendix 1. rules for prolog tree model : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 64 appendix 2. rules for compiled predicate structure : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 65 appendix 3. rules for compiled clause structure : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 67 appendix 4. rules for the wam : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 68 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_12805",
        "graph": {
            "node_idx": 12805,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                12805
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: many-to-one trapdoor functions and their relation to public-key cryptosystemsa preliminary version of this paper appears in advances in cryptology - crypto 98 proceedings, abstract the heart of the task of building public key cryptosystems is viewed as that of \"making trapdoors;\" in fact, public key cryptosystems and trapdoor functions are often discussed as synonymous. how accurate is this view? in this paper we endeavor to get a better understanding of the nature of \"trapdoorness\" and its relation to public key cryptosystems, by broadening the scope of the investigation: we look at general trapdoor functions; that is, functions that are not necessarily injective (ie., one-to-one). our first result is somewhat surprising: we show that non-injective trapdoor functions (with super-polynomial pre-image size) can be constructed from any one-way function (and hence it is unlikely that they suffice for public key encryption). on the other hand, we show that trapdoor functions with polynomial pre-image size are sufficient for public key encryption. together, these two results indicate that the pre-image size is a fundamental parameter of trapdoor functions. we then turn our attention to the converse, asking what kinds of trapdoor functions can be constructed from public key cryptosystems. we take a first step by showing that in the random-oracle model one can construct injective trapdoor functions from any public key cryptosystem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_12807",
        "graph": {
            "node_idx": 12807,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    0,
                    1,
                    0,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                12807,
                10103,
                350,
                8442,
                347,
                3817,
                16458,
                11125,
                343,
                21019,
                16835,
                346,
                11556
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cbc mac for real-time data sourcesthe cipher block chaining (cbc) message authentication code (mac) is an authentication method which is widely used in practice. it is well known that the use of the cbc mac for variable length messages is not secure, and a few rules of thumb for the correct use of the cbc mac are known by folklore. the first rigorous proof of the security of cbc mac, when used on fixed length messages, was given only recently by bellare, kilian and rogaway [3]. they also suggested variants of cbc mac that handle variable-length messages but in these variants the length of the message has to be known in advance (i.e., before the message is processed). we study cbc authentication of real-time applications in which the length of the message is not known until the message ends, and furthermore, since the application is real-time, it is not possible to start processing the authentication only after the message ends. we first consider a variant of cbc mac, we call encrypted cbc mac (emac) which handles messages of variable unknown lengths. computing emac on a message is virtually as simple and as efficient as computing the standard cbc mac on the message. we provide a rigorous proof that its security is implied by the security of the underlying block cipher. next, we argue that the basic cbc mac is secure when applied to prefix-free message space. a message space can be made prefix-free by authenticating also the (usually hidden) last character which marks the end of the message. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "encryption and compression, encryption"
            }
        ]
    },
    {
        "id": "cora_test_12818",
        "graph": {
            "node_idx": 12818,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                12818
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: performance prediction using intervals extended abstractaccurate performance predictions are difficult to achieve for applications on production distributed parallel systems. we address this problem by allowing characteristic application and system data to be represented as an interval of possible values. we use intervals as parameters to a structural modeling technique, and predict the range of application behavior that will occur. we test this approach on a production system using a distributed sor code, and demonstrate the resulting additional information and accuracy resulting from the interval values. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_12830",
        "graph": {
            "node_idx": 12830,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    2,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    4,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                12830,
                12821,
                12824,
                21636,
                10463,
                16367,
                21027,
                21028,
                21124,
                21199,
                22912,
                21029,
                22914,
                22918,
                15175,
                12829,
                19359,
                24043,
                15818,
                16368
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: agent-mediated electronic commerce: an mit media laboratory perspective http://ecommerce.media.mit.edusoftware agents, semi-intelligent autonomous tools, will play an increasing role in electronic commerce applications. in this paper we give an overview of the work conducted at mits media laboratory on different types of agents for electronic commerce: from consumer to consumer smart classified ads systems, to merchant agents that provide integrative negotiation capabilities; from agents that facilitate expertise brokering to distributed reputation facilities. furthermore, we discuss a full-day ecommerce experiment with 170 participants and present our results along with lessons learned. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, agents"
            }
        ]
    },
    {
        "id": "cora_test_12840",
        "graph": {
            "node_idx": 12840,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    2,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                12840,
                8034,
                1112,
                6315,
                1028,
                17948,
                13429,
                21395,
                20499,
                2586,
                21473,
                22996,
                23012,
                23281,
                1810,
                21557,
                10575,
                3074,
                3118,
                9920,
                21467,
                19177,
                13350,
                8329,
                8913,
                5200
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: probability estimation by feed-forward networks in continuous speech recognitionwe review the use of feed-forward networks as estimators of probability densities in hidden markov modelling. in this paper we are mostly concerned with radial basis functions (rbf) networks. we note the isomorphism of rbf networks to tied mixture density estimators; additionally we note that rbf networks are trained to estimate posteriors rather than the likelihoods estimated by tied mixture density estimators. we show how the neural network training should be modified to resolve this mismatch. we also discuss problems with discriminative training, particularly the problem of dealing with unlabelled training data and the mismatch between model and data priors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_12848",
        "graph": {
            "node_idx": 12848,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                12848
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an algorithm for active data collection for learning feasibility study with neural networks.macquarie university technical report no. 95-173c department of computing school of mpce, macquarie university, new south wales, australia \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_12890",
        "graph": {
            "node_idx": 12890,
            "edge_index": [
                [
                    1,
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    0,
                    2,
                    3,
                    8,
                    6,
                    9,
                    8,
                    6,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    5,
                    6,
                    6
                ]
            ],
            "node_list": [
                12890,
                10254,
                12893,
                15062,
                21788,
                15047,
                9847,
                21057,
                15063,
                22862,
                22821,
                22808,
                10255,
                4152
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a unified approach to interior point algorithms for linear complementarity problems: a summarythis note summarizes a report with the same title, where a study was carried out regarding a unified approach, proposed by kojima, mizuno and yoshise, for interior point algorithms for the linear complementarily problem with a positive semi-definite matrix. this approach is extended to nonsymmetric matrices with nonnegative principal minors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_12911",
        "graph": {
            "node_idx": 12911,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                12911,
                12914,
                21087,
                21095
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: capacitated facility location: separation algorithms and computational experiencewe consider the polyhedral approach to solving the capacitated facility location problem. the valid inequalities considered are the knapsack, flow cover, effective capacity, single depot, and combinatorial inequalities. the flow cover, effective capacity, and single depot inequalities form subfamilies of the general family of submodular inequalities. the separation problem based on the family of submodular inequalities is np-hard in general. for the well-known subclass of flow cover inequalities, however, we show that if the client set is fixed, and if all capacities are equal, then the separation problem can be solved in polynomial time. for the flow cover inequalities based on an arbitrary client set, and for the effective capacity and single depot inequalities we develop separation heuristics. an important part of all these heuristic is based on constructive proofs that two specific conditions are necessary for the effective capacity inequalities to be facet defining. the proofs show precisely how structures that violate the two conditions can be modified to produce stronger inequalities. the family of combinatorial inequalities was originally developed for the uncapacitated facility location problem, but is also valid for the capacitated problem. no computational experience using the combinatorial inequalities has been reported so far. here we suggest how partial output from the heuristic identifying violated submodular inequalities can be used as input to a heuristic identifying violated combinatorial inequalities. we report on computational results from solving 60 small and medium size problems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_12987",
        "graph": {
            "node_idx": 12987,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                12987,
                13121,
                21203,
                21204
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: coordination of local adaptive traffic signal controllerswe consider that freeway traffic flows out onto surface streets and surface street traffic flows into freeways and thus the combined performance of both freeway and surface street portions of a network are interrelated. we analyze a control architecture to improve surface street flow using adaptive signal controllers and introduce an important component towards coordinating control of surface street networks with freeway control. the contribution of this paper relates to the use of a particular adaptive signal control scheme at each intersection called allons-d and a description of how to impart directives from a higher level controller to these local controllers such that traffic performance on the whole is maximized. our result is a multi-layer approach for controlling the infrastructure in an urban street network. simulations on an arterial network and a grid network are performed to test the coordination procedure that is presented \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_12997",
        "graph": {
            "node_idx": 12997,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    6,
                    7,
                    13,
                    4,
                    14,
                    15,
                    6,
                    16,
                    17,
                    18,
                    19
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    9
                ]
            ],
            "node_list": [
                12997,
                21148,
                21149,
                13012,
                13010,
                13008,
                21157,
                21150,
                12658,
                14950,
                22723,
                13009,
                21156,
                13006,
                13018,
                13023,
                12657,
                22731,
                23929,
                22727
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: 489 occam: specification and compiler correctness part i: the primary modelwe develop several simple operational models of occam at different levels of abstraction, and relate them by relative correctness proofs, aiming at a transparent mathematical correctness proof for a general compilation scheme of occam programs on the transputer. starting from a primary truly concurrent model of the language, we refine its salient concurrent features | communication, parallelism and alternation | to an abstract notion of processor, running a queue of processes, still close to the abstraction level of atomic occam commands. the specification is effected within the framework of evolving algebras of gurevich, relying on the theory of concurrency developed recently within that framework by glavan and rosenzweig. the model lends itself naturally to refinement down to the abstraction level of transputer instruction set architecture, foreseen for a sequel to this paper. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_13010",
        "graph": {
            "node_idx": 13010,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                13010,
                21150,
                13006,
                13012,
                13016,
                13008,
                21156,
                21157,
                12658
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: modelling and analysis of distributed and reactive systems using evolving algebrasthis is a tutorial introduction into the evolving algebra approach to design and verification of complex computing systems. it is written to be used by the working computer scientist. we explain the salient features of the methodology by showing how one can develop from scratch an easily understandable and transparent evolving algebra model for pvm, the widespread virtual architecture for heterogeneous distributed computing. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_13031",
        "graph": {
            "node_idx": 13031,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                13031
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a runto-run control framework for vlsi manufacturinga runto-run (r2r) control framework has been developed for application to supervisory control of semiconductor manufacturing processes. this generic framework, which is being developed for eventual transfer to industry, is one component of a multilevel control system that includes real-time equipment and process control as well as pseudo-real-time process control elements operating in conjunction with the r2r controller. the framework is compliant with existing trends and standards in industry. at the heart of the framework is a generic cell controller implementation that serves to support the r2r control algorithm and coordinate control and information flow between the various r2r control modules. this implementation provides for the easy incorporation of commercially available software into the control scheme. the r2r control algorithm incorporates a multi-thread process control and optimization scheme; this scheme supports the complementary utilization of any number of control and optimization modules resulting i n more complete coverage of the control and optimization space than traditional singlethread methods. the r2r control algorithm has been implemented in the control of a reactive ion etcher. the implementation incorporates an optimization thread based on insitu process models, and an spc-based control thread. results indicate a 70% improvement in reaching and maintaining target parameter values when compared with an open loop system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_13040",
        "graph": {
            "node_idx": 13040,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                13040,
                12816,
                13041
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: emeralds: a microkernel for embedded real-time systemsemeralds (extensible microkernel for embedded, real-time, distributed systems) is a real-time microkernel designed for cost-conscious, small to medium size embedded systems. it not only offers standard os services like multi-threaded processes, real-time scheduling, protected address spaces, message-passing, semaphores, and timers, but does so in an efficient manner while keeping the kernel size to just tens of kilobytes. for efficiency, emeralds uses the novel approach of mapping the kernel into each user-level address space, so even with full memory protection, system calls do not need context switches unless a user-level server is involved. emeralds also provides the flexibility for users to add communication protocol stacks and device drivers as user-level servers without modifying the kernel. we have completed a uniprocessor version of emeralds for the motorola 68040 processor whose size is under 13 kbytes. context switch takes under 12 s and system calls have overhead just 1.8 s more than that of simple subroutine calls. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_13130",
        "graph": {
            "node_idx": 13130,
            "edge_index": [
                [
                    1,
                    2,
                    0,
                    1,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                13130,
                13128,
                13109,
                13111,
                23927,
                13127
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: objective functions for tomographic reconstruction from randoms-precorrected pet scansin pet, usually the data are precorrected for accidental coincidence (ac) events by real-time subtraction of the delayed window coincidences. randoms subtraction compensates in mean for ac events but destroys the poisson statistics. furthermore, for transmission tomography the weighted least-squares (wls) method leads to systematic biases, especially at low count rates. we propose a new \"shifted\" poisson (sp) model for precorrected pet data, which properly matches the first and second order moments of the measurement statistics. using simulations and analytic approximations, we show that estimators based on the \"ordinary\" poisson (op) model for the precorrected data lead to higher standard deviations than the proposed method. moreover, if one zero-thresholds the data before applying the maximization algorithm, the op model results in systematic bias. it is shown that the proposed sp model leads to penalized-likelihood estimates free of systematic bias, even for zero-thresholded data. the proposed sp model does not increase the computation requirements compared to op model and it is robust to errors in the estimates of the ac event rates. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_13274",
        "graph": {
            "node_idx": 13274,
            "edge_index": [
                [
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                13274,
                13336,
                21372
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: new algorithms for cms electron/photon trigger use of fine grain calorimeter datawe study the performance of a minor modification to the cms technical proposal level-1 calorimeter electron/photon trigger algorithm and some new algorithms for electron/photon trigger that use fine grain information from the cms crystal calorimeter. we report that a simple fine grain em isolation algorithm does not provide a substantial reduction in the background rate for single electron/photon trigger. this algorithm provides a drop from a rate of 5.7 khz, for the technical proposal algorithm with hadronic isolation only, down to 3.6 khz, with nominal e t cutoff of 30 gev. we also report that a more complex daq filter type algorithm using em shower isolation in ecal crystals yields about a factor of four additional reduction in rate over that of the technical proposal algorithm. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_13348",
        "graph": {
            "node_idx": 13348,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    4,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    3,
                    3
                ]
            ],
            "node_list": [
                13348,
                13352,
                21462,
                13350,
                21557
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the modulation spectrogram: in pursuit of an invariant representation of speechunderstanding the human ability to reliably process and decode speech across a wide range of acoustic conditions and speaker characteristics is a fundamental challenge for current theories of speech perception. conventional speech representations such as the sound spectrogram emphasize many spectro-temporal details that are not directly germane to the linguistic information encoded in the speech signal and which consequently do not display the perceptual stability characteristic of human listeners. we propose a new representational format, the modulation spectrogram, that discards much of the spectro-temporal detail in the speech signal and instead focuses on the underlying, stable structure incorporated in the low-frequency portion of the modulation spectrum distributed across critical-band-like channels. we describe the representation and illustrate its stability with color-mapped displays and with results from automatic speech recognition experiments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_13373",
        "graph": {
            "node_idx": 13373,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    4
                ]
            ],
            "node_list": [
                13373,
                8078,
                13374,
                3185,
                13448,
                14502,
                8079,
                20784,
                13449,
                3838,
                7691,
                18136,
                14497
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: fast speakers in large vocabulary continuous speech recognition: analysis antidotesthe performance of automatic speech recognizers (asr) typically degrades for test speakers with \"outlier\" characteristics, for example, speakers with foreign accent and fast speaking rate. in this work, we concentrate on the latter. consistent with other researchers, we have observed that for speakers with exceptionally high speaking rate, the word recognition error is significantly higher. we have investigated two possible causes for this effect. inherent spectral differences may cause the extracted features for these outliers to be significantly different from that of normal speech. also, due to phone omissions and duration reduction, the normal word-models may not be suitable for fast speech. based on our exploratory experiments on timit and wsj corpora, we believe the spectral differences and duration reduction are both significant sources of the increased error. by adapting our mlp phonetic probability estimator to fast speech, and employing fast speaker word-models, we have been able to eliminate about 16% of the fast speaker word recognition errors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_13449",
        "graph": {
            "node_idx": 13449,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ]
            ],
            "node_list": [
                13449,
                13448,
                14497
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: combining multiple estimators of speaking ratewe report progress in the development of a measure of speaking rate that is computed from the acoustic signal. the newest form of our analysis incorporates multiple estimates of rate; besides the spectral moment for a full-band energy envelope that we have previously reported, we also used pointwise correlation between pairs of compressed sub-band energy envelopes. the complete measure, called mrate, has been compared to a reference syllable rate derived from a manually transcribed subset of the switchboard database. the correlation with transcribed syllable rate is significantly higher than our earlier measure; estimates are typically within 1-2 syllables/second of the reference syllable rate. we conclude by assessing the use of mrate as a detector for rapid speech. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_13483",
        "graph": {
            "node_idx": 13483,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                13483,
                21517
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dna sequences useful for computationrecent proposals for dna based computing [1], [2], [3] encode boolean vector component values with sequences of dna. it has previously been assumed that sufficient length random subsequences could be used to encode component values. however use of such subsequences will inadvertently result in long complementary subsequences. complementary subsequences of sufficient length would stick to each other and cause mistakes or delays in computation. we suggest some constraints on dna subsequences to be used in encodings, and describe maximal sets of subsequences satisfying these constraints. a seminal paper of adleman[1] recently sparked growing interest in the use of dna and the methods of molecular biology to do computation. adleman's approach required the encoding of computer science problems into dna sequences, and relied heavily on \"extraction\" of sequences containing a particular subsequence by use of a complementary subsequence. subsequently lipton[2] proposed an approach for using dna to solve satisfiability and other problems in the computational class np. lipton proposed a particular encoding of boolean vectors and relied on similar extraction operations using complementary subsequences. baum proposed to use a similar encoding, and some variants, for content addressable memories[3]. several other proposed computer algorithms rely on similar encodings and methods[4],[5]. for each of these proposals, a set of dna subsequences must be chosen. practical considerations will force these subsequences to satisfy certain requirements. lipton and adleman suggested using random subsequences. however, practical requirements impose constraints that can not be met by random sequences, and it is not a priori obvious that they can be satisfied at all. this paper describes such constraints and proposes sets of subsequences which satisfy them. for concreteness we briefly review the encoding of lipton[2]. one wishes to encode the boolean vectors f0; 1g n , where n is about 60. for each i = 1; :::; n, one chooses two subsequences of dna x i and y i , corresponding respectively to a 0 or a 1 in the ith component. a vector in f0; 1g n is then encoded by the concatenation of the appropriate subsequences, perhaps spaced by a fixed subsequence, or a subsequence corresponding to the number of the component 1 . this evidently requires \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, theory"
            }
        ]
    },
    {
        "id": "cora_test_13521",
        "graph": {
            "node_idx": 13521,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                13521,
                21557
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: transmissions and transitions: a study of two common assumptions in multi-band asris multi-band asr inherently inferior to a full-band approach because phonetic information is lost due to the division of the frequency space into sub-bands? do the phonetic transitions in sub-bands occur at different times? the first statement is a common objection of the critics of multi-band asr, and the second, a common assumption by multi-band researchers. this paper is dedicated to finding answers to both these questions. to study the first point, we calculate phonetic feature transmission for sub-bands. not only do we fail to substantiate the above objection, but we observe the contrary. we confirm the second hypothesis by analyzing the phonetic transition lags in each sub-band. these results reinforce our view that multi-band speech analysis provides useful information for asr, particularly when band merging takes place at the end state for a phonetic or syllabic model, allowing sub-bands to be independently time-aligned within the model. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_13554",
        "graph": {
            "node_idx": 13554,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                13554
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: portable graphical tools for concurrent plasma simulation october 18, 1996low pressure reactors (less than 1.5 torr) are used for etching processes in the microelectronics industry. hawk, a 3-d concurrent dsmc simulation tool, is used for large-scale simulations of these reactors. in order for hawk to be convenient for the process engineers who use such tools, xhawk, a graphical interface to hawk, and xfalcon, the graphical interface to a chemical database used by hawk, were created. these applications were developed for the x-windows platform [nelson95]. in order to make this tool useful to a broader segment of users, and to maintain support for new simulation techniques incorporated into hawk, a new version of xhawk/xfalcon has been developed using tcl/tk. this multi-platform, portable, interface development language has reduced the code size of xhawk/xfalcon, making the applications more manageable and expandable, and at the same time has allowed the incorporation of many new interface features. the xfalcon chemical database system has been expanded to incorporate an improved description of chemical reactions. these interface tools are being used in the microelectronics industry for the design and evaluation of plasma reactors. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_13598",
        "graph": {
            "node_idx": 13598,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                13598
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: krml 16 -0 extensions to an object-oriented programming language for programming fine-grain multicomputersin this note, we extend an object-oriented language to support programming fine-grain multicom-puters. the new constructs have a simple semantics and provide a nice way to write distributed programs. the semantics of the constructs are independent of how a program is distributed. we also show a set of simple conditions under which even the outcome of a program is independent of how its control and data are distributed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_13667",
        "graph": {
            "node_idx": 13667,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                13667
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: new approaches to holographic videorecent advances in both the computation and display of holographic images have enabled several firsts. interactive display of images is now possible using the bipolar intensity computation method and a fast look-up table approach to fringe pattern generation. full-color images have been generated by computing and displaying three color component images (red, green, and blue). using parallelism to scale up the first generation system, images as large as 80 mm in all three dimensions have been displayed. the combination of multi-channel acousto-optic modulators and fast horizontal scanning continue to provide the basis of an effective real-time holographic display system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_13698",
        "graph": {
            "node_idx": 13698,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "node_list": [
                13698,
                11131,
                13657,
                10736,
                19973,
                11132,
                13658,
                7417,
                12586
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: real-time occlusion culling for models with large occludersone way to avoid needlessly processing invisible portions of the scene is to use an occlusion culling algorithm to discard invisible polygons early in the graphics pipeline. in this paper, we exploit the presence of large occluders in urban and architectural models to design a real-time occlusion culling algorithm. our algorithm has the following features: it is conservative, i.e., it overestimates the set of visible polygons; it exploits spatial coherence by using a hierarchical data structure; and it exploits temporal coherence by reusing visibility information computed for previous viewpoints. the new algorithm significantly accelerates rendering of several complex test models. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_13728",
        "graph": {
            "node_idx": 13728,
            "edge_index": [
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    0
                ]
            ],
            "node_list": [
                13728,
                21712,
                15521
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: towards problem solving environments for high performance computinga typical computing environment for solving grand challenge problems consists of a high performance graphics workstation acting as a front-end, connected to a variety of remote supercomputers. a problem solving environment (pse) is a system of programs designed to assist a scientist in solving his/her problems without detailed understanding of parallel machines, and guiding him/her through the maze of computing options and mountains of data. a pse for structural biology, sb, is under development at purdue university to aid biologists manage such computations. this paper discusses the functions supported by sb and proposes it as a generic model for such environments. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_13731",
        "graph": {
            "node_idx": 13731,
            "edge_index": [
                [
                    0,
                    1
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                13731,
                21721
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: type inference with non-structural subtypingwe present an o(n 3 ) time type inference algorithm for a type system with a largest type &gt;, a smallest type ?, and the usual ordering between function types. the algorithm infers type annotations of least shape, and it works equally well for recursive types. for the problem of typability, our algorithm is simpler than the one of kozen, palsberg, and schwartzbach for type inference without ?. this may be surprising, especially because the system with ? is strictly more powerful. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_13743",
        "graph": {
            "node_idx": 13743,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                13743,
                21731
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a characterization of connecting maps as nonlinear roots of the identity surfaces ii 1in order to define the smoothness of a piecewise polynomial surface, the domains of adjacent pieces must be related to one another by connecting maps; such maps reparametrize the surface pieces by mapping the domains of adjacent pieces to a joint domain. we characterize the subclass of connecting maps that can be used to surround a point by three or more pieces. the characterization of connecting maps for second order continuity suggests a lower bound on the degree of any curvature continuous surface assembled from polynomial pieces. a popular approach to modeling smooth parametric surfaces is to assemble them from polynomial patches p k : k ir 2 7! ir 3 . to determine the smoothness of transition from one patch to its neighbor, the domains of adjacent patches must locally be mapped to a joint domain so that directions of differentiation are well defined. thus connecting maps k : ir 2 7! k play a central role in the construction of smooth parametric surfaces, affecting for example the polynomial degree and the shape of the surfaces. of particular interest for constructions is the subclass of connecting maps that can be used to smoothly surround a point by three or more patches. the paper characterizes this subclass. when three or more patches join smoothly at a common point, the pairwise continuity constraints between the patches form a circular system. correspondingly, the composition of all n connecting maps must map any initial domain to itself and must agree with the identity map, id, at the preimage of the common point up to the given order of continuity (cf. [2, theorem x1. motivation \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_13757",
        "graph": {
            "node_idx": 13757,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                13757,
                21742
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: language constructs for coordination in an agent spacethis paper describes an open language framework based on concurrent object-oriented programming. in this computational model, autonomous active objects are used to specify interacting agents. although many researcher indicated the suitability of concurrent object-oriented programming as a base for multi-agent languages[pog94, sho93], we claim that powerful coordination constructs are needed to achieve better expressive power in the language. our language framework supports two kinds of semantics for coordination in the agent space: \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_13761",
        "graph": {
            "node_idx": 13761,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    3,
                    14
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "node_list": [
                13761,
                1551,
                14930,
                15703,
                16546,
                15597,
                8236,
                24455,
                2920,
                18708,
                11621,
                10126,
                20216,
                22699,
                5909
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: modeling with triangular b-splinesthis paper discusses applications of triangular b-splines in solid modeling. the new scheme is well-suited for modeling applications since it allows the construction of smooth surfaces with lowest degree possible. furthermore, it is possible to represent any piecewise polynomial surface as a linear combination of triangular b-splines. thus triangular b-splines provide a unified data format for fairly arbitrary surface types. finally, triangular b-splines are ideally suited for blending applications. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_13771",
        "graph": {
            "node_idx": 13771,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    3,
                    8,
                    9,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    5,
                    5,
                    5
                ]
            ],
            "node_list": [
                13771,
                14234,
                21970,
                22216,
                22221,
                5664,
                23648,
                14274,
                19874,
                20290
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multiresolution stochastic hybrid shape models with fractal priorsfl this work was supported in part by the university of florida brain institute. this paper is in press, to appear in the acm togs special issue on interactive sculpting, 1994. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_13779",
        "graph": {
            "node_idx": 13779,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                13779,
                8568,
                9992,
                8567,
                20564,
                13658,
                13742
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: surface fitting with hierarchical splineswe consider the fltting of tensor product parametric spline surfaces to gridded data. the continuity of the surface is provided by the basis chosen. when tensor product splines are used with gridded data, the surface fltting problem decomposes into a sequence of curve fltting processes, making the computations particularly e-cient. the use of a hierarchical representation for the surface adds further e-ciency by adaptively decomposing the fltting process into subproblems involving only a portion of the data. hierarchy also provides a means of storing the resulting surface in a compressed format. our approach is compared to multiresolution analysis and the use of wavelets. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_13781",
        "graph": {
            "node_idx": 13781,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                13781,
                13692,
                23649,
                21686
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: case study: observing a volume rendered fetus within a pregnant patientaugmented reality systems with see-through head - mounted displays have been used primarily for applications that are possible with today's computational capabilities. we explore possibilities for a particular applicationin-place, real-time 3d ultrasound visualizationwithout concern for such limitations. the question is not how well could we currently visualize the fetus in real time, but how well could we see the fetus if we had sufficient compute power? our video sequence shows a 3d fetus within a pregnant woman's abdomenthe way this would look to a hmd user. technical problems in making the sequence are discussed. this experience exposed limitations of current augmented reality systems; it may help define the capabilities of future systems needed for applications as demanding as real-time medical visualization. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_13790",
        "graph": {
            "node_idx": 13790,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                13790,
                13784,
                13702,
                13701,
                21797,
                13791
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: parallel cluster labeling on a network of workstations 1in recent years, encouraged by today's fast workstations and by software systems designed to transform workstation clusters into parallel programming environments, network of workstations have been increasingly used as computational engines. networked workstations, however, are not ideal replacements for supercomputers, because of the low interconnection capacity provided by current local area networks. in this paper, we present an application using the eclipse toolkit, a system for replication-based parallel processing in heterogeneous environments. although primarily designed for replicative applications (that generally do not require large amounts of communication), eclipse can be used for more general forms of message-passing parallel processing. we describe the use of the toolkit in the parallelization of a cluster labeling algorithm. the algorithm is designed so that it uses some of eclipse's features to reduce communication overhead, making the algorithm suitable for execution on workstation clusters. early performance results are described. nos ultimos anos, encorajados pelas r apidas estac oes de trabalho e tamb em pelos sistemas de software que visam transformar aglomerados de estac oes em ambientes de programac ao paralela, redes de estac oes tem sido cada vez mais usadas como engenhos computacionais. entretanto, redes de estac oes n ao s ao substitutos ideais para supercomputadores, devido a baixa capacidade de interconex ao fornecida pelas atuais redes locais. neste artigo, apresentamos eclipse, um sistema de software para processamento paralelo em ambiente heterog eneo para aplicac oes baseadas no paradigma de replicac ao. eclipse tamb em suporta formas mais gerais de processamento paralelo basedo em troca de mensagens. neste artigo, apresentamos o uso do sistema eclipse na paralelizac ao de um algortmo de rotulamento de aglomerados. o algortmo foi projetado para usar algumas funcionalidades de eclipse para reduzir o tempo gasto em comunicac ao, o que torna o algortmo adequado para uso em redes de estac oes. descrevemos no artigo algumas medidas de desempenho obtidas na execuc ao do programa paralelo. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_13814",
        "graph": {
            "node_idx": 13814,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                13814
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: short communication computing values and derivatives of bezier and b-spline tensor products illustrated for awe give an efficient algorithm for evaluating bezier and b-spline tensor products for both positions and normals. the algorithm is an extension of a method for computing the position and tangent to a bezier curve, and is asymptotically twice as fast as the standard bilinear algorithm. many applications, such as rendering a surface using phong shading, require evaluating both the value and derivatives of a surface. repeated bilinear interpolation can be used to compute values and derivatives of n fi n tensor product bezier surfaces (see figure 1a and farin [far93]). the final computed point is a point on the surface, and the points in the next to last step can be used to calculate the derivatives of the surface. however, this algorithm cannot be used for an n fi m tensor product surface with m 6= n. in this paper we develop an algorithm to handle the general case of arbitrary m and n. our approach is to run the univariate version of de casteljau's algorithm successively in each parametric direction. each time, we stop the evaluation \"one short\" of completion. the resulting multi-linear function is then evaluated to compute both the value and the derivatives. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_13820",
        "graph": {
            "node_idx": 13820,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    2,
                    6,
                    7
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                13820,
                13821,
                13840,
                13818,
                21786,
                21798,
                13819,
                21799
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: sciencepad: an intelligent electronic notepad for ubiquitous scientific computingthe national information infrastructure (nii) that will evolve in the 1990's and beyond will impact many institutions of life. these include the way we learn and do science, self-caring, access to civil/information infrastructure systems & services, and management & control of manufacturing processes. the future scenario for the nii assumes wireless networks used by walkstations realizing the dream of truly ubiquitous access to the information superhighway. some of the current obstacles in building such a ubiquitous access system on mobile high-performance platforms include the user interface for these walkstations, the ability of sniffing information across heterogeneous geographically distributed information systems, the ability of processing sensoring data for monitoring and control, and the dynamic reconfigura-bility of computations between the mobile unit and the stationary servers. our effort in the area of ubiquitous computing involves the design and implementation of intelligent models and techniques to address the aforementioned obstacles. in this paper we present the architecture of an intelligent electronic notepad, called sciencepad, to support a scientist in the research environment of the future. fl this work was supported in part by nsf grants cda-9123592 and asc 9404859. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_13871",
        "graph": {
            "node_idx": 13871,
            "edge_index": [
                [
                    0
                ],
                [
                    0
                ]
            ],
            "node_list": [
                13871
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: load balancing for a parallel radiosity algorithmthe radiosity method models the interaction of light between diffuse surfaces, thereby accurately predicting global illumination effects. due to the high computational effort to calculate the transfer of light between surfaces and the memory requirements for the scene description, a distributed, parallelized version of the algorithm is needed for scenes consisting of thousands of surfaces. we present several load distribution schemes for such a parallel algorithm which includes progressive refinement and adaptive subdivision for fast solutions of high quality. the load is distributed before the calculations in a static way. during the computation the load is redistributed dynamically to make up for individual differences in processor loads. the dynamic load balancing scheme never generates more data packets than the original algorithm and avoids overloading proces sors through actions taken by the scheme. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_13915",
        "graph": {
            "node_idx": 13915,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                13915,
                11306,
                16082,
                23130
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: why use a fishing line when you have a net? an adaptive multicast data distribution protocolthe design and implementation of a system to provide reliable and efficient distribution of large quantities of data to many hosts on a local area network or internetwork is described. by exploiting the one-to-many transmission capabilities of multicast and broadcast, it is possible to transmit data to multiple hosts simultaneously, using less bandwidth and thus obtaining greater efficiency than repeated unicasting. although performance measurements indicate the superiority of multicast, we dynamically select from available transmission modes so as to maximize efficiency and throughput while providing reliable delivery of data to all hosts. our results demonstrate that file-distribution programs based on our protocol can benefit from a substantial speed-up over tcp-based programs such as rdist. for example, our system has been used to distribute a 133 kbyte password file to 68 hosts in 20 seconds, whereas the equivalent rdist took 251 seconds. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_13929",
        "graph": {
            "node_idx": 13929,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    2
                ]
            ],
            "node_list": [
                13929,
                20648,
                14102,
                13883
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: rsrr: a routing interface for status ofthis document is an internet-draft. internet-drafts are working documents of the internet engineering task force (ietf), its areas, and its working groups. note that other groups may also distribute working documents as internet-drafts. internet-drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time. it is inappropriate to use internet-drafts as reference material or to cite them other than as \"work in progress.\" abstract this memo describes version 2 of rsrr, a routing interface for rsvp. by using this interface, rsvp may obtain forwarding information from routers and use it to place reservation state within the network. version 1 of this interface was designed primarily for rsvp interaction with ipv4 multicast routing protocols. version 2 adds support for ipv4 unicast as well as ipv6 unicast and multicast routing. a backwards compatibility mechanism is provided. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_14075",
        "graph": {
            "node_idx": 14075,
            "edge_index": [
                [
                    1,
                    2
                ],
                [
                    0,
                    0
                ]
            ],
            "node_list": [
                14075,
                22011,
                22261
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: enabling large-scale simulations: selective abstraction approach to the study of multicast protocolsdue to the complexity and scale of the current internet, large-scale simulation is an increasingly important tool to evaluate network protocol design. parallel and distributed simulation is one appropriate approach to the simulation scalability problem, but it can require expensive hardware and have high overhead. we investigate a complimentary solution - simulation abstraction. just as a custom simulator includes only details necessary for the task at hand, a general simulator can support configurable levels of detail for different simulations. we demonstrate two abstraction techniques in multicast simulations and show that they each help to gain one order of magnitude in performance. although abstraction simulations are not identical to more detailed simulations, in many cases these differences are small and result in minimal changes in the conclusions drawn from simulations. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_14131",
        "graph": {
            "node_idx": 14131,
            "edge_index": [
                [
                    1,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                14131,
                14114
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: asymptotics of the total chromatic number for simple graphsdimacs technical report 96-20 july 1996 1 author was an unofficial dimacs visitor during the preliminary stages of preparing this paper. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_14136",
        "graph": {
            "node_idx": 14136,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                14136,
                22070
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: xunet 2: lessons from an early wide-area atm testbedthis paper is a retrospective on the design of xunet 2, one of the earliest functional wide-area atm networks. work on xunet 2 began in 1989 and the network, consisting of experimental atm switches, ip routers, and 45 mbps transmission lines, has been operational since october 1991. the network serves as a ``laboratory without walls'' for eight research groups across the united states. while xunet 2 has only a small number of nodes, it was designed as a prototype of a nationwide atm network. this paper reviews some of the design decisions and lessons learned in the project and points out the research directions motivated by this work, focusing on the areas of traffic management, atm switch design, network control, and the implementation of an ip router. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "networking, protocols"
            }
        ]
    },
    {
        "id": "cora_test_14177",
        "graph": {
            "node_idx": 14177,
            "edge_index": [
                [
                    1,
                    2,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                14177,
                22104,
                14178
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: computational methods for evaluating swept object boundariesmany systems support the design of 2d regions and 3d volumes by sweeping a generator contour over a spine. well established and widely used rendering systems accept high level boundary descriptions of regions and solids but not in the contour-spine form. hence the swept object design specification must be such as to lend itself to efficient evaluation of a compact and high level boundary description. in this paper, we identify a sufficiently general class of swept objects and classify the sweep rules. we also present computational methods for directly evaluating the boundary representation which implicitly simulate the sweep process. the boundary is generated as a set of piecewise curves/surfaces in a compact form suitable for direct input to rendering systems like postscript(r) in 2d and renderman(r) in \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_14237",
        "graph": {
            "node_idx": 14237,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    5
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                14237,
                14271,
                14238,
                22222,
                14282,
                14273
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a simulation environment for multimodelinglarge scale systems are typically quite difficult to model. hierarchical decomposition has proven to be one successful method in managing model complexity, by refining model components into models of the same type as the lumped model. many systems, however, cannot be modeled using this approach since each abstraction level is best defined using a different modeling technique. we present a multimodel approach which overcomes this limitation, and we illustrate the technique using a fairly simple scenario: boiling water. state and phase trajectories are presented along with an implementation using the simpack simulation toolkit. multimodeling has provided us with a mechanism for building models that are capable of producing answers over a wide range of fidelity. [key words: multimodeling, process abstraction, combined \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_14277",
        "graph": {
            "node_idx": 14277,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                14277
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the simplest subdivision scheme for smoothing polyhedranumber of isolated points. we analyze and improve the construction. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_14278",
        "graph": {
            "node_idx": 14278,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                14278
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic smooth subdivision surfaces for data visualizationrecursive subdivision schemes have been extensively used in computer graphics and scientific visualization for modeling smooth surfaces of arbitrary topology. recursive subdivision generates a visually pleasing smooth surface in the limit from an initial user-specified polygonal mesh through the repeated application of a fixed set of subdivision rules. in this paper, we present a new dynamic surface model based on the catmull-clark subdivision scheme, which is a very popular method to model complicated objects of arbitrary genus because of many of its nice properties. our new dynamic surface model inherits the attractive properties of the catmull-clark subdivision scheme as well as that of the physics-based modeling paradigm. this new model provides a direct and intuitive means of manipulating geometric shapes, a fast, robust, and hierarchical approach for recovering complex geometric shapes from range and volume data using very few degrees of freedom (control vertices). we provide an analytic formulation and introduce the physical quantities required to develop the dynamic subdivision surface model which can be interactively deformed by applying synthesized forces in real time. the governing dynamic differential equation is derived using lagrangian mechanics and a finite element discretization. our experiments demonstrate that this new dynamic model has a promising future in computer graphics, geometric shape design and scientific visualization. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "human computer interaction, graphics and virtual reality"
            }
        ]
    },
    {
        "id": "cora_test_14359",
        "graph": {
            "node_idx": 14359,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                14359,
                22291
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: on the rapid computation of various polylogarithmic constantswe give algorithms for the computation of the d-th digit of certain transcendental numbers in various bases. these algorithms can be easily implemented (multiple precision arithmetic is not needed), require virtually no memory, and feature run times that scale nearly linearly with the order of the digit desired. they make it feasible to compute, for example, the billionth binary digit of log (2) or on a modest work station in a few hours run time. we demonstrate this technique by computing the ten billionth hexadecimal digit of , the billionth hexadecimal digits of 2 ; log(2) and log 2 (2), and the ten billionth decimal digit of log(9=10). these calculations rest on the observation that very special types of identities exist for certain numbers like , 2 , log(2) and log 2 (2). these are essentially polylogarithmic ladders in an integer base. a number of these identities that we derive in this work appear to be new, for example the critical identity for : \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_14374",
        "graph": {
            "node_idx": 14374,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    1,
                    7,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    4,
                    4
                ]
            ],
            "node_list": [
                14374,
                14477,
                14375,
                14379,
                13349,
                14418,
                14377,
                13352,
                14442
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a prototype voice-response questionnaire for the u.s. census for spoken language understandingthis paper describes a study conducted to determine the feasibility of using a spoken questionnaire to collect information for the year 2000 census in the usa. to refine the dialogue and to train recognizers, we collected complete protocols from over 4000 callers. for the responses labeled (about half), over 99 percent of the answers contain the desired information. the recognizers trained so far range in performance from 75 percent correct on year of birth to over 99 percent for marital status. we developed a prototype system that engages the callers in a dialogue to obtain the desired information, reviews the recognized information at the end of the call, and asks the caller to identify the response categories that are incorrect. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_14377",
        "graph": {
            "node_idx": 14377,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "node_list": [
                14377,
                14382,
                22355,
                22331
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: cslush: an extendible research environmentthe cslu shell (cslush), is a collection of modular building blocks which aim to provide the user with a powerful, extendible, research, development and implementation environment. implemented in c with standardized tcl/tk interfaces to provide a scripting and visualization environment, it allows a flexible cast for both research algorithms and system deployment. this shell is the architecture on which the cslu toolkit is built and may be downloaded for non-commercial use from http://www.cse.ogi.edu/cslu/toolkit. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_14397",
        "graph": {
            "node_idx": 14397,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "node_list": [
                14397,
                13347,
                13352,
                14477,
                14395,
                22308,
                22333,
                14411
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multi-language speech database: creation and phonetic labeling agreement for spoken language understandingthe focus of the paper is the evaluation of inter-labeler reliability on broad phonetic transcriptions when la-belers do not necessarily know the language they are labeling. we provide an analysis of label disagreements, presenting results from six languages, english, french, german, japanese, spanish, and vietnamese with a total of 2 minutes of continuous labeled speech. labeler agreement across languages ranges from 41 percent with detailed label to label comparisons to 91 percent when less fine comparisons were made. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_14441",
        "graph": {
            "node_idx": 14441,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                14441,
                13349,
                13352,
                14442
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: transition-based feature extraction within frame-based recognitioncurrent frame-based speech recognition systems sample speech at a fixed set of locations relative to each frame. modeling the temporal dynamic behavior of speech is thereby complicated. this work shows that by explicitly using transitional information when extracting features, one can better model the acoustic phonetic structure, resulting in higher word level recognition performance. in this proposed approach, features representing local transitional information are used (a constant number of features are selected at each time frame, but the features are sampled near areas of greatest spectrum change within a relatively long window.) by explicitly modeling transitions in this way, we can also model local contextual information. using this technique, the word level error rate decreased up to 30% on the databases we tested. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_14488",
        "graph": {
            "node_idx": 14488,
            "edge_index": [
                [
                    1,
                    2,
                    2,
                    0,
                    3,
                    1,
                    2,
                    0,
                    4
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                14488,
                15660,
                12566,
                12565,
                23697
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: software process validation: quantitatively measuring the correspondence of a process to a modeluniversity of colorado department of computer science technical report cu-cs-840-97 may 1997 abstract to a great extent, the usefulness of a formal model of a software process lies in its ability to accurately predict the behavior of the executing process. similarly, the usefulness of an executing process lies largely in its ability to fulfill the requirements embodied in a formal model of the process. when process models and process executions diverge, something significant is happening. we have developed techniques for uncovering and measuring the discrepancies between models and executions, which we call process validation. process validation takes a process execution and a process model, and measures the level of correspondence between the two. our metrics our tailorable and give process engineers control over determining the severity of different types of discrepancies. the techniques provide detailed information once a high-level measurement indicates the presence of a problem. we have applied our process validation methods in an industrial case study, of which a portion is described in this paper. this work was supported in part by the national science foundation under grant ccr-93-02739 and by the air force material command, rome laboratory, and the defense advanced research projects agency under contract number f30602-94-c-0253. the content of the information does not necessarily reflect the position or the policy of the government and no official endorsement should be inferred. c fl 1997 jonathan e. cook and alexander l. wolf \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, software development"
            }
        ]
    },
    {
        "id": "cora_test_14537",
        "graph": {
            "node_idx": 14537,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                14537,
                13410,
                13412,
                21421
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a concurrency mechanism for sequential eiffelthis paper describes a set of classes designed to facilitate concurrent programming using the sequential object-oriented language eiffel. the design and implementation presented here is the application of a more general concurrency model we have built to introduce concurrency to sequential oopls. the model views concurrency as a well-defined, inheritable property of objects specified in the class concurrency, and provides a methodology using inheritance to write concurrent object-orient applications. key ideas involved in the methodology are: active objects, extensibility of protocols, synchronization programming, data-driven synchronization with asynchronous message passing. the novel feature of our work is in its describing concurrency in the context of sequential programming and using a object-oriented design methodology to describe and implement it. we illustrate the usefulness and expressiveness of the concurrency mechanism by presenting examples and analyzing them. the ability to express powerful synchronization constraints as reusable software components emerges as a strong point of our implementation. fl this research has been supported by the lawrence liver-more national labs; grant no: iscr/llnl 89-22,90-22 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_14613",
        "graph": {
            "node_idx": 14613,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                14613,
                2940,
                10206,
                16700,
                3578,
                23043,
                19150,
                22513,
                22936,
                22941,
                22942,
                15191,
                22946
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: enhancing the performance and dependability of real-time systemsthe imprecise-computation technique was proposed as a way to handle transient overloads and enhance the dependability of real-time systems. in a system based on this technique, each time-critical task produces an approximate but usable result whenever a failure or overload prevents the system from producing a precise result. this approach makes meeting deadlines easier, increases the availability of data and services, reduces the need for error-recovery operations, and minimizes the costs in replication. in this paper, we provide an overview of ways to implement and schedule imprecise computations. we then describe the imprecise computation server (ics) and how it is used to ensure real-time performance of time-critical applications. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_14616",
        "graph": {
            "node_idx": 14616,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    1,
                    3,
                    4,
                    1,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    3,
                    3,
                    3
                ]
            ],
            "node_list": [
                14616,
                14615,
                22786,
                9448,
                18653
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a new approach to computing optimal schedules for the job-shop scheduling problemfrom a computational point of view, the job-shop scheduling problem is one of the most notoriously intractable n p-hard optimization problems. in spite of a great deal of substantive research, there are instances of even quite modest size for which it is beyond our current understanding to solve to optimality. we propose several new lower bounding procedures for this problem, and show how to incorporate them into a branch-and-bound procedure. unlike almost all of the work done on this problem in the past thirty years, our enumerative procedure is not based on the disjunctive graph formulation, but is rather a time-oriented branching scheme. we show that our approach can solve most of the standard benchmark instances, and obtains the best known lower bounds on each. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_14662",
        "graph": {
            "node_idx": 14662,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                14662,
                14648,
                22500,
                23043,
                23044,
                22487,
                8941
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: rtsynchronizer: language support for real-time specifications in distributed systems how real-time constraints for periodic events,we argue that the specification of an object's functional behavior and the timing constraints imposed on it may be separated. specifically, we describe rtsynchronizer, a high-level programming language construct for specifying real-time constraints between objects in a distributed concurrent system. during program execution, rtsynchronizers affect the scheduling of distributed objects to enforce real-time relations between events. objects in our system are defined in terms of the actor model extended with timing assumptions. separation of the functional behaviors of actors and the timing constraints on patterns of actor invocation provides at least three important advantages. first, it simplifies code development by separating design concerns. second, multiple timing constraints can be independently specified and composed. and finally, a specification of timing constraints can be reused even if the representation of the functional behavior of actors has changed, and conversely. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_14698",
        "graph": {
            "node_idx": 14698,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    3,
                    1,
                    7
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "node_list": [
                14698,
                9766,
                11567,
                14693,
                14664,
                21950,
                21952,
                22964
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an open visual model for object-oriented operating systemswe present an \"open\" visual model for object-oriented operating systems that supports browsing, manipulation, and programming. the model exploits the reification of all operating system mechanisms and policies as classified objects to provide interactive visualization, evaluation, and configuration of specialized services and features. the model supports exploration of the dynamic interaction of subsystems within the operating system including comparisons between the abstract architectural properties of the system like its design patterns[5] and specific specializations and customizations of the implementation. this paper describes various visualization experiments and actual experiences of using an implementation of our approach in the choices object-oriented operating system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_15208",
        "graph": {
            "node_idx": 15208,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "node_list": [
                15208,
                22952,
                15204,
                1488,
                22955
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: chapter 1 modularity, reuse and efficiency with message-driven librariessoftware re-use via libraries is a strategy that allows the cost of software to be amortized. a parallel programming system must support the ability to develop modules that can be \"fitted together\" in a variety of contexts. although it is important to be able to reuse parallel libraries, it is also more difficult to use parallel modules in comparison to sequential module. we present a methodology for developing libraries that addresses these issues effectively. the methodology, which is embodied in the charm system, employs message-driven execution (in contrast to traditional, receive based message passing), information sharing abstractions, the notion of branched objects, and explicit support for modules. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_15289",
        "graph": {
            "node_idx": 15289,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                15289,
                23009
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: classifying with gaussian mixtures and clustersin this paper, we derive classifiers which are winner-take-all (wta) approximations to a bayes classifier with gaussian mixtures for class conditional densities. the derived classifiers include clustering based algorithms like lvq and k-means. we propose a constrained rank gaussian mixtures model and derive a wta algorithm for it. our experiments with two speech classification tasks indicate that the constrained rank model and the wta approximations improve the performance over the unconstrained models. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_15499",
        "graph": {
            "node_idx": 15499,
            "edge_index": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1,
                    1
                ]
            ],
            "node_list": [
                15499,
                13735,
                9111,
                21722
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: iterative flow analysiscontrol and data flow information is vital for the optimization of high level programming languages. language features such as object-orientation and first class functions and selectors link data flow and control flow. for example, in an object-oriented program an object's run time type is used to determine the function (method) executed at an invocation point via dynamic dispatch. we present an iterative analysis which derives control and data flow information simultaneously. this analysis adapts to the structure of the program, efficiently deriving flow information at a cost proportional to the precision of the information obtained. the analysis results are directly applicable to such optimizations as static binding, inlining and unboxing. this analysis has been implemented in the illinois concert compiler, and we report quantitative results for a number of object-oriented programs. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_15654",
        "graph": {
            "node_idx": 15654,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                15654,
                23366
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a comparison of some schemes for translating logic to c.the general improvement of c compilers, and some new non standard features of gcc have made it more attractive to compile (logic) to c: it is no longer unthinkable that the speed of a native code optimizer can be matched and even beaten by a scheme that compiles to c and lets most of the hard work be done by the c compiler. the new features, especially gcc's treatment of labels as first class types, are a clear invitation to abandon native code generators. also, the possibility to assign hardware registers to global variables looks attractive at first sight. three schemes for exploiting a c compiler in the compilation of different languages, are examined and their effectiveness is measured. the conclusion is that it is probably better not to make use of all the features gcc offers. we also show that if c compilers were a bit smarter about compiling the c switch statement, compliance to standard c would become even more attractive. the measurements were done on different risc platforms and the conclusions seem to hold generally. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_15701",
        "graph": {
            "node_idx": 15701,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                15701,
                23414
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an abductive framework for generalized logic programs: preliminary reportwe present an abductive semantics for generalized propositional logic programs which defines the meaning of a logic program in terms of its extensions. this approach extends the stable model semantics for normal logic programs in a natural way. the new semantics is equivalent to stable semantics for a logic program p whenever p is normal and has a stable model. the existence of extensions is guaranteed for all normal programs. the semantics can be applied without further modification to generalized logic programs where disjunctions and negation signs may appear in the head of rules. our approach is based on an idea recently proposed by konolige for causal reasoning. instead of maximizing in abduction the set of used hypotheses alone we maximize the union of the used and refuted hypotheses. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_15845",
        "graph": {
            "node_idx": 15845,
            "edge_index": [
                [
                    1,
                    2,
                    3,
                    4,
                    2,
                    3,
                    4
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "node_list": [
                15845,
                15849,
                15850,
                23547,
                23546
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: simple objects for standard mlthis paper proposes a new approach to adding objects to the statically-typed, higher-order language standard ml. our approach sacrifices some of the expressiveness found in recently proposed schemes for typing object-oriented features, but by doing so, we avoid a tremendous amount of complexity in the type system. in fact, our system is a conservative extension of the sml type system, and preserves the important properties of sml: sound static typing, and type inference. our approach is based on introducing object types, which have an explicitly declared subtyping hierarchy, and object constructors. just as datatype constructors are used to guide type inference of recursive types, we use object type constructors to guide the inference of subtyping. the introduction of object constructors also has the effect of generalizing the sml case statement to be a typecase on object types. using this mechanism, we can often recover type information that our type system cannot preserve statically. in addition to describing the features of oml, the paper includes examples of how features found in other object-oriented languages can be emulated in oml. it also discusses the formal properties of oml, and some of the implementation issues. keywords: programming language design, object-oriented programming, functional programming, standard ml. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_16050",
        "graph": {
            "node_idx": 16050,
            "edge_index": [
                [
                    1
                ],
                [
                    0
                ]
            ],
            "node_list": [
                16050,
                23720
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: software architectures for reducing priority inversion and non-determinism in real-time object request brokersthere is increasing demand to extend object request broker (orb) middleware to support distributed applications with stringent real-time requirements. however, conventional orb implementations, such as corba orbs, exhibit substantial priority inversion and non-determinism, which makes them unsuitable for applications with deterministic real-time requirements. this paper provides two contributions to the study and design of real-time orb middleware. first, it illustrates empirically why conventional orbs do not yet support real-time quality of service. second, it evaluates connection and concur-rency software architectures to identify strategies that reduce priority inversion and non-determinism in real-time corba orbs. the results presented in this paper demonstrate the feasibility of using standard oo middleware like corba to support certain types of real-time applications over the internet. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_16487",
        "graph": {
            "node_idx": 16487,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                16487
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a systematic description of greedy optimisation algorithms for cost sensitive generalisationthis paper defines a class of problems involving combinations of induction and (cost) optimisation. a framework is presented that systematically describes problems that involve construction of decision trees or rules, optimising accuracy as well as measurement- and misclassification costs. it does not present any new algorithms but shows how this framework can be used to configure greedy algorithms for constructing such trees or rules. the framework covers a number of existing algorithms. moreover, the framework can also be used to define algorithm configurations with new functionalities, as expressed in their evaluation functions. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_16510",
        "graph": {
            "node_idx": 16510,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                16510
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: digging for peace: using machine learning methods for assessing international conflict databasesin the last decade research in machine learning has developed a variety of powerful tools for inductive learning and data analysis. on the other hand, research in international relations has developed a variety of different conflict databases that are mostly analyzed with classical statistical methods. as these databases are in general of a symbolic nature, they provide an interesting domain for application of machine learning algorithms. this paper gives a short overview of available conflict databases and subsequently concentrates on the application of machine learning methods for the analysis and interpretation of such databases. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_16642",
        "graph": {
            "node_idx": 16642,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                16642
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the evaluation of anapron: a case study in evaluating a case-based systemthis paper presents a case study in evaluating a case-based system. it describes the evaluation of anapron, a system that pronounces names by a combination of rule-based and case-based reasoning. three sets of experiments were run on anapron: a set of exploratory measurements to profile the system's operation; a comparison between anapron and other name-pronunciation systems; and a set of studies that modified various parts of the system to isolate the contribution of each. lessons learned from these experiments for cbr evaluation methodology and for cbr theory are discussed. this work may not be copied or reproduced in whole or in part for any commercial purpose. permission to copy in whole or in part without payment of fee is granted for nonprofit educational and research purposes provided that all such whole or partial copies include the following: a notice that such copying is by permission of mitsubishi electric research laboratories of cambridge, massachusetts; an acknowledgment of the authors and individual contributions to the work; and all applicable portions of the copyright notice. copying, reproduction, or republishing for any other purpose shall require a license with payment of fee to mitsubishi electric research laboratories. all rights reserved. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_16648",
        "graph": {
            "node_idx": 16648,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                16648
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a case-based reasoning approach to learning controlmost successful robotic manipulators are precise, fast, smooth and have high repeatability. their major drawback is their tendency to have only a limited repertoire of movements that can only be extended by costly inverse kinematic calculations or direct teaching. our approach also starts with a limited repertoire of movements, but can incrementally add new positions and thus allows for higher flexibility. the proposed architecture is experimentally evaluated on two real world domains, albeit simple, and the results are compared to other machine learning algorithms applied to the same problem. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_16814",
        "graph": {
            "node_idx": 16814,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                16814
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: strategic planning for imperfect-information gamesalthough game-tree search works well in perfect-information games, there are problems in trying to use it for imperfect-information games such as bridge. the lack of knowledge about the opponents' possible moves gives the game tree a very large branching factor, making the tree so immense that game-tree searching is infeasible. in this paper, we describe our approach for overcoming this problem. we develop a model of imperfect- information games, and describe how to represent information about the game using a modified version of a task network that is extended to represent multi-agency and uncertainty. we present a game- playing procedure that uses this approach to generate game trees in which the set of alternative choices is determined not by the set of possible actions, but by the set of available tactical and strategic schemes. in our tests of this approach on the game of bridge, we found that it generated trees having a much smaller branching factor than would have been generated by conventional game-tree search techniques. thus, even in the worst case, the game tree contained only about 1300 nodes, as opposed to the approximately 6:01 fi 10 44 nodes that would have been produced by a brute-force game tree search in the worst case. furthermore, our approach successfully solved typical bridge problems that matched situations in its knowledge base. these preliminary tests suggest that our approach has the potential to yield bridge-playing programs much better than existing ones|and thus we have begun to build a full implementation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_16840",
        "graph": {
            "node_idx": 16840,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                16840
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hierarchical concurrent finite state machines in ptolemywe implement a finite state machine (fsm) domain for specifying and simulating control functionality of a system within the ptolemy software environment. the fsm domain is successfully integrated with synchronous data- ow (sdf) and discrete-event (de) concurrency domains in ptolemy. in this heterogeneous combination, the semantics of fsm, concurrency and hierarchy are naturally supported in a manner similar to hierarchical concurrent fsms (hcfsms). unlike most formalisms that support hcfsms, such as statecharts and its variants, our scheme decouples the fsm from the concurrency models, enabling selection of the most appropriate concurrency model for the problem at hand. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_17055",
        "graph": {
            "node_idx": 17055,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17055
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the chinook hardware/software co-synthesis system 1technical report 95-03-04 march 14, 1994 \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_17089",
        "graph": {
            "node_idx": 17089,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17089
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: composer: a case based reasoning system for engineering designthe complex domain of engineering design poses many challenges when attempting to automate the process. the frequent use of past experience by human engineers when solving new problems has led to an interest in the use of case based reasoning (cbr) to help automate engineering design. in order to create a case based reasoning system that is useful for complex domains, the problem of adaptation, or changing existing solutions to meet new problem requirements, must be addressed, as it is critical to ensure that a case based reasoner is more than just a storage and retrieval tool. in engineering design it often occurs that many past experiences must be combined to solve a new problem, and thus the process of adaptation must efficiently and systematically combine information from many sources. we have developed a methodology for case combination that allows its application across a wide range of problems by choosing a constraint satisfaction algorithm to achieve the combination. we have shown that our approach provides an efficient adaptation methodology that ensures convergence upon a solution if one exists, provides a uniform representation of cases, and is generalizable beyond just one domain. in addition, choosing the constraint satisfaction formalism to accomplish adaptation has provided interesting observations in the often problematic areas of accomplishing problem decomposition and assessing case adaptability. our technique is implemented in a case based reasoning system called composer, which has been tested in two design domains: assembly sequence design and configuration design. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_17103",
        "graph": {
            "node_idx": 17103,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17103
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: feature recognition for interactive applications: exploiting distributed resourcesthe availability of low-cost computational power is enabling development of increasingly sophisticated cad software. automation of design and manufacturing activities poses many difficult computational problems. design is an interactive process and speed is a critical factor in systems that enable designers to explore and experiment with alternative ideas. as more downstream manufacturing activities are considered during the design phase, computational costs become problematic. achieving interactivity requires a sophisticated allocation of computational resources in order to perform realistic design analyses and generate feedback in real time. this paper presents our initial efforts to use distributed algorithms to recognize machining features from solid models of parts with large numbers of features and many geometric and topological entities. our goal is to outline how significant improvements in computation time can be obtained using existing hardware and software tools. an implementation of our approach is discussed. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_17131",
        "graph": {
            "node_idx": 17131,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17131
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: using case-based reasoning for mobile robot navigationthis paper presents an approach to mobile robot path planning using case-based reasoning together with map-based path planning. the map-based path planner is used to seed the case-base with innovative solutions. the casebase stores the paths and the information about their traversability. while planning the route those paths are preferred that according to the former experience are least risky. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_17153",
        "graph": {
            "node_idx": 17153,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17153
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: automatische identifizierung spontan gesprochener sprachen mit neuronalen netzen automatische identifikation von sprachen (lid) ist einbuilding multilingual speech recognition and translation systems. in this paper we present a front-end module to identify one out of four languages german, english, spanisch and japanese for use in spontaneous speech-to-speech translation systems like janus. we compare two different approaches to classify the speech data, on the one hand we used the maximum likelihood method on the other hand neuronal networks. it can be shown, that neuronal nets leads to better results which is overall 86% for the four language test. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_17219",
        "graph": {
            "node_idx": 17219,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17219
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: becoming an expert case-based reasoner: learning to adapt prior casesexperience plays an important role in the development of human expertise. one computational model of how experience affects expertise is provided by research on case-based reasoning, which examines how stored cases encapsulating traces of specific prior problem-solving episodes can be retrieved and re-applied to facilitate new problem-solving. much progress has been made in methods for accessing relevant cases, and case-based reasoning is receiving wide acceptance both as a technology for developing intelligent systems and as a cognitive model of a human reasoning process. however, one important aspect of case-based reasoning remains poorly understood: the process by which retrieved cases are adapted to fit new situations. the difficulty of encoding effective adaptation rules by hand is widely recognized as a serious impediment to the development of fully autonomous case-based reasoning systems. consequently, an important question is how case-based reasoning systems might learn to improve their expertise at case adaptation. we present a framework for acquiring this expertise by using a combination of general adaptation rules, introspective reasoning, and case-based reasoning about the case adaptation task itself. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_17232",
        "graph": {
            "node_idx": 17232,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17232
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: termination of ada tasks in hardwarea highly parallel algorithm for termination of ada tasks is suggested. the algorithm is intended for hardware implementation in order to overcome the complexity of recursive software algorithms. high efficiency and determinism is expected to be achieved with a hardware implementation. a vhdl implementation of termination units is presented together with simulations that show that the termination condition can be evaluated in constant time. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_17302",
        "graph": {
            "node_idx": 17302,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17302
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: introduction to the literature on programming language designkeywords: programming languages, semantics, type systems, polymorphism, type theory, data abstraction, functional programming, object-oriented programming, logic programming, declarative programming, parallel and distributed programming languages. 1992 cr categories: d.1.1 [programming techniques] applicative (functional) programming; d.1.3 [programming techniques] concurrent programming; d.1.5 [programming techniques] object-oriented programming; d.1.6 [programming techniques] logic programming; d.2.2 [software engineering] tools and techniques | modules and interfaces; d.2.4 [software engineering] program verification; d.2.4 [software engineering] program verification; d.3.1 [programming languages] formal definitions and theory; d.3.2 [programming languages] language classifications; d.3.3 [programming languages] language constructs and features; f.3.1 [logics and meaning of programs] specifying and verifying and reasoning about programs; f.3.2 [logics and meaning of programs] semantics of programming languages; f.3.3 [logics and meaning of programs] studies of program constructs; h.2.3 [database management ] languages|database (persistent) programming languages; i.2.5 [artificial intelligence] programming languages and software. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_17390",
        "graph": {
            "node_idx": 17390,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17390
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: machine recognition of auslan signs using powergloves: towards large-lexicon recognition of sign languageinstrumented gloves use a variety of sensors to provide information about the user's hand. they can be used for recognition of gestures; especially well-defined gesture sets such as sign languages. however, recognising gestures is a difficult task, due to intrapersonal and interpersonal variations in performing them. one approach to solving this problem is to use machine learning. in this case, samples of 95 discrete australian sign language (auslan) signs were collected using a power-glove. two machine learning techniques were applied - instance-based learning (ibl) and decision-tree learning to the data after some simple features were extracted. accuracy of approximately 80 per cent was achieved using ibl, despite the severe limitations of the glove. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_17433",
        "graph": {
            "node_idx": 17433,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17433
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: knowledge compilation and speedup learning in continuous task domainsmany techniques for speedup learning and knowledge compilation focus on the learning and optimization of macro-operators or control rules in task domains that can be characterized using a problem-space search paradigm. however, such a characterization does not fit well the class of task domains in which the problem solver is required to perform in a continuous manner. for example, in many robotic domains, the problem solver is required to monitor real-valued perceptual inputs and vary its motor control parameters in a continuous, on-line manner to successfully accomplish its task. in such domains, discrete symbolic states and operators are difficult to define. to improve its performance in continuous problem domains, a problem solver must learn, modify, and use continuous operators that continuously map input sensory information to appropriate control outputs. additionally, the problem solver must learn the contexts in which those continuous operators are applicable. we propose a learning method that can compile sensorimo-tor experiences into continuous operators, which can then be used to improve performance of the problem solver. the method speeds up the task performance as well as results in improvements in the quality of the resulting solutions. the method is implemented in a robotic navigation system, which is evaluated through extensive experimen tation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_17448",
        "graph": {
            "node_idx": 17448,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17448
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: new error bounds for the linear complementarity problemrecently [mas93] it was shown that every nonlinear complementarity problem (ncp) is equivalent to the unconstrained minimization of a certain implicit lagrangian. in particular, it was shown that this implicit lagrangian is nonnegative everywhere and its set of zeros coincides with the solution set of the original ncp. in this paper, we consider the linear complementarity problem (lcp), and show that the distance to the solution set of the lcp from any point sufficiently close to the set can be bounded above by the square root of the implicit lagrangian for the lcp. in other words, the square root of the implicit lagrangian is a local error bound for the lcp. our proof is based on showing that the square root of the implicit lagrangian is equivalent to the residual function used in a known local error bound [rob81, lut92b]. when the matrix associated with the lcp is nondegenerate, the new error bound is in fact global. this extends the error bound result [map90] for the lcp with a p-matrix. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_17459",
        "graph": {
            "node_idx": 17459,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17459
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an application of distributed solid modeling: feature recognition implemented on a network of sun workstationsthe availability of low-cost computational power is a driving force behind the growing sophistication of cad software. tools designed to reduce time-consuming build-test-redesign iterations are essential for increasing engineering quality and productivity. however, automation of the design process poses many difficult computational problems. as more downstream engineering activities are being considered during the design phase, guaranteeing reasonable response times within design systems becomes problematic. design is an interactive process and speed is a critical factor in systems that enable designers to explore and experiment with alternative ideas during the design phase. achieving interactivity requires an increasingly sophisticated allocation of computational resources in order to perform realistic design analyses and generate feedback in real time. this paper presents our initial efforts to develop techniques to apply distributed algorithms to the problem of recognizing machining features from solid models. existing work on recognition of features has focused exclusively on serial computer architectures. our objective is to show that distributed algorithms can be employed on realistic parts with large numbers of features and many geometric and topological entities to obtain significant improvements in computation time using existing hardware and software tools. migrating solid modeling applications toward a distributed computing framework enables interconnection of many of the autonomous and geographically diverse software tools used in the modern manufacturing enterprise. fl this work was supported in part by nsf grants iri9306580, ddm-9201779, eec 94-02384 and a forgivable loan from general electric corporation awarded to the first author. any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the national science foundation. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "operating systems, realtime"
            }
        ]
    },
    {
        "id": "cora_test_17551",
        "graph": {
            "node_idx": 17551,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17551
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: higher order generalizationgeneralization is a fundamental operation of inductive inference. while first order syntactic generalization (anti-unification) is well understood, its various extensions are needed in applications. this paper discusses syntactic higher order generalization in a higher order language 2[1]. based on the application ordering, we proved the least general generalization exists and is unique up to renaming. an algorithm to compute the least general generalization is presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_17730",
        "graph": {
            "node_idx": 17730,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17730
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: from instances to rules: a comparison of biasesrise is an algorithm that combines rule induction and instance-based learning (ibl). it has been empirically verified to achieve higher accuracy than state-of-the-art representatives of its parent approaches in a large number of benchmark problems. this paper investigates the conditions under which rise's bias will be more appropriate than that of the pure approaches, through experiments in carefully controlled artificial domains. rise's advantage compared to pure rule induction increases with increasing concept specificity. rise's advantage compared to pure ibl is greater when the relevance of features is context-dependent (i.e., when some of the features used to describe examples are relevant only given other features' values). the paper also reports lesion studies and other empirical observations showing that rise's good performance is indeed due to its combination of rule induction and ibl, and not to the presence of either component alone. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_17980",
        "graph": {
            "node_idx": 17980,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                17980
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: powers of treeswe present the first polynomial algorithm for recognizing tree powers. a graph g is a tree power if there is a tree t and a positive integer k such that t k ~ = g where x and y are adjacent in t k if and only if d t (x; y) k. we also show that a natural extension of tree power recognition is np-complete, namely, given a graph g and a positive integer r, determine if there is a tree power within r edges of g. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_18031",
        "graph": {
            "node_idx": 18031,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18031
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: dynamic interpretations of constraint-based grammar formalismswe present a rendering of some common grammatical formalisms in terms of evolving algebras. though our main concern in this paper is on constraint-based formalisms, we also discuss the more basic case of context-free grammars. our aim throughout is to highlight the use of evolving algebras as a specification tool to obtain grammar formalisms. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_18073",
        "graph": {
            "node_idx": 18073,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18073
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a problem in automated reasoning: simplifying formulas of classical logicsome important ideas in logical ai, such as circumscription, are described by syntactic transformations that produce logical formulas, and the result of such a transformation often needs to be simplified. this is a collection of notes and examples related to the problem of simplifying formulas of classical logic. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_18099",
        "graph": {
            "node_idx": 18099,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18099
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the frame problem in object-oriented specifications: an exhibition of problems and approaches assumption that thingswe present first a series of examples involving the development of information systems, which suggest a number of desirable features for object-oriented specification techniques, especialy those supporting inheritance. most of these features have difficulties with the so-called frame axioms | assertions which state what values have been left unchanged by some procedure. we then examine the benefits and disadvantages of a variety of proposals for dealing with the frame problem, some of which are based on ideas presented earlier in the literature, while others are novel. the approaches are grouped into two families: one which introduces notational conventions/abbreviation for stating frame axioms, and one which embeds them into the language semantics. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_18111",
        "graph": {
            "node_idx": 18111,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18111
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: the twofold integration of cbr in decision support systemsthis short paper presents our experience in facing different levels of integration of cbr techniques with other system components and techniques inside decision support systems for controlling environmental emergencies. the integration requirement at the level of system components is distinguished from the integration requirements at the level of specific steps in the cbr problem solving cycle. we describe how these aspects have been dealt inside two systems, charade and car-ica, and point out the influence of this work on our current activity. keywords: interactive planning, constraint satisfaction problem, feature weighting. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, machine learning, case-based"
            }
        ]
    },
    {
        "id": "cora_test_18136",
        "graph": {
            "node_idx": 18136,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18136
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: stochastic pronunciation modelling from hand-labelled phonetic corporain the early '90s, the availability of the timit read-speech phonetically transcribed corpus led to work at at&t on the automatic inference of pronunciation variation. this work, briefly summarized here, used stochastic decisions trees trained on phonetic and linguistic features, and was applied to the darpa north american business news read-speech asr task. more recently, the icsi spontaneous-speechphonetically transcribed corpus was collected at the behest of the 1996 and 1997 lvcsr summer workshops held at johns hopkins university. a 1997 workshop (ws97) group focused on pronunciation inference from this corpus for application to the dod switchboard spontaneous telephone speech asr task. we describe several approaches taken there. these include (1) one analogousto the at&t approach, (2) one, inspired by work at ws96 and cmu, that involved adding pronunciation variants of a sequence of one or more words (`mul-tiwords') in the corpus (with corpus-derived probabilities) into the asr lexicon, and (1+2) a hybrid approach in which a decision-tree model was used to automatically phonetically transcribe a much larger speech corpus than icsi and then the multiword approach was used to construct an asr recognition pronunciation lexicon. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_18163",
        "graph": {
            "node_idx": 18163,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18163
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: multicuts in unweighted graphs with bounded degree and bounded tree-widththe multicut problem can be defined as: given a graph g and a collection of pairs of distinct vertices (s i ; t i ) of g, find a minimum set of edges of g whose removal disconnects each s i from the corresponding t i . the fractional multicut problem is the dual of the well-known multicommodity flow problem. multicut is known to be np-hard and max snp-hard even when the input graph is restricted to being a tree. the main result of the paper is a polynomial-time approximation scheme (ptas) for multicut in unweighted graphs with bounded degree and bounded tree-width. that is, for any * &gt; 0, we present a polynomial-time (1 + *)-approximation algorithm. in the particular case when the input is a bounded-degree tree, we have a linear-time implementation of the algorithm. we also provide some hardness results. we prove that multicut is still np-hard for binary trees and that it is max snp-hard if we relax any of the three condition (unweighted, bounded-degree, bounded tree-width). we also show that some of these results extend to the vertex version of multicut. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, games and search"
            }
        ]
    },
    {
        "id": "cora_test_18198",
        "graph": {
            "node_idx": 18198,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18198
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: abstract diagnosiswe show how declarative diagnosis techniques can be extended to cope with verification of operational properties, such as computed and correct answers, and of abstract properties, such as depth(k) answers and ground-ness dependencies. the extension is achieved by using a simple semantic framework, based on abstract interpretation. the resulting technique (abstract diagnosis) leads to elegant bottom-up and top-down verification methods, which do not require to determine the symptoms in advance, and which are effective in the case of abstract properties described by finite domains. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_18223",
        "graph": {
            "node_idx": 18223,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18223
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: observational equivalences for logic programs 1we first introduce a general semantic scheme for logic programs which provides a uniform framework for defining different compositional semantics parametrically wrt a given notion of observable. the equivalence of the operational (top-down) and fixpoint (bottom-up) costruction of the semantics is ensured by the scheme (provided a congruence property is verified). we then define several observational equivalences on logic programs and investigate how they are related. the equivalences are based on various observables (successful derivations, computed answers, partial computed answers and call patterns) and on a notion of program composition. for each observational equivalence we study the relation with a suitable formal semantics, by investigating correctness and full abstraction properties. all the semantics we consider are obtained as instances of the general scheme. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_18264",
        "graph": {
            "node_idx": 18264,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18264
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: development of sri's 1997 broadcast news transcription systemthis paper describes sri's 1997 broadcast news transcription system used for the 1997 darpa h4 evaluations. our system had several novel components. these include automatic segmentation of entire broadcast shows, word-internal and crossword acoustic models robustly estimated with a new gaussian merging-splitting (gms) algorithm, the use of trigram language models (lms) in lattices instead of for rescoring n-best lists, and an lm pruning algorithm that allows efficient representation of high-order (like 4- or 5-gram) lms. we briefly describe these features and give comparative experimental results. we achieved a 18.7% relative improvement in performance on our 1996 h4 partitioned evaluation (pe) development test set as compared to our 1996 h4 pe evaluation system. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_18450",
        "graph": {
            "node_idx": 18450,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18450
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: an automatic method for learning a japanese lexicon for recognition of spontaneous speechwhen developing a speech recognition system, one must start by deciding what the units to be recognized should be. this is for the most part a straightforward choice in the case of word-based languages such as english, but becomes an issue even in handling languages with a complex compounding system like german; with an agglutinative language like japanese, which provides no spaces in written text, the choice is not at all obvious. once an appropriate unit has been determined, the problem of consistently segmenting transcriptions of training data must be addressed. this paper describes a method for learning a lexicon from a training corpus which contains no word-level segmentation, applied to the problem of building a japanese speech recognition system. we show not only that one can satisfactorily segment transcribed training data automatically, avoiding human error, but also that our system, when trained with the automatically segmented corpus, showed a significant improvement in recognition performance. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_18507",
        "graph": {
            "node_idx": 18507,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18507
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: taylor's scheme for unbound variables by taylor: that aliased unbound variables are represented as circularupmail technical report no. 116 october 25, 1995 issn 1100-0686 abstract we compare the proposed scheme to that of warren's abstract machine, and find that taylor's scheme (a) leads to increased trailing, (b) makes stack allocation more difficult, (c) requires more expensive copying of heap cells at times, and (d) has a more expensive variable binding mechanism. on the positive side, a very strong advantage is that taylor's scheme entirely dispenses with pointer chain dereferenc-ing. we conclude by enumerating the data flow properties a global an alyzer should find in order to eliminate these difficulties. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_18540",
        "graph": {
            "node_idx": 18540,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18540
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: enriching behavioral subtypingthe standard approach to dealing with oo polymorphism is to require subclasses to be behavioral subtypes of the base class. this ensures that reasoning that has been done about any client code that operates on base class objects will continue to be valid if instances of the subclasses are used in place of the base class objects. but often we are interested in stronger properties of the client code, in particular that its behavior will be appropriate to the specific subclass objects that are used, rather than just generic behavior that ignores the differences between the different subclasses. we present some examples to illustrate the problem, and propose a formal system that allows us to establish stronger properties of the client code on the basis of the richer behavior provided by the appropriate derived classes. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_18594",
        "graph": {
            "node_idx": 18594,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18594
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: higher-order polymorphic reusablethis paper explores how certain ideas in object oriented languages have their correspondents in functional languages. in particular we look at the analogue of the iterators of the c++ standard template library. we also give an example of the use of constructor classes which feature in haskell 1.3 and gofer. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_18659",
        "graph": {
            "node_idx": 18659,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18659
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: combining situation calculus and event calculusin this paper we study the differences between two logic theories for temporal reasoning, the situation calculus and the event calculus, and the implications of these differences. we construct a new formalism that combines the advantages of both situation and event calculus and avoids the problems of either. the new formalism is useful for general temporal reasoning in worlds with discrete and continuous change, and enables representation of a wide range of hypothetical temporal reasoning problems. we show that both situation and event calculus are instances of this new formalism. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_18784",
        "graph": {
            "node_idx": 18784,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18784
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: selective use of the speech spectrum and a vq-gmm method for speaker idthis paper describes two separate sets of speaker identification experiments. in the first set of experiments, the speech spectrum is selectively used for speaker identification. the results show that the higher portion of the speech spectrum contains more reliable idiosyncratic information on speakers than does the lower portion of equal bandwidth. in the second set of experiments, a vector-quantization based gaussian mixture models (vqgmms) is developed for text-independent speaker identification. the system has been evaluated in the recent speaker identification evaluation organized by nist. in this paper, details of the system design are given and the evaluation results are presented. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_18936",
        "graph": {
            "node_idx": 18936,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                18936
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: improving performance on switchboard by combining hybrid hme/hmm and mixture of gaussians acoustic modelsthis paper presents results of our efforts on combining standard mixture of gaussians acoustic modeling [10] with a context-dependent hybrid connectionist hme/hmm architecture [3, 4] for the switchboard corpus. using a score normalization scheme which is independent of the stream's modeling paradigm and adaptive methods for combining multiple probability distributions, we achieve a relative decrease in word error rate of 3.5% and 9.3%, compared to each of the single stream systems. as opposed to multiple acoustic streams based on mixture of gaussians, the integration of hybrid nn/hmm based modeling appears to be advantageous since the differences in modeling techniques and training algorithms allow to capture different aspects of the speech signal. small dependence among emission probability estimates is considered essential for potential gains in interpolated systems. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_19127",
        "graph": {
            "node_idx": 19127,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19127
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: bunches of objectswe describe how to specify object-oriented systems using the bunch notation [5] of predicative programming [6]. we specify class interfaces and definitions, static and dynamic collections of objects, methods, inheritance, and polymorphism, and use the approach in two examples. in the process, we consider limitations with the technique, and contrast it with using the z style of [4]. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_19179",
        "graph": {
            "node_idx": 19179,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19179
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a class based approach to domain adaptation and constraint integration for empirical m-gram modelsthe first class based adaptation approaches [fgh + 97, ueb97] take the use of classes in the construction of statistical m-gram models one significant step further than just using them as a smoothing technique: the m-gram of classes is trained on the large background corpus while the word likelihoods given the class are estimated on the small target corpus. to make full use of this technique a specialized clusteralgorithm has been developed [fgh + 97, ueb97]. in this paper we extend class adaptation to make use of the m-gram distribution of the target domain. as a second independent contribution this paper introduces an efficient morphing algorithm, that tries to achieve adaptation by using a stochastic mapping of words between the vocabularies of the respective domains. as a result we can show, that for small adaptation steps class based adaptation is a very useful technique. for larger adaptation steps the perplexity of the modified model is greatly improved, yet no improvement over the unadapted model was observed when used in linear interpolation. whether this is due to the fact that we use class based adaptation or that we do just modify the unigram distribution is still unresolved, although the new stochastic mapping technique might help to give an answer to this question in the future. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_19198",
        "graph": {
            "node_idx": 19198,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19198
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: ultraviolet: a constraint satisfaction algorithm for interactive graphicsultraviolet is a constraint satisfaction algorithm intended for use in interactive graphical applications. it is capable of solving constraints over arbitrary domains using local propagation, and inequality constraints and simultaneous linear equations over the reals. to support this, ultraviolet is a hybrid algorithm that allows different subsolvers to be used for different parts of the constraint graph, depending on graph topology and kind of constraints. in addition, ultraviolet and its subsolvers support plan compilation, producing efficient compiled code that can be evaluated repeatedly to resatisfy a given collection of constraints for different input values. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_19333",
        "graph": {
            "node_idx": 19333,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19333
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: constraint hierarchies and logic programmingconstraint logic programming (clp) is a general scheme for extending logic programming to include constraints. it is parameterized by d, the domain of the constraints. however, clp(d) languages, as well as most other constraint systems, only allow the programmer to specify constraints that must hold. in many applications, such as interactive graphics, page layout, and decision support, one needs to express preferences as well as strict requirements. if we wish to make full use of the constraint paradigm, we need ways to represent these defaults and preferences declaratively, as constraints, rather than encoding them in the procedural parts of the language. we describe a scheme for extending clp(d) to include both required and preferential constraints, with an arbitrary number of strengths of preference. we present some of the theory of such languages, and an algorithm for executing them. to test our ideas, we have implemented an interpreter for an instance of this language scheme with d equal to the reals. we describe our interpreter, and outline some examples of using this language. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_19352",
        "graph": {
            "node_idx": 19352,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19352
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: r some formal aspects of aklthe agents kernel language allows committed choice programming as well as nondeterministic logic programming based on the andorra principle (and combinations of these), with a considerable degree of parallelism. in the present report the akl computation model is formally defined and soundness and completeness results for a logical subset of akl are presented. the computation model is extended to cover ports, a medium of communication used in akl, and the solution collecting operation bagof. these extensions preserve the basic character of the computation model, and in particular the role played by the constraint theory. declarative interpretations of these constructs are introduced, and the limitations of these readings are discussed. finally, the confluence of strongly fair (possibly infinite) computations in a different subset of akl is proved. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_19396",
        "graph": {
            "node_idx": 19396,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19396
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: syntactic influence on prosodic phrasing in the framework of the link grammarthis paper presents a new theory of the influence of syntax upon prosodic phrasing. unlike previous theories which have used constituent tree structures in the analysis of syntax, this theory utilises the syntactic framework provided by either the link grammar or a dependency grammar. the use of the different syntactic framework leads to other important differences; the role of syntactic function is more important than that of syntactic structure, the relationship between syntax and prosodic phrasing is more direct, and the syntactic influence operates primarily from left to right. the paper presents evidence in support of the theory from experimental tests on two professionally read speech corpora; these tests show that the theory has significant predictive capability and is also effective in resolving syntactic ambiguities. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_19457",
        "graph": {
            "node_idx": 19457,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19457
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: ecl i ps e a platform for constraint logic programmingthis paper introduces the constraint logic programming (clp) platform ecl i ps e . ecl i ps e is designed to be more than an implementation of clp: it also supports mathematical programming and stochastic programming techniques. the crucial advantage of ecl i ps e is that it enables the programmer to use a combination of algorithms appropriate to the application at hand. this benefit results from the ecl i ps e facility to support fine-grained hybridisation. ecl i ps e is designed for solving difficult \"combinatorial\" industrial problems in the areas of planning, scheduling and resource allocation. the platform offers a conceptual modelling language for specifying the problem clearly and simply, in a way that is neutral as to the algorithm which will be used to solve it. based on the conceptual model it is easy to construct alternative design models, also expressed in ecl i ps e . a design model is a runnable program, whose execution in ecl i ps e employs a specific combination of algorithms. thus the platform supports experimentation with different hybrid algorithms. technically the different classes of algorithms mentioned above have two aspects: constraint handling, and search. various different constraint handling facilities are available as ecl i ps e libraries. these include finite domain propagation, interval propagation and linear constraint solving. in ecl i ps e the same constraint can be treated concurrently by several different handlers. with regard to search behaviour, clp and also mathematical programming typically impose new constraints at lower levels in the search tree. by contrast, stochastic techniques search for good solutions by locally repairing an original solution, and repeating the process again and again. ecl i ps e supports both kinds of search, and allows them to be combined \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, logic"
            }
        ]
    },
    {
        "id": "cora_test_19527",
        "graph": {
            "node_idx": 19527,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19527
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: found objects a pattern language for finding objects from within designsto design a program, first find your objects. unfortunately, the right objects are not easy to find, and as a result most programs are not as well designed as they could be. the patterns in this language describe how objects can found within existing programs. by using these patterns, programs and designs can be made more simple, more general, and more easy to change. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_19544",
        "graph": {
            "node_idx": 19544,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19544
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: towards a generic object model for multi-domain management towards a generic object model for multitoday, management of heterogeneous distributed networks is a non-trivial task requiring sophisticated management tools. in the telecommunications area snmp [7] and x.700 [3] are predominantly used while distributed object-oriented programming toolkits such as corba [6] or tina [8] are emerging as alternatives. therefore it would be beneficial to have a tool that lets programmers transparently access instances from several different object models. this paper presents a uniform generic object model (gom) [2] that can be employed to transparently manipulate instances from various specific object models. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_19619",
        "graph": {
            "node_idx": 19619,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19619
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: local type argument synthesis with bounded quantificationin a companion paper [pt98], we introduced a local type inference method for inferring type arguments to polymorphic functions. we show here how our method can be extended to handle cardelli and wegner's kernel fun variant of f . \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_19646",
        "graph": {
            "node_idx": 19646,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19646
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: trains-96 system evaluation cooperatively solve a given problem. success is measured in terms of taskin this report we describe an experiment designed to: * evaluate the performance of the trains-96 system as a whole * examine the utility of a new robust post-parser module, recently added to the trains system * explore the benefit to the user of receiving system feedback on speech input \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_19867",
        "graph": {
            "node_idx": 19867,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                19867
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: inheritance anomaly a formal treatmentinheritance is one of the key concepts in object-oriented programming (oop). however, the usefulness of inheritance in concurrent oop is greatly reduced by the inheritance anomalies. these anomalies have been subjected to intense research, but they are still only vaguely defined and often misunderstood. in this paper we show that concurrency is not the real cause of inheritance anomalies. we formally define the inheritance anomaly as a relationship between inheritance mechanisms and behavioural hierarchies. our framework can be used to analyse the occurrence of inheritance anomalies in many different paradigms. a formal definition of the problem and a clear exposition of its causes are pre-requisites for a successful integration of inheritance and concurrency. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_20191",
        "graph": {
            "node_idx": 20191,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                20191
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: user modeling for spoken dialogue system evaluationautomatic speech dialogue systems are becoming common. in order to assess their performance, a large sample of real dialogues has to be collected and evaluated. this process is expensive, labor intensive, and prone to errors. to alleviate this situation we propose a user simulation to conduct dialogues with the system under investigation. using stochastic modeling of real users we can both debug and evaluate a speech dialogue system while it is still in the lab, thus substantially reducing the amount of field testing with real users. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    },
    {
        "id": "cora_test_20625",
        "graph": {
            "node_idx": 20625,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                20625
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: hierarchical modularity: compilation management for standard mlmany programming languages identify modular units with compilation units, while only few extend this to permit hierarchies of language-level modules within individual compilation units. but when the number of such compilation units is large, then it becomes increasingly important that they themselves can be grouped together and that explicit export interfaces can be used to control name-spaces. we explain how the group model implemented in sml/nj's compilation manager cm provides the necessary facilities to avoid unwanted interferences between unrelated parts of large programs. we also discuss the problem of automatic dependency analysis as well as its complexity and show ways of avoiding intractability. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "programming, object oriented"
            }
        ]
    },
    {
        "id": "cora_test_20639",
        "graph": {
            "node_idx": 20639,
            "edge_index": [
                [],
                []
            ],
            "node_list": [
                20639
            ]
        },
        "conversations": [
            {
                "from": "human",
                "value": "Given a citation graph: \n<graph>\nwhere the 0th node is the target paper, and other nodes are its one-hop or multi-hop neighbors, with the following information: \nAbstract: a surficial pronunciation modelwe argue for a surficial pronunciation model: a model without underlying forms. the surficial model outperforms a traditional generative model by a significant margin on conversational speech (switchboard) as well as on read speech (timit). our results suggest that the true mapping from underlying forms to surface forms is too complex to be accurately modeled using current techniques, and that we would be best served to model the surface forms directly. \n Question: Which of the following subcategories of computer science does this paper belong to: 1. operating systems, memory management 2. artificial intelligence, planning 3. artificial intelligence, vision and pattern recognition 4. artificial intelligence, machine learning, case-based 5. artificial intelligence, agents 6. artificial intelligence, machine learning, probabilistic methods 7. operating systems, distributed 8. artificial intelligence, machine learning, genetic algorithms 9. human computer interaction, graphics and virtual reality 10. programming, object oriented 11. encryption and compression, encryption 12. networking, protocols 13.  programming, software development 14. programming, compiler design 15. artificial intelligence, machine learning, theory 16. artificial intelligence, machine learning, neural networks 17. programming, logic 18. operating systems, realtime 19. artificial intelligence, speech 20. artificial intelligence, robotics 21. artificial intelligence, games and search ? Directly give the full name of the most likely category of this paper. "
            },
            {
                "from": "gpt",
                "value": "artificial intelligence, speech"
            }
        ]
    }
]